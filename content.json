{"meta":{"title":"LiuQianglong's Blog","subtitle":"我的学习笔记","description":"关于网络、AWS、Python的学习笔记","author":"LiuQianglong","url":"https://liuqianglong.com"},"pages":[],"posts":[{"title":"AWS GWLB对访问ALB流量做安全检测","slug":"AWS-GWLB对访问ALB流量做安全检测","date":"2022-11-14T10:30:00.000Z","updated":"2022-11-23T15:19:58.011Z","comments":true,"path":"AWS-GWLB对访问ALB流量做安全检测.html","link":"","permalink":"https://liuqianglong.com/AWS-GWLB%E5%AF%B9%E8%AE%BF%E9%97%AEALB%E6%B5%81%E9%87%8F%E5%81%9A%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B.html","excerpt":"","text":"B站视频链接：https://www.bilibili.com/video/BV1Rd4y1F7Fc/微信公众号：自刘地 一、架构图上一篇介绍了GWLB结合Network Load Balancer的场景，这里介绍一下GWLB结合Application Load Balancer的场景，主要区别还是在于路由表的设计。另外因为ALB可以关联AWS WAF，所以在代码里面顺带为ALB关联了一个WAF策略，策略只允许来自中国地区的IP访问，来自其他国家地区的请求会被拒绝。 这个架构图高清图片我放到百度网盘了，链接：https://pan.baidu.com/s/1r5uPBSmr9e0qaliz7fdTyQ 提取码：uuqd 实验环境一共有两个VPC，左边的是业务VPC，里面有两个APP模拟HTTP的业务，EC2放在私有子网里面，在不同的AZ。 有一个面向互联网的Application Load Balancer，向公网发布了这个HTTP的服务，这样互联网上的用户，就可以通过ALB访问后面的业务。我们要做的是把这个流量，引导到防火墙上去，做安全检测。这里使用Linux的iptables来模拟防火墙。 另外，APP可以通过NAT GW上网，这个APP主动访问互联网的流量，也需要送到防火墙上去，做安全检测。所以，APP有两种流量都需要送到防火墙上去做安全检测，下面看一下APP的两种流量路径。 一、来自于互联网对ALB访问的流量路径。 首先，互联网上的用户，对ALB的公有DNS发起请求，这个DNS请求，会解析到ALB的两个公网IP地址，然后流量通过ISP路由，到达AWS的IGW，然后抵达ALB。 流量到达ALB之后，需要转发给APP，但是去往本VPC CIDR段的流量指向了Endpoint，所以ALB会依据路由表将流量发送到Endpoint上，这里假设解析ALB的主IP地址是Public Subnet1，所以流量会给到Endpoint1。 Endpoint1收到流量之后，会通过Private Link，把流量发送到GWLB上。 GWLB会通过GENEVE封装报文，把流量发送到防火墙。 防火墙做完安全检测之后，又会把流量送回给GWLB，然后通过Private Link，送到GWLB Endpoint1。 到达GWLB Endpoint1之后，匹配到local路由，流量最终发送到APP1上。 继续看一下回包流程。 APP1收到了来自于ALB的流量，APP1看到的源IP地址是ALB弹性接口的私有IP地址，APP1关联的路由表匹配到10.120.0.0/16，将流量发送的Endpoint1。 接下来又是一样的流程，流量会经过Private Link到防火墙绕一圈再回来。 流量回到GWLB Endpoint1上之后，会匹配到默认路由，将流量发送到NAT GW1。 流量到NAT GW1之后，匹配到默认路由，流量通过IGW发送回客户端。 以上就是完整的从互联网对ALB发起请求和回包的流程。 二、APP1主动访问互联网的流量路径 APP1对互联网地址发起请求，APP1查询子网关联的路由表，匹配到默认路由，流量送到Endpoint1。 流量到GWLB Endpoint1之后，通过Private Link把流量送到防火墙检测，然后再发回来。 Endpoint1收到流量之后，会匹配到默认路由，将流量发送到NAT GW1。 流量到NAT GW1之后，匹配到默认路由，流量通过IGW发送到目的地。 继续看回包流程。 互联网上的主机收到报文以后，源地址是NAT GW1的公网IP地址，报文通过ISP路由，流量到达NAT GW1。 到达NAT GW1之后查询转换表项，准备将流量发送到APP1的私有IP地址，NAT GW1去往本VPC CIDR段的流量指向了Endpoint1，所以流量发送到Endpoint1。 流量到GWLB Endpoint1之后，通过Private Link把流量送到防火墙检测，然后再发回来。 Endpoint1收到流量之后，匹配到local路由，将流量发送到APP1。 二、创建实验环境堆栈大概需要8分钟左右的时间创建完成。 上传堆栈文件。 编辑堆栈名称，修改实例密钥。 允许创建IAM资源。arameters: EC2InstanceAmiId: Type: AWS::SSM::Parameter::Value&lt;AWS::EC2::Image::Id&gt; Default: &#x27;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2&#x27; Environment: Type: String AllowedValues: - dev - prod Default: dev MyKeyPair: Description: Amazon EC2 Key Pair Type: AWS::EC2::KeyPair::KeyName Default: Global_Tokyo_KeyPair WebServerPort: Description: Apache Http Server Port Type: String Default: 8443 AllowedValues: - 8443 - 8888 - 8088Resources: BastionSsmRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Statement: - Effect: Allow Principal: Service: - ec2.amazonaws.com Action: - &#x27;sts:AssumeRole&#x27; Path: / BastionSsmPolicy: Type: AWS::IAM::Policy Properties: PolicyName: PrivatelianceInstanceAccess PolicyDocument: Statement: - Effect: Allow Action: - ssm:DescribeAssociation - ssm:GetDeployablePatchSnapshotForInstance - ssm:GetDocument - ssm:DescribeDocument - ssm:GetManifest - ssm:GetParameter - ssm:GetParameters - ssm:ListAssociations - ssm:ListInstanceAssociations - ssm:PutInventory - ssm:PutComplianceItems - ssm:PutConfigurePackageResult - ssm:UpdateAssociationStatus - ssm:UpdateInstanceAssociationStatus - ssm:UpdateInstanceInformation Resource: &quot;*&quot; - Effect: Allow Action: - ssmmessages:CreateControlChannel - ssmmessages:CreateDataChannel - ssmmessages:OpenControlChannel - ssmmessages:OpenDataChannel Resource: &quot;*&quot; - Effect: Allow Action: - ec2messages:AcknowledgeMessage - ec2messages:DeleteMessage - ec2messages:FailMessage - ec2messages:GetEndpoint - ec2messages:GetMessages - ec2messages:SendReply Resource: &quot;*&quot; Roles: - !Ref BastionSsmRole BastionSsmProfile: Type: AWS::IAM::InstanceProfile Properties: Path: / Roles: - !Ref BastionSsmRole#=========================================SecVpc========================================## 创建SecVpc SecVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.100.10.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc# 创建IGW并且关联到VPC SecVpcIGW: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpcIGW SecVpcAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref SecVpc InternetGatewayId: !Ref SecVpcIGW#---------------------------SecVpc创建6个子网-------------------------------------## SecVpc AZ1内创建公有子网 SecVpcAz1PublicSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.10.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-Public-Subnet# SecVpc AZ2内创建公有子网 SecVpcAz2PublicSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.20.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-Public-Subnet# SecVpc AZ1内创建私有子网 SecVpcAz1PrivateSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.30.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-Private-Subnet# SecVpc AZ2内创建私有子网 SecVpcAz2PrivateSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.40.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-Private-Subnet# SecVpc AZ1内创建TGW子网 SecVpcAz1TgwSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.50.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-TGW-Subnet# SecVpc AZ2内创建TGW子网 SecVpcAz2TgwSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.60.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-TGW-Subnet#---------------------------SecVpc创建路由表-------------------------------------## 公有子网路由表及关联 SecVpcAz1PublicRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-Public-RouteTable SecVpcAz1PublicRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz1PublicRouteTable SubnetId: !Ref SecVpcAz1PublicSubnet SecVpcAz2PublicRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-Public-RouteTable SecVpcAz2PublicRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz2PublicRouteTable SubnetId: !Ref SecVpcAz2PublicSubnet# Private子网路由表及关联 SecVpcAz1PrivateRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-Private-RouteTable SecVpcAz1PrivateRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz1PrivateRouteTable SubnetId: !Ref SecVpcAz1PrivateSubnet SecVpcAz2PrivateRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-Private-RouteTable SecVpcAz2PrivateRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz2PrivateRouteTable SubnetId: !Ref SecVpcAz2PrivateSubnet# Tgw路由表及关联 SecVpcAz1TgwRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-Tgw-RouteTable SecVpcAz1TgwRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz1TgwRouteTable SubnetId: !Ref SecVpcAz1TgwSubnet SecVpcAz2TgwRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-Tgw-RouteTable SecVpcAz2TgwRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz2TgwRouteTable SubnetId: !Ref SecVpcAz2TgwSubnet#---------------------------NAT Gateway------------------------------------## AZ1 NAT GW SecVpcAz1NatGatewayEIP: Type: AWS::EC2::EIP Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-NatGateway-EIP SecVpcAz1NatGateway: Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt SecVpcAz1NatGatewayEIP.AllocationId SubnetId: !Ref SecVpcAz1PublicSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-NatGateway# AZ2 NAT GW SecVpcAz2NatGatewayEIP: Type: AWS::EC2::EIP Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-NatGateway-EIP SecVpcAz2NatGateway: Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt SecVpcAz2NatGatewayEIP.AllocationId SubnetId: !Ref SecVpcAz2PublicSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-NatGateway SecVpcAz1PrivateSubnetToInternetRoute: DependsOn: SecVpcAz1NatGateway Type: AWS::EC2::Route Properties: RouteTableId: !Ref SecVpcAz1PrivateRouteTable DestinationCidrBlock: &#x27;0.0.0.0/0&#x27; NatGatewayId: !Ref SecVpcAz1NatGateway SecVpcAz2PrivateSubnetToInternetRoute: DependsOn: SecVpcAz2NatGateway Type: AWS::EC2::Route Properties: RouteTableId: !Ref SecVpcAz2PrivateRouteTable DestinationCidrBlock: &#x27;0.0.0.0/0&#x27; NatGatewayId: !Ref SecVpcAz2NatGateway#---------------------------添加路由------------------------------------## 公有子网添加默认路由去往IGW SecVpcAz1PublicSubnetToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: SecVpcIGW Properties: RouteTableId: !Ref SecVpcAz1PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref SecVpcIGW SecVpcAz2PublicSubnetToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: SecVpcIGW Properties: RouteTableId: !Ref SecVpcAz2PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref SecVpcIGW#---------------------------SecVpc创建安全组------------------------------------# SecVpcSg: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SG to test ping VpcId: !Ref SecVpc SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.100.0.0/16 - IpProtocol: tcp FromPort: 3389 ToPort: 3389 CidrIp: 0.0.0.0/0 Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpcSg#---------------------------SecVpc创建EC2实例------------------------------------##--------------------------IAM Instance Role and Profile------------------------------------# ApplianceRole: Type: AWS::IAM::Role Properties: RoleName: !Sub &quot;$&#123;AWS::StackName&#125;-appliance-role&quot; ManagedPolicyArns: - &quot;arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore&quot; AssumeRolePolicyDocument: Statement: - Effect: Allow Principal: Service: - ec2.amazonaws.com Action: - &#x27;sts:AssumeRole&#x27; Path: / AppliancePolicy: Type: AWS::IAM::Policy Properties: PolicyName: AppServer PolicyDocument: Statement: - Effect: Allow Action: - ec2:DescribeNetworkInterfaces Resource: &#x27;*&#x27; Roles: - !Ref ApplianceRole ApplianceProfile: Type: AWS::IAM::InstanceProfile Properties: Path: / Roles: - !Ref ApplianceRole#---------------------------SecVpc创建GWLB------------------------------------## Gateway Load Balancer (GWLB), Target Group, Listener Gwlb: Type: AWS::ElasticLoadBalancingV2::LoadBalancer Properties: LoadBalancerAttributes: - Key: load_balancing.cross_zone.enabled Value: true Name: gwlb1 Type: gateway Subnets: - !Ref SecVpcAz1PrivateSubnet - !Ref SecVpcAz2PrivateSubnet Tags: - Key: Name Value: !Sub &quot;$&#123;AWS::StackName&#125;-gwlb-1&quot; # Target Group: TargetGroup: Type: AWS::ElasticLoadBalancingV2::TargetGroup Properties: Name: tg1 Port: 6081 Protocol: GENEVE TargetGroupAttributes: - Key: deregistration_delay.timeout_seconds Value: &quot;20&quot; VpcId: !Ref SecVpc HealthCheckPort: 80 HealthCheckProtocol: HTTP TargetType: instance Targets: - Id: !Ref Appliance1 - Id: !Ref Appliance2 Tags: - Key: Name Value: !Sub &quot;$&#123;AWS::StackName&#125;-tg-1&quot; # Listener: Listener: Type: AWS::ElasticLoadBalancingV2::Listener Properties: DefaultActions: - Type: forward TargetGroupArn: !Ref TargetGroup LoadBalancerArn: !Ref Gwlb#---------------------------SecVpc创建EC2实例------------------------------------## EC2 Instances (Appliances acting as target for GWLB): Appliance1: DependsOn: [Gwlb, SecVpcAz1PrivateSubnetToInternetRoute] Type: AWS::EC2::Instance Properties: ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t2.micro IamInstanceProfile: !Ref ApplianceProfile SecurityGroupIds: - !Ref SecVpcSg SubnetId: !Ref SecVpcAz1PrivateSubnet Tags: - Key: Name Value: !Sub &quot;$&#123;AWS::StackName&#125;-appliance-1&quot; UserData: Fn::Base64: | #!/bin/bash -ex # Install packages: yum update -y; yum install jq -y; yum install httpd -y; yum install htop -y; sudo yum install iptables-services -y; # Enable IP Forwarding: echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.d/00-defaults.conf; sysctl -p /etc/sysctl.d/00-defaults.conf; # Configure hostname: hostnamectl set-hostname gwlb-target-1; # Configure SSH client alive interval for ssh session timeout: echo &#x27;ClientAliveInterval 60&#x27; | sudo tee --append /etc/ssh/sshd_config; service sshd restart; # Set dark background for vim: touch /home/ec2-user/.vimrc; echo &quot;set background=dark&quot; &gt;&gt; /home/ec2-user/.vimrc; # Define variables: curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document &gt; /home/ec2-user/iid; export instance_interface=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/); export instance_vpcid=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$instance_interface/vpc-id); export instance_az=$(cat /home/ec2-user/iid |grep &#x27;availability&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27;); export instance_ip=$(cat /home/ec2-user/iid |grep &#x27;privateIp&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$2&#125;&#x27;); export instance_region=$(cat /home/ec2-user/iid |grep &#x27;region&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$2&#125;&#x27;); export local_az_gwlb_ip=$(aws --region $instance_region ec2 describe-network-interfaces --filters Name=vpc-id,Values=$instance_vpcid | jq &#x27; .NetworkInterfaces[] | select(.AvailabilityZone==&#x27;$instance_az&#x27;) | select(.InterfaceType==&quot;gateway_load_balancer&quot;) |.PrivateIpAddress&#x27; -r); export remote_az_gwlb_ip=$(aws --region $instance_region ec2 describe-network-interfaces --filters Name=vpc-id,Values=$instance_vpcid | jq &#x27; .NetworkInterfaces[] | select(.AvailabilityZone!=&#x27;$instance_az&#x27;) | select(.InterfaceType==&quot;gateway_load_balancer&quot;) |.PrivateIpAddress&#x27; -r); # Start http and configure index.html: systemctl enable httpd; systemctl start httpd; touch /var/www/html/index.html; echo &quot;&lt;html&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;head&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;title&gt;Gateway Load Balancer POC&lt;/title&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;meta http-equiv=&#x27;Content-Type&#x27; content=&#x27;text/html; charset=ISO-8859-1&#x27;&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;/head&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;body&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;h1&gt;Welcome to Gateway Load Balancer POC:&lt;/h1&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;h2&gt;This is appliance running in $instance_az. Happy testing!&lt;/h2&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;/body&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot;&lt;/html&gt;&quot; &gt;&gt; /var/www/html/index.html # Start and configure iptables: systemctl enable iptables; systemctl start iptables; # Configuration below allows allows all traffic: # Set the default policies for each of the built-in chains to ACCEPT: iptables -P INPUT ACCEPT; iptables -P FORWARD ACCEPT; iptables -P OUTPUT ACCEPT; # Flush the nat and mangle tables, flush all chains (-F), and delete all non-default chains (-X): iptables -t nat -F; iptables -t mangle -F; iptables -F; iptables -X; # Configure nat table to hairpin traffic back to GWLB: iptables -t nat -A PREROUTING -p udp -s $local_az_gwlb_ip -d $instance_ip -i eth0 -j DNAT --to-destination $local_az_gwlb_ip:6081; iptables -t nat -A POSTROUTING -p udp --dport 6081 -s $local_az_gwlb_ip -d $local_az_gwlb_ip -o eth0 -j MASQUERADE; iptables -t nat -A PREROUTING -p udp -s $remote_az_gwlb_ip -d $instance_ip -i eth0 -j DNAT --to-destination $remote_az_gwlb_ip:6081; iptables -t nat -A POSTROUTING -p udp --dport 6081 -s $remote_az_gwlb_ip -d $remote_az_gwlb_ip -o eth0 -j MASQUERADE; # Save iptables: service iptables save; Appliance2: DependsOn: [ Gwlb, SecVpcAz2PrivateSubnetToInternetRoute ] Type: AWS::EC2::Instance Properties: ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t2.micro IamInstanceProfile: !Ref ApplianceProfile SecurityGroupIds: - !Ref SecVpcSg SubnetId: !Ref SecVpcAz2PrivateSubnet Tags: - Key: Name Value: !Sub &quot;$&#123;AWS::StackName&#125;-appliance-2&quot; UserData: Fn::Base64: | #!/bin/bash -ex # Install packages: yum update -y; yum install jq -y; yum install httpd -y; yum install htop -y; sudo yum install iptables-services -y; # Enable IP Forwarding: echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.d/00-defaults.conf; sysctl -p /etc/sysctl.d/00-defaults.conf; # Configure hostname: hostnamectl set-hostname gwlb-target-2; # Configure SSH client alive interval for ssh session timeout: echo &#x27;ClientAliveInterval 60&#x27; | sudo tee --append /etc/ssh/sshd_config; service sshd restart; # Set dark background for vim: touch /home/ec2-user/.vimrc; echo &quot;set background=dark&quot; &gt;&gt; /home/ec2-user/.vimrc; # Define variables: curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document &gt; /home/ec2-user/iid; export instance_interface=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/); export instance_vpcid=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$instance_interface/vpc-id); export instance_az=$(cat /home/ec2-user/iid |grep &#x27;availability&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27;); export instance_ip=$(cat /home/ec2-user/iid |grep &#x27;privateIp&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$2&#125;&#x27;); export instance_region=$(cat /home/ec2-user/iid |grep &#x27;region&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$2&#125;&#x27;); export local_az_gwlb_ip=$(aws --region $instance_region ec2 describe-network-interfaces --filters Name=vpc-id,Values=$instance_vpcid | jq &#x27; .NetworkInterfaces[] | select(.AvailabilityZone==&#x27;$instance_az&#x27;) | select(.InterfaceType==&quot;gateway_load_balancer&quot;) |.PrivateIpAddress&#x27; -r); export remote_az_gwlb_ip=$(aws --region $instance_region ec2 describe-network-interfaces --filters Name=vpc-id,Values=$instance_vpcid | jq &#x27; .NetworkInterfaces[] | select(.AvailabilityZone!=&#x27;$instance_az&#x27;) | select(.InterfaceType==&quot;gateway_load_balancer&quot;) |.PrivateIpAddress&#x27; -r); # Start http and configure index.html: systemctl enable httpd; systemctl start httpd; touch /var/www/html/index.html; echo &quot;&lt;html&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;head&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;title&gt;Gateway Load Balancer POC&lt;/title&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;meta http-equiv=&#x27;Content-Type&#x27; content=&#x27;text/html; charset=ISO-8859-1&#x27;&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;/head&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;body&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;h1&gt;Welcome to Gateway Load Balancer POC:&lt;/h1&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;h2&gt;This is appliance running in $instance_az. Happy testing!&lt;/h2&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;/body&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot;&lt;/html&gt;&quot; &gt;&gt; /var/www/html/index.html # Start and configure iptables: systemctl enable iptables; systemctl start iptables; # Configuration below allows allows all traffic: # Set the default policies for each of the built-in chains to ACCEPT: iptables -P INPUT ACCEPT; iptables -P FORWARD ACCEPT; iptables -P OUTPUT ACCEPT; # Flush the nat and mangle tables, flush all chains (-F), and delete all non-default chains (-X): iptables -t nat -F; iptables -t mangle -F; iptables -F; iptables -X; # Configure nat table to hairpin traffic back to GWLB: iptables -t nat -A PREROUTING -p udp -s $local_az_gwlb_ip -d $instance_ip -i eth0 -j DNAT --to-destination $local_az_gwlb_ip:6081; iptables -t nat -A POSTROUTING -p udp --dport 6081 -s $local_az_gwlb_ip -d $local_az_gwlb_ip -o eth0 -j MASQUERADE; iptables -t nat -A PREROUTING -p udp -s $remote_az_gwlb_ip -d $instance_ip -i eth0 -j DNAT --to-destination $remote_az_gwlb_ip:6081; iptables -t nat -A POSTROUTING -p udp --dport 6081 -s $remote_az_gwlb_ip -d $remote_az_gwlb_ip -o eth0 -j MASQUERADE; # Save iptables: service iptables save; SecVpcBastionLinux: Type: AWS::EC2::Instance Properties: IamInstanceProfile: !Ref BastionSsmProfile ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t3.nano NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: SecVpcSg SubnetId: !Ref SecVpcAz1PublicSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-Bastion-Linux# Create VPC Endpoint Service: VpcEndpointService: Type: AWS::EC2::VPCEndpointService Properties: GatewayLoadBalancerArns: - !Ref Gwlb AcceptanceRequired: false# Create Lambda Custom Resource to retrieve VPC Endpoint Service Name: VpceServiceLambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Principal: Service: - lambda.amazonaws.com Action: - sts:AssumeRole Path: / Policies: - PolicyName: root PolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Action: - logs:CreateLogStream - logs:PutLogEvents Resource: arn:aws:logs:*:*:* - Effect: Allow Action: - ec2:DescribeVpcEndpointServiceConfigurations - ec2:DescribeVpcEndpointServicePermissions - ec2:DescribeVpcEndpointServices Resource: &quot;*&quot; VpceServiceLogGroup: Type: AWS::Logs::LogGroup Properties: LogGroupName: !Sub /aws/lambda/$&#123;AWS::StackName&#125;-service RetentionInDays: 1 VpceServiceName: Type: AWS::Lambda::Function DependsOn: VpceServiceLogGroup Properties: FunctionName: !Sub $&#123;AWS::StackName&#125;-service Handler: &quot;index.handler&quot; Role: !GetAtt VpceServiceLambdaExecutionRole.Arn Code: ZipFile: | import json import logging import time import boto3 import cfnresponse from botocore.exceptions import ClientError try: ec2 = boto3.client(&#x27;ec2&#x27;) except ClientError as e: logger.error(f&quot;ERROR: failed to connect to EC2 client: &#123;e&#125;&quot;) sys.exit(1) def handler(event, context): logger = logging.getLogger() logger.setLevel(logging.INFO) logger.info(&#x27;Received event: &#123;&#125;&#x27;.format(json.dumps(event))) responseData = &#123;&#125; responseStatus = cfnresponse.FAILED try: serviceid = event[&quot;ResourceProperties&quot;][&quot;VpceServiceId&quot;] except Exception as e: logger.info(&#x27;Attribute retrival failure: &#123;&#125;&#x27;.format(e)) try: if event[&quot;RequestType&quot;] == &quot;Delete&quot;: responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) except Exception: logger.exception(&quot;Signaling failure to CloudFormation.&quot;) cfnresponse.send(event, context, cfnresponse.FAILED, &#123;&#125;) if event[&quot;RequestType&quot;] == &quot;Create&quot;: logger.info(&quot;Retrieving VPC Endpoint Service Name:&quot;) try: response = ec2.describe_vpc_endpoint_service_configurations( Filters=[ &#123; &#x27;Name&#x27;: &#x27;service-id&#x27;, &#x27;Values&#x27;: [serviceid] &#125; ] ) except Exception as e: logger.info(&#x27;ec2.describe_vpc_endpoint_service_configurations failure: &#123;&#125;&#x27;.format(e)) service_name = response[&#x27;ServiceConfigurations&#x27;][0][&#x27;ServiceName&#x27;] time.sleep(120) responseData[&#x27;ServiceName&#x27;] = service_name responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) Runtime: python3.7 Timeout: 150 RetrieveVpceServiceName: Type: Custom::RetrieveAttributes Properties: ServiceToken: !GetAtt VpceServiceName.Arn VpceServiceId: !Ref VpcEndpointService#=========================================VpcB========================================## 创建VpcB VpcB: Type: AWS::EC2::VPC Properties: CidrBlock: 10.120.10.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB# 创建IGW并且关联到VPC VpcBIGW: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcBIGW VpcBAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref VpcB InternetGatewayId: !Ref VpcBIGW#---------------------------VpcB创建8个子网-------------------------------------## VpcB AZ1内创建公有子网 VpcBAz1PublicSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcB CidrBlock: 10.120.10.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ1-Public-Subnet# VpcB AZ2内创建公有子网 VpcBAz2PublicSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcB CidrBlock: 10.120.20.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ2-Public-Subnet# VpcB AZ1内创建APP子网 VpcBAz1AppSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcB CidrBlock: 10.120.30.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ1-App-Subnet# VpcB AZ2内创建APP子网 VpcBAz2AppSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcB CidrBlock: 10.120.40.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ2-App-Subnet# VpcB AZ1内创建GWLB子网 VpcBAz1GwlbeSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcB CidrBlock: 10.120.50.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ1-GWLBe-Subnet# VpcB AZ2内创建GWLB子网 VpcBAz2GwlbeSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcB CidrBlock: 10.120.60.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ2-GWLBe-Subnet# VpcB AZ1内创建TGW子网 VpcBAz1TgwSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcB CidrBlock: 10.120.70.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ1-TGW-Subnet# VpcB AZ2内创建TGW子网 VpcBAz2TgwSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcB CidrBlock: 10.120.80.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ2-TGW-Subnet#---------------------------VpcB创建路由表-------------------------------------## 公有子网路由表及关联 VpcBAz1PublicRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcB Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ1-Public-RouteTable VpcBAz1PublicRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcBAz1PublicRouteTable SubnetId: !Ref VpcBAz1PublicSubnet VpcBAz2PublicRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcB Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ2-Public-RouteTable VpcBAz2PublicRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcBAz2PublicRouteTable SubnetId: !Ref VpcBAz2PublicSubnet# App子网路由表及关联 VpcBAz1AppRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcB Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ1-App-RouteTable VpcBAz1AppRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcBAz1AppRouteTable SubnetId: !Ref VpcBAz1AppSubnet VpcBAz2AppRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcB Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ2-App-RouteTable VpcBAz2AppRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcBAz2AppRouteTable SubnetId: !Ref VpcBAz2AppSubnet# GWLBe子网路由表及关联 VpcBAz1GwlbeRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcB Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ1-GWLBe-RouteTable VpcBAz1GwlbeRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcBAz1GwlbeRouteTable SubnetId: !Ref VpcBAz1GwlbeSubnet VpcBAz2GwlbeRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcB Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ2-GWLBe-RouteTable VpcBAz2GwlbeRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcBAz2GwlbeRouteTable SubnetId: !Ref VpcBAz2GwlbeSubnet# Tgw路由表及关联 VpcBAz1TgwRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcB Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ1-Tgw-RouteTable VpcBAz1TgwRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcBAz1TgwRouteTable SubnetId: !Ref VpcBAz1TgwSubnet VpcBAz2TgwRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcB Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ2-Tgw-RouteTable VpcBAz2TgwRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcBAz2TgwRouteTable SubnetId: !Ref VpcBAz2TgwSubnet#---------------------------NAT Gateway------------------------------------## AZ1 NAT GW VpcBAz1NatGatewayEIP: Type: AWS::EC2::EIP Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ1-NatGateway-EIP VpcBAz1NatGateway: Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt VpcBAz1NatGatewayEIP.AllocationId SubnetId: !Ref VpcBAz1PublicSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ1-NatGateway# AZ2 NAT GW VpcBAz2NatGatewayEIP: Type: AWS::EC2::EIP Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ2-NatGateway-EIP VpcBAz2NatGateway: Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt VpcBAz2NatGatewayEIP.AllocationId SubnetId: !Ref VpcBAz2PublicSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-AZ2-NatGateway# VpcB 创建Endpoint VpcBEndpoint1: Type: AWS::EC2::VPCEndpoint Properties: VpcId: !Ref VpcB ServiceName: !GetAtt RetrieveVpceServiceName.ServiceName VpcEndpointType: GatewayLoadBalancer SubnetIds: - !Ref VpcBAz1GwlbeSubnet VpcBEndpoint2: Type: AWS::EC2::VPCEndpoint Properties: VpcId: !Ref VpcB ServiceName: !GetAtt RetrieveVpceServiceName.ServiceName VpcEndpointType: GatewayLoadBalancer SubnetIds: - !Ref VpcBAz2GwlbeSubnet#---------------------------添加路由------------------------------------## 公有子网添加默认路由去往IGW VpcBAz1PublicSubnetToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcBIGW Properties: RouteTableId: !Ref VpcBAz1PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref VpcBIGW VpcBAz2PublicSubnetToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcBIGW Properties: RouteTableId: !Ref VpcBAz2PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref VpcBIGW# App子网添加默认路由去往GWLBe VpcBAz1AppSubnetRoute1: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcBEndpoint2 Properties: RouteTableId: !Ref VpcBAz1AppRouteTable DestinationCidrBlock: 10.120.20.0/24 VpcEndpointId: !Ref VpcBEndpoint2 VpcBAz1AppSubnetRoute2: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcBEndpoint1 Properties: RouteTableId: !Ref VpcBAz1AppRouteTable DestinationCidrBlock: 0.0.0.0/0 VpcEndpointId: !Ref VpcBEndpoint1 VpcBAz2AppSubnetRoute1: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcBEndpoint1 Properties: RouteTableId: !Ref VpcBAz2AppRouteTable DestinationCidrBlock: 10.120.10.0/24 VpcEndpointId: !Ref VpcBEndpoint1 VpcBAz2AppSubnetRoute2: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcBEndpoint2 Properties: RouteTableId: !Ref VpcBAz2AppRouteTable DestinationCidrBlock: 0.0.0.0/0 VpcEndpointId: !Ref VpcBEndpoint2# Gwlbe子网添加默认路由去往NAT GW VpcBAz1GwlbeSubnetRoute1: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcBAz1NatGateway Properties: RouteTableId: !Ref VpcBAz1GwlbeRouteTable DestinationCidrBlock: 0.0.0.0/0 NatGatewayId: !Ref VpcBAz1NatGateway VpcBAz2GwlbeSubnetRoute1: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcBAz2NatGateway Properties: RouteTableId: !Ref VpcBAz2GwlbeRouteTable DestinationCidrBlock: 0.0.0.0/0 NatGatewayId: !Ref VpcBAz2NatGateway#---------------------------VpcB创建安全组------------------------------------# VpcBBastionVpcSg: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SG to test ping VpcId: !Ref VpcB SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.120.0.0/16 - IpProtocol: tcp FromPort: 3389 ToPort: 3389 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: !Ref WebServerPort ToPort: !Ref WebServerPort CidrIp: 0.0.0.0/0 Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcBSg#---------------------------VpcB创建EC2实例------------------------------------# VpcBBastionLinux: Type: AWS::EC2::Instance Properties: IamInstanceProfile: !Ref BastionSsmProfile ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t3.nano NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: VpcBBastionVpcSg SubnetId: !Ref VpcBAz1PublicSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-Bastion-Linux VpcBApp1Linux: Type: AWS::EC2::Instance DependsOn: [ VpcBEndpoint1, VpcBAz2AppSubnetRoute1 ] Properties: IamInstanceProfile: !Ref BastionSsmProfile ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t3.nano NetworkInterfaces: - DeviceIndex: 0 GroupSet: - Ref: VpcBBastionVpcSg SubnetId: !Ref VpcBAz1AppSubnet UserData: Fn::Base64: !Sub | #!/bin/bash yum update -y yum install -y httpd sed -i.bak &#x27;s/Listen 80/Listen $&#123;WebServerPort&#125;/g&#x27; /etc/httpd/conf/httpd.conf echo &quot;&lt;h2&gt;Hello World from $(hostname -f)&lt;/h2&gt;&quot; &gt; /var/www/html/index.html systemctl start httpd.service systemctl enable httpd.service Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-App1-Linux VpcBApp2Linux: Type: AWS::EC2::Instance DependsOn: [VpcBEndpoint2, VpcBAz2AppSubnetRoute2] Properties: IamInstanceProfile: !Ref BastionSsmProfile ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t3.nano NetworkInterfaces: - DeviceIndex: 0 GroupSet: - Ref: VpcBBastionVpcSg SubnetId: !Ref VpcBAz2AppSubnet UserData: Fn::Base64: !Sub | #!/bin/bash yum update -y yum install -y httpd sed -i.bak &#x27;s/Listen 80/Listen $&#123;WebServerPort&#125;/g&#x27; /etc/httpd/conf/httpd.conf echo &quot;&lt;h2&gt;Hello World from $(hostname -f)&lt;/h2&gt;&quot; &gt; /var/www/html/index.html systemctl start httpd.service systemctl enable httpd.service Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcB-App2-Linux# -----------创建ALB----------- VpcBEc2TargetGroup: Type: AWS::ElasticLoadBalancingV2::TargetGroup Properties: HealthCheckIntervalSeconds: 30 HealthCheckProtocol: HTTP HealthCheckTimeoutSeconds: 15 HealthyThresholdCount: 5 Matcher: HttpCode: &#x27;200&#x27; Name: VpcBEc2TargetGroup Port: !Ref WebServerPort Protocol: HTTP TargetGroupAttributes: - Key: deregistration_delay.timeout_seconds Value: &#x27;20&#x27; Targets: - Id: !Ref VpcBApp1Linux Port: !Ref WebServerPort - Id: !Ref VpcBApp2Linux Port: !Ref WebServerPort UnhealthyThresholdCount: 3 VpcId: !Ref VpcB Tags: - Key: Name Value: VpcB-Target-Group VpcBAlbListener: Type: AWS::ElasticLoadBalancingV2::Listener Properties: DefaultActions: - Type: forward TargetGroupArn: !Ref VpcBEc2TargetGroup LoadBalancerArn: !Ref VpcBApplicationLoadBalancer Port: !Ref WebServerPort Protocol: HTTP VpcBApplicationLoadBalancer: DependsOn: VpcBIGW Type: AWS::ElasticLoadBalancingV2::LoadBalancer Properties: Name: !Sub $&#123;AWS::StackName&#125;-VpcB-ALB Type: application Scheme: internet-facing Subnets: - !Ref VpcBAz1PublicSubnet - !Ref VpcBAz2PublicSubnet SecurityGroups: - !GetAtt VpcBBastionVpcSg.GroupId# -----------创建WAF----------- WafTestPermitCnIpWebACL: Type: &#x27;AWS::WAFv2::WebACL&#x27; Properties: Name: waf-test-web-acl Scope: REGIONAL Description: WebACL permit all from china ip address. DefaultAction: Block: &#123;&#125; VisibilityConfig: SampledRequestsEnabled: true CloudWatchMetricsEnabled: true MetricName: permit-cn Rules: - Name: waf-test-permit-cn-ipaddress Priority: 0 Statement: GeoMatchStatement: CountryCodes: - CN Action: Allow: &#123;&#125; VisibilityConfig: SampledRequestsEnabled: true CloudWatchMetricsEnabled: true MetricName: permit-cn Tags: - Key: Name Value: waf-test-permit-cn-webacl WafTestPermitCnIpWebACLAssociation: Type: &#x27;AWS::WAFv2::WebACLAssociation&#x27; Properties: WebACLArn: !GetAtt WafTestPermitCnIpWebACL.Arn ResourceArn: !Ref VpcBApplicationLoadBalancer# -------------自定义资源修改路由表------------------------# Create Lambda Custom Resource to edit existing route in an RTB ReplaceRouteLambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Principal: Service: - lambda.amazonaws.com Action: - sts:AssumeRole Path: / Policies: - PolicyName: root PolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Action: - logs:CreateLogStream - logs:PutLogEvents Resource: arn:aws:logs:*:*:* - Effect: Allow Action: - ec2:ReplaceRoute Resource: &quot;*&quot; ReplaceRouteLogGroup: Type: AWS::Logs::LogGroup Properties: LogGroupName: !Sub /aws/lambda/$&#123;AWS::StackName&#125;ReplaceRoute RetentionInDays: 1 ReplaceRoute: Type: AWS::Lambda::Function DependsOn: ReplaceRouteLogGroup Properties: FunctionName: !Sub $&#123;AWS::StackName&#125;ReplaceRoute Handler: &quot;index.handler&quot; Role: !GetAtt ReplaceRouteLambdaExecutionRole.Arn Code: ZipFile: | import json import logging import time import boto3 import cfnresponse from botocore.exceptions import ClientError try: ec2 = boto3.client(&#x27;ec2&#x27;) except ClientError as e: logger.error(f&quot;ERROR: failed to connect to EC2 client: &#123;e&#125;&quot;) sys.exit(1) def handler(event, context): logger = logging.getLogger() logger.setLevel(logging.INFO) logger.info(&#x27;Received event: &#123;&#125;&#x27;.format(json.dumps(event))) responseData = &#123;&#125; responseStatus = cfnresponse.FAILED try: DestCidr = event[&quot;ResourceProperties&quot;][&quot;DestCidr&quot;] VpceId = event[&quot;ResourceProperties&quot;][&quot;VpceId&quot;] RtbId = event[&quot;ResourceProperties&quot;][&quot;RtbId&quot;] except Exception as e: logger.info(&#x27;Attribute retrival failure: &#123;&#125;&#x27;.format(e)) try: if event[&quot;RequestType&quot;] == &quot;Delete&quot;: response = ec2.replace_route( LocalTarget = True, DestinationCidrBlock = DestCidr, RouteTableId = RtbId ) responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) except Exception: logger.exception(&quot;Signaling failure to CloudFormation.&quot;) cfnresponse.send(event, context, cfnresponse.FAILED, &#123;&#125;) if event[&quot;RequestType&quot;] == &quot;Create&quot;: logger.info(f&quot;Replacing target to &#123;VpceId&#125; for &#123;DestCidr&#125; for &#123;RtbId&#125;&quot;) try: response = ec2.replace_route( DestinationCidrBlock = DestCidr, VpcEndpointId = VpceId, RouteTableId = RtbId ) except Exception as e: logger.info(&#x27;ec2.describe_vpc_endpoint_service_configurations failure: &#123;&#125;&#x27;.format(e)) responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) Runtime: python3.7 Timeout: 150# 修改路由表 VpcBAz1PublicRtb1EditLocalRoute: Type: Custom::ReplaceRoute DependsOn: VpcBEndpoint1 Properties: ServiceToken: !GetAtt ReplaceRoute.Arn DestCidr: 10.120.0.0/16 VpceId: !Ref VpcBEndpoint1 RtbId: !Ref VpcBAz1PublicRouteTable VpcBAz2PublicRtb1EditLocalRoute: Type: Custom::ReplaceRoute DependsOn: VpcBEndpoint2 Properties: ServiceToken: !GetAtt ReplaceRoute.Arn DestCidr: 10.120.0.0/16 VpceId: !Ref VpcBEndpoint2 RtbId: !Ref VpcBAz2PublicRouteTable VpcBAz1AppRtb1EditLocalRoute: Type: Custom::ReplaceRoute DependsOn: VpcBEndpoint1 Properties: ServiceToken: !GetAtt ReplaceRoute.Arn DestCidr: 10.120.0.0/16 VpceId: !Ref VpcBEndpoint1 RtbId: !Ref VpcBAz1AppRouteTable VpcBAz2AppRtb1EditLocalRoute: Type: Custom::ReplaceRoute DependsOn: VpcBEndpoint2 Properties: ServiceToken: !GetAtt ReplaceRoute.Arn DestCidr: 10.120.0.0/16 VpceId: !Ref VpcBEndpoint2 RtbId: !Ref VpcBAz1AppRouteTable 三、测试3.1 访问ALB测试复制ALB的DNS名称。 访问ALB的DNS名称测试业务连通性。 3.2 APP抓包测试连接App2 通过Session Manger连接。 在App上抓取TCP 8443的报文，ALB会终结HTTP会话，所以在APP上看到的是来自ALB的请求地址。 另外可以通过curl ifconfig.me查看App访问公网的IP地址，是NAT GW2的公网IP地址。 12sudo -itcpdump -n port 8443 3.3 appliance抓包测试在App1上ping公网地址。 在appliance上抓取GENEVE的报文，并使用grep对ICMP报文进行过滤。 1root@gwlb-target-1 ~]# tcpdump -n -i eth0 port 6081 | grep ICMP 3.4 防火墙高可用测试在App1上发起对公网地址的访问，同时在appliance1和appliance2上开启抓包，确认流量目前通过appliance1转发。 Stop正在转发流量的appliance实例。 等待大概1分钟左右（依据是否为新建会话，还有协议切换时间不同），流量切换到另外一台防火墙。因为GWLB开启了Cross-zone load balancing，所以流量可以跨AZ，通过appliance2转发流量。 3.5 AWS WAF 策略测试查看创建的Web ACLs。 规则只允许来自中国区的IP地址，来自其他区域的IP请求会被拒绝。 查看策略详情。 开启代理服务器之后，从日本发起对ALB的访问请求，访问会被拒绝。 查看Web ACLs的日志记录，来自日本的请求被拒绝JP，来自中国区的流量允许访问。","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"CloudFormation","slug":"CloudFormation","permalink":"https://liuqianglong.com/tags/CloudFormation/"},{"name":"AWS Gateway Load Balancer","slug":"AWS-Gateway-Load-Balancer","permalink":"https://liuqianglong.com/tags/AWS-Gateway-Load-Balancer/"},{"name":"Application Load Balancer","slug":"Application-Load-Balancer","permalink":"https://liuqianglong.com/tags/Application-Load-Balancer/"},{"name":"iptables","slug":"iptables","permalink":"https://liuqianglong.com/tags/iptables/"},{"name":"AWS WAF","slug":"AWS-WAF","permalink":"https://liuqianglong.com/tags/AWS-WAF/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"AWS GWLB对访问NLB流量做安全检测","slug":"AWS-GWLB对访问NLB流量做安全检测","date":"2022-11-06T23:00:00.000Z","updated":"2022-11-23T15:22:15.441Z","comments":true,"path":"AWS-GWLB对访问NLB流量做安全检测.html","link":"","permalink":"https://liuqianglong.com/AWS-GWLB%E5%AF%B9%E8%AE%BF%E9%97%AENLB%E6%B5%81%E9%87%8F%E5%81%9A%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B.html","excerpt":"","text":"B站视频链接：https://www.bilibili.com/video/BV1wt4y1K7kz/微信公众号：自刘地 一、架构图这个设计的核心在于路由表的设计，可以根据下面的架构图示，理解路由流量走向。（我发现公众号对图片压缩特别厉害，暂时没有找到上传原图的办法。如果你和我一样有强迫症，可以找我要高清图片） 实验环境一共有两个VPC，左边的是业务VPC，里面有两个APP模拟HTTP的业务，EC2放在私有子网里面，在不同的AZ。 有一个面向互联网的Network Load Balancer，向公网发布了这个HTTP的服务，这样互联网上的用户，就可以通过NLB访问后面的业务。我们要做的是把这个流量，引导到防火墙上去，做安全检测。这里使用Linux的iptables来模拟防火墙。 另外，APP可以通过NAT GW上网，这个APP主动访问互联网的流量，也需要送到防火墙上去，做安全检测。所以，APP有两种流量都需要送到防火墙上去做安全检测，下面看一下APP的两种流量路径。 一、来自于互联网对NLB访问的流量路径。 首先，互联网上的用户，对NLB的公有DNS发起请求，这个DNS请求，会解析到NLB的两个公网IP地址，然后流量通过ISP路由，到达AWS的IGW上。 因为IGW关联了一个Ingress Route Table，发现去往NLB所在子网的路由指向GWLB endpoint1或GWLB endpoint2，这里假设现在解析的主IP是Endpoint2所在的网段，这样路由会送到GWLB Endpoint2。 Endpoint2收到流量之后，会通过Private Link，把流量发送到GWLB上。 GWLB会通过GENEVE封装报文，把流量发送到防火墙。 防火墙做完安全检测之后，又会把流量送回给GWLB，然后通过Private Link，送到GWLB Endpoint2。 注意，到达GWLB Endpoint2之后，查询的是GWLB Endpoint2关联的Public Route Table，因为目的地址是NLB subnet2网段，所以匹配到local路由，将流量送给NLB。 流量到NLB之后，因为侦听组关联了APP实例，所以NLB将流量发送到实例的主接口，这里查询的是NLB所在子网的local路由。 最后，流量抵达了APP。以上就是来自互联网，对NLB发起的请求，流量经过防火墙之后，再抵达APP的过程。 继续看一下回包流程。 注意，对于来自NLB的流量，EC2并不查询所在子网的路由表，而是直接返回给NLB（这个点很有意思，有机会单独再聊NLB的行为）。 NLB收到报文之后，查询所在子网路由表，因为回包是互联网上的地址，所以会匹配到默认路由，将报文发送到GWLB Endpoint2。 接下来又是一样的流程，流量会经过Private Link到防火墙绕一圈再回来。 流量回到GWLB Endpoint2上之后，会匹配到默认路由，将流量通过IGW发送到互联网上。 以上就是完整的从互联网对NLB发起请求和回包的流程。 二、APP1主动访问互联网的流量路径 APP1对互联网地址发起请求，APP1查询子网关联的路由表，匹配到默认路由，流量送到NAT GW1。 NAT GW1收到流量后，查询路由表，默认路由把流量送给GWLB Endpoint1，发送时会对源IP地址做NAT转换。 流量到GWLB Endpoint1之后，通过Private Link把流量送到防火墙检测，然后再发回来。 GWLB Endpoint1收到流量之后，默认路由将流量送往IGW到达互联网，源地址是NAT GW1的公网IP地址。 继续看回包流程。 互联网上的主机收到报文以后，源地址是NAT GW1的公网IP地址，报文通过ISP路由，流量到达AWS的IGW。 到达IGW之后，会查询Ingress Route Table，去往NAT GW1网段的路由送到GWLB Endpoint1。 流量到GWLB Endpoint1之后，通过Private Link把流量送到防火墙检测，然后再发回来。 GWLB Endpoint1收到流量之后，匹配到local路由，将流量发送到NAT GW1。 NAT GW1收到报文之后，查询NAT转换表项，目的地址匹配到local路由表，将流量发送到APP1。 二、创建实验环境通过CloudFormation创建实验环境，堆栈需要7分钟左右的时间创建完成。 上传堆栈文件。 编辑堆栈名称，修改实例密钥。 允许创建IAM资源。arameters: EC2InstanceAmiId: Type: AWS::SSM::Parameter::Value&lt;AWS::EC2::Image::Id&gt; Default: &#x27;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2&#x27; Environment: Type: String AllowedValues: - dev - prod Default: dev MyKeyPair: Description: Amazon EC2 Key Pair Type: AWS::EC2::KeyPair::KeyName Default: Global_Tokyo_KeyPair WebServerPort: Description: Apache Http Server Port Type: String Default: 8443 AllowedValues: - 8443 - 8888 - 8088Resources: BastionSsmRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Statement: - Effect: Allow Principal: Service: - ec2.amazonaws.com Action: - &#x27;sts:AssumeRole&#x27; Path: / BastionSsmPolicy: Type: AWS::IAM::Policy Properties: PolicyName: PrivatelianceInstanceAccess PolicyDocument: Statement: - Effect: Allow Action: - ssm:DescribeAssociation - ssm:GetDeployablePatchSnapshotForInstance - ssm:GetDocument - ssm:DescribeDocument - ssm:GetManifest - ssm:GetParameter - ssm:GetParameters - ssm:ListAssociations - ssm:ListInstanceAssociations - ssm:PutInventory - ssm:PutComplianceItems - ssm:PutConfigurePackageResult - ssm:UpdateAssociationStatus - ssm:UpdateInstanceAssociationStatus - ssm:UpdateInstanceInformation Resource: &quot;*&quot; - Effect: Allow Action: - ssmmessages:CreateControlChannel - ssmmessages:CreateDataChannel - ssmmessages:OpenControlChannel - ssmmessages:OpenDataChannel Resource: &quot;*&quot; - Effect: Allow Action: - ec2messages:AcknowledgeMessage - ec2messages:DeleteMessage - ec2messages:FailMessage - ec2messages:GetEndpoint - ec2messages:GetMessages - ec2messages:SendReply Resource: &quot;*&quot; Roles: - !Ref BastionSsmRole BastionSsmProfile: Type: AWS::IAM::InstanceProfile Properties: Path: / Roles: - !Ref BastionSsmRole#=========================================SecVpc========================================## 创建SecVpc SecVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.100.10.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc# 创建IGW并且关联到VPC SecVpcIGW: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpcIGW SecVpcAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref SecVpc InternetGatewayId: !Ref SecVpcIGW#---------------------------SecVpc创建6个子网-------------------------------------## SecVpc AZ1内创建公有子网 SecVpcAz1PublicSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.10.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-Public-Subnet# SecVpc AZ2内创建公有子网 SecVpcAz2PublicSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.20.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-Public-Subnet# SecVpc AZ1内创建私有子网 SecVpcAz1PrivateSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.30.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-Private-Subnet# SecVpc AZ2内创建私有子网 SecVpcAz2PrivateSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.40.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-Private-Subnet# SecVpc AZ1内创建TGW子网 SecVpcAz1TgwSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.50.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-TGW-Subnet# SecVpc AZ2内创建TGW子网 SecVpcAz2TgwSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.100.60.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-TGW-Subnet#---------------------------SecVpc创建路由表-------------------------------------## 公有子网路由表及关联 SecVpcAz1PublicRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-Public-RouteTable SecVpcAz1PublicRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz1PublicRouteTable SubnetId: !Ref SecVpcAz1PublicSubnet SecVpcAz2PublicRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-Public-RouteTable SecVpcAz2PublicRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz2PublicRouteTable SubnetId: !Ref SecVpcAz2PublicSubnet# Private子网路由表及关联 SecVpcAz1PrivateRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-Private-RouteTable SecVpcAz1PrivateRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz1PrivateRouteTable SubnetId: !Ref SecVpcAz1PrivateSubnet SecVpcAz2PrivateRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-Private-RouteTable SecVpcAz2PrivateRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz2PrivateRouteTable SubnetId: !Ref SecVpcAz2PrivateSubnet# Tgw路由表及关联 SecVpcAz1TgwRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-Tgw-RouteTable SecVpcAz1TgwRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz1TgwRouteTable SubnetId: !Ref SecVpcAz1TgwSubnet SecVpcAz2TgwRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-Tgw-RouteTable SecVpcAz2TgwRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref SecVpcAz2TgwRouteTable SubnetId: !Ref SecVpcAz2TgwSubnet#---------------------------NAT Gateway------------------------------------## AZ1 NAT GW SecVpcAz1NatGatewayEIP: Type: AWS::EC2::EIP Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-NatGateway-EIP SecVpcAz1NatGateway: Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt SecVpcAz1NatGatewayEIP.AllocationId SubnetId: !Ref SecVpcAz1PublicSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ1-NatGateway# AZ2 NAT GW SecVpcAz2NatGatewayEIP: Type: AWS::EC2::EIP Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-NatGateway-EIP SecVpcAz2NatGateway: Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt SecVpcAz2NatGatewayEIP.AllocationId SubnetId: !Ref SecVpcAz2PublicSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-AZ2-NatGateway SecVpcAz1PrivateSubnetToInternetRoute: DependsOn: SecVpcAz1NatGateway Type: AWS::EC2::Route Properties: RouteTableId: !Ref SecVpcAz1PrivateRouteTable DestinationCidrBlock: &#x27;0.0.0.0/0&#x27; NatGatewayId: !Ref SecVpcAz1NatGateway SecVpcAz2PrivateSubnetToInternetRoute: DependsOn: SecVpcAz2NatGateway Type: AWS::EC2::Route Properties: RouteTableId: !Ref SecVpcAz2PrivateRouteTable DestinationCidrBlock: &#x27;0.0.0.0/0&#x27; NatGatewayId: !Ref SecVpcAz2NatGateway#---------------------------添加路由------------------------------------## 公有子网添加默认路由去往IGW SecVpcAz1PublicSubnetToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: SecVpcIGW Properties: RouteTableId: !Ref SecVpcAz1PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref SecVpcIGW SecVpcAz2PublicSubnetToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: SecVpcIGW Properties: RouteTableId: !Ref SecVpcAz2PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref SecVpcIGW#---------------------------SecVpc创建安全组------------------------------------# SecVpcSg: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SG to test ping VpcId: !Ref SecVpc SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.100.0.0/16 - IpProtocol: tcp FromPort: 3389 ToPort: 3389 CidrIp: 0.0.0.0/0 Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpcSg#---------------------------SecVpc创建EC2实例------------------------------------##--------------------------IAM Instance Role and Profile------------------------------------# ApplianceRole: Type: AWS::IAM::Role Properties: RoleName: !Sub &quot;$&#123;AWS::StackName&#125;-appliance-role&quot; ManagedPolicyArns: - &quot;arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore&quot; AssumeRolePolicyDocument: Statement: - Effect: Allow Principal: Service: - ec2.amazonaws.com Action: - &#x27;sts:AssumeRole&#x27; Path: / AppliancePolicy: Type: AWS::IAM::Policy Properties: PolicyName: AppServer PolicyDocument: Statement: - Effect: Allow Action: - ec2:DescribeNetworkInterfaces Resource: &#x27;*&#x27; Roles: - !Ref ApplianceRole ApplianceProfile: Type: AWS::IAM::InstanceProfile Properties: Path: / Roles: - !Ref ApplianceRole#---------------------------SecVpc创建GWLB------------------------------------## Gateway Load Balancer (GWLB), Target Group, Listener Gwlb: Type: AWS::ElasticLoadBalancingV2::LoadBalancer Properties: LoadBalancerAttributes: - Key: load_balancing.cross_zone.enabled Value: true Name: gwlb1 Type: gateway Subnets: - !Ref SecVpcAz1PrivateSubnet - !Ref SecVpcAz2PrivateSubnet Tags: - Key: Name Value: !Sub &quot;$&#123;AWS::StackName&#125;-gwlb-1&quot; # Target Group: TargetGroup: Type: AWS::ElasticLoadBalancingV2::TargetGroup Properties: Name: tg1 Port: 6081 Protocol: GENEVE TargetGroupAttributes: - Key: deregistration_delay.timeout_seconds Value: &quot;20&quot; VpcId: !Ref SecVpc HealthCheckPort: 80 HealthCheckProtocol: HTTP TargetType: instance Targets: - Id: !Ref Appliance1 - Id: !Ref Appliance2 Tags: - Key: Name Value: !Sub &quot;$&#123;AWS::StackName&#125;-tg-1&quot; # Listener: Listener: Type: AWS::ElasticLoadBalancingV2::Listener Properties: DefaultActions: - Type: forward TargetGroupArn: !Ref TargetGroup LoadBalancerArn: !Ref Gwlb#---------------------------SecVpc创建EC2实例------------------------------------## EC2 Instances (Appliances acting as target for GWLB): Appliance1: DependsOn: [Gwlb, SecVpcAz1PrivateSubnetToInternetRoute] Type: AWS::EC2::Instance Properties: ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t2.micro IamInstanceProfile: !Ref ApplianceProfile SecurityGroupIds: - !Ref SecVpcSg SubnetId: !Ref SecVpcAz1PrivateSubnet Tags: - Key: Name Value: !Sub &quot;$&#123;AWS::StackName&#125;-appliance-1&quot; UserData: Fn::Base64: | #!/bin/bash -ex # Install packages: yum update -y; yum install jq -y; yum install httpd -y; yum install htop -y; sudo yum install iptables-services -y; # Enable IP Forwarding: echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.d/00-defaults.conf; sysctl -p /etc/sysctl.d/00-defaults.conf; # Configure hostname: hostnamectl set-hostname gwlb-target-1; # Configure SSH client alive interval for ssh session timeout: echo &#x27;ClientAliveInterval 60&#x27; | sudo tee --append /etc/ssh/sshd_config; service sshd restart; # Set dark background for vim: touch /home/ec2-user/.vimrc; echo &quot;set background=dark&quot; &gt;&gt; /home/ec2-user/.vimrc; # Define variables: curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document &gt; /home/ec2-user/iid; export instance_interface=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/); export instance_vpcid=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$instance_interface/vpc-id); export instance_az=$(cat /home/ec2-user/iid |grep &#x27;availability&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27;); export instance_ip=$(cat /home/ec2-user/iid |grep &#x27;privateIp&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$2&#125;&#x27;); export instance_region=$(cat /home/ec2-user/iid |grep &#x27;region&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$2&#125;&#x27;); export local_az_gwlb_ip=$(aws --region $instance_region ec2 describe-network-interfaces --filters Name=vpc-id,Values=$instance_vpcid | jq &#x27; .NetworkInterfaces[] | select(.AvailabilityZone==&#x27;$instance_az&#x27;) | select(.InterfaceType==&quot;gateway_load_balancer&quot;) |.PrivateIpAddress&#x27; -r); export remote_az_gwlb_ip=$(aws --region $instance_region ec2 describe-network-interfaces --filters Name=vpc-id,Values=$instance_vpcid | jq &#x27; .NetworkInterfaces[] | select(.AvailabilityZone!=&#x27;$instance_az&#x27;) | select(.InterfaceType==&quot;gateway_load_balancer&quot;) |.PrivateIpAddress&#x27; -r); # Start http and configure index.html: systemctl enable httpd; systemctl start httpd; touch /var/www/html/index.html; echo &quot;&lt;html&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;head&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;title&gt;Gateway Load Balancer POC&lt;/title&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;meta http-equiv=&#x27;Content-Type&#x27; content=&#x27;text/html; charset=ISO-8859-1&#x27;&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;/head&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;body&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;h1&gt;Welcome to Gateway Load Balancer POC:&lt;/h1&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;h2&gt;This is appliance running in $instance_az. Happy testing!&lt;/h2&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;/body&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot;&lt;/html&gt;&quot; &gt;&gt; /var/www/html/index.html # Start and configure iptables: systemctl enable iptables; systemctl start iptables; # Configuration below allows allows all traffic: # Set the default policies for each of the built-in chains to ACCEPT: iptables -P INPUT ACCEPT; iptables -P FORWARD ACCEPT; iptables -P OUTPUT ACCEPT; # Flush the nat and mangle tables, flush all chains (-F), and delete all non-default chains (-X): iptables -t nat -F; iptables -t mangle -F; iptables -F; iptables -X; # Configure nat table to hairpin traffic back to GWLB: iptables -t nat -A PREROUTING -p udp -s $local_az_gwlb_ip -d $instance_ip -i eth0 -j DNAT --to-destination $local_az_gwlb_ip:6081; iptables -t nat -A POSTROUTING -p udp --dport 6081 -s $local_az_gwlb_ip -d $local_az_gwlb_ip -o eth0 -j MASQUERADE; iptables -t nat -A PREROUTING -p udp -s $remote_az_gwlb_ip -d $instance_ip -i eth0 -j DNAT --to-destination $remote_az_gwlb_ip:6081; iptables -t nat -A POSTROUTING -p udp --dport 6081 -s $remote_az_gwlb_ip -d $remote_az_gwlb_ip -o eth0 -j MASQUERADE; # Save iptables: service iptables save; Appliance2: DependsOn: [ Gwlb, SecVpcAz2PrivateSubnetToInternetRoute ] Type: AWS::EC2::Instance Properties: ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t2.micro IamInstanceProfile: !Ref ApplianceProfile SecurityGroupIds: - !Ref SecVpcSg SubnetId: !Ref SecVpcAz2PrivateSubnet Tags: - Key: Name Value: !Sub &quot;$&#123;AWS::StackName&#125;-appliance-2&quot; UserData: Fn::Base64: | #!/bin/bash -ex # Install packages: yum update -y; yum install jq -y; yum install httpd -y; yum install htop -y; sudo yum install iptables-services -y; # Enable IP Forwarding: echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.d/00-defaults.conf; sysctl -p /etc/sysctl.d/00-defaults.conf; # Configure hostname: hostnamectl set-hostname gwlb-target-2; # Configure SSH client alive interval for ssh session timeout: echo &#x27;ClientAliveInterval 60&#x27; | sudo tee --append /etc/ssh/sshd_config; service sshd restart; # Set dark background for vim: touch /home/ec2-user/.vimrc; echo &quot;set background=dark&quot; &gt;&gt; /home/ec2-user/.vimrc; # Define variables: curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document &gt; /home/ec2-user/iid; export instance_interface=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/); export instance_vpcid=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$instance_interface/vpc-id); export instance_az=$(cat /home/ec2-user/iid |grep &#x27;availability&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27;); export instance_ip=$(cat /home/ec2-user/iid |grep &#x27;privateIp&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$2&#125;&#x27;); export instance_region=$(cat /home/ec2-user/iid |grep &#x27;region&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | awk -F&#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$2&#125;&#x27;); export local_az_gwlb_ip=$(aws --region $instance_region ec2 describe-network-interfaces --filters Name=vpc-id,Values=$instance_vpcid | jq &#x27; .NetworkInterfaces[] | select(.AvailabilityZone==&#x27;$instance_az&#x27;) | select(.InterfaceType==&quot;gateway_load_balancer&quot;) |.PrivateIpAddress&#x27; -r); export remote_az_gwlb_ip=$(aws --region $instance_region ec2 describe-network-interfaces --filters Name=vpc-id,Values=$instance_vpcid | jq &#x27; .NetworkInterfaces[] | select(.AvailabilityZone!=&#x27;$instance_az&#x27;) | select(.InterfaceType==&quot;gateway_load_balancer&quot;) |.PrivateIpAddress&#x27; -r); # Start http and configure index.html: systemctl enable httpd; systemctl start httpd; touch /var/www/html/index.html; echo &quot;&lt;html&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;head&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;title&gt;Gateway Load Balancer POC&lt;/title&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;meta http-equiv=&#x27;Content-Type&#x27; content=&#x27;text/html; charset=ISO-8859-1&#x27;&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;/head&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;body&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;h1&gt;Welcome to Gateway Load Balancer POC:&lt;/h1&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;h2&gt;This is appliance running in $instance_az. Happy testing!&lt;/h2&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot; &lt;/body&gt;&quot; &gt;&gt; /var/www/html/index.html echo &quot;&lt;/html&gt;&quot; &gt;&gt; /var/www/html/index.html # Start and configure iptables: systemctl enable iptables; systemctl start iptables; # Configuration below allows allows all traffic: # Set the default policies for each of the built-in chains to ACCEPT: iptables -P INPUT ACCEPT; iptables -P FORWARD ACCEPT; iptables -P OUTPUT ACCEPT; # Flush the nat and mangle tables, flush all chains (-F), and delete all non-default chains (-X): iptables -t nat -F; iptables -t mangle -F; iptables -F; iptables -X; # Configure nat table to hairpin traffic back to GWLB: iptables -t nat -A PREROUTING -p udp -s $local_az_gwlb_ip -d $instance_ip -i eth0 -j DNAT --to-destination $local_az_gwlb_ip:6081; iptables -t nat -A POSTROUTING -p udp --dport 6081 -s $local_az_gwlb_ip -d $local_az_gwlb_ip -o eth0 -j MASQUERADE; iptables -t nat -A PREROUTING -p udp -s $remote_az_gwlb_ip -d $instance_ip -i eth0 -j DNAT --to-destination $remote_az_gwlb_ip:6081; iptables -t nat -A POSTROUTING -p udp --dport 6081 -s $remote_az_gwlb_ip -d $remote_az_gwlb_ip -o eth0 -j MASQUERADE; # Save iptables: service iptables save; SecVpcBastionLinux: Type: AWS::EC2::Instance Properties: IamInstanceProfile: !Ref BastionSsmProfile ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t3.nano NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: SecVpcSg SubnetId: !Ref SecVpcAz1PublicSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-SecVpc-Bastion-Linux# Create VPC Endpoint Service: VpcEndpointService: Type: AWS::EC2::VPCEndpointService Properties: GatewayLoadBalancerArns: - !Ref Gwlb AcceptanceRequired: false# Create Lambda Custom Resource to retrieve VPC Endpoint Service Name: VpceServiceLambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Principal: Service: - lambda.amazonaws.com Action: - sts:AssumeRole Path: / Policies: - PolicyName: root PolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Action: - logs:CreateLogStream - logs:PutLogEvents Resource: arn:aws:logs:*:*:* - Effect: Allow Action: - ec2:DescribeVpcEndpointServiceConfigurations - ec2:DescribeVpcEndpointServicePermissions - ec2:DescribeVpcEndpointServices Resource: &quot;*&quot; VpceServiceLogGroup: Type: AWS::Logs::LogGroup Properties: LogGroupName: !Sub /aws/lambda/$&#123;AWS::StackName&#125;-service RetentionInDays: 1 VpceServiceName: Type: AWS::Lambda::Function DependsOn: VpceServiceLogGroup Properties: FunctionName: !Sub $&#123;AWS::StackName&#125;-service Handler: &quot;index.handler&quot; Role: !GetAtt VpceServiceLambdaExecutionRole.Arn Code: ZipFile: | import json import logging import time import boto3 import cfnresponse from botocore.exceptions import ClientError try: ec2 = boto3.client(&#x27;ec2&#x27;) except ClientError as e: logger.error(f&quot;ERROR: failed to connect to EC2 client: &#123;e&#125;&quot;) sys.exit(1) def handler(event, context): logger = logging.getLogger() logger.setLevel(logging.INFO) logger.info(&#x27;Received event: &#123;&#125;&#x27;.format(json.dumps(event))) responseData = &#123;&#125; responseStatus = cfnresponse.FAILED try: serviceid = event[&quot;ResourceProperties&quot;][&quot;VpceServiceId&quot;] except Exception as e: logger.info(&#x27;Attribute retrival failure: &#123;&#125;&#x27;.format(e)) try: if event[&quot;RequestType&quot;] == &quot;Delete&quot;: responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) except Exception: logger.exception(&quot;Signaling failure to CloudFormation.&quot;) cfnresponse.send(event, context, cfnresponse.FAILED, &#123;&#125;) if event[&quot;RequestType&quot;] == &quot;Create&quot;: logger.info(&quot;Retrieving VPC Endpoint Service Name:&quot;) try: response = ec2.describe_vpc_endpoint_service_configurations( Filters=[ &#123; &#x27;Name&#x27;: &#x27;service-id&#x27;, &#x27;Values&#x27;: [serviceid] &#125; ] ) except Exception as e: logger.info(&#x27;ec2.describe_vpc_endpoint_service_configurations failure: &#123;&#125;&#x27;.format(e)) service_name = response[&#x27;ServiceConfigurations&#x27;][0][&#x27;ServiceName&#x27;] time.sleep(120) responseData[&#x27;ServiceName&#x27;] = service_name responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) Runtime: python3.7 Timeout: 150 RetrieveVpceServiceName: Type: Custom::RetrieveAttributes Properties: ServiceToken: !GetAtt VpceServiceName.Arn VpceServiceId: !Ref VpcEndpointService# Create Gateway Load Balancer Endpoint: GwlbEndpoint1: Type: AWS::EC2::VPCEndpoint Properties: VpcId: !Ref SecVpc ServiceName: !GetAtt RetrieveVpceServiceName.ServiceName VpcEndpointType: GatewayLoadBalancer SubnetIds: - !Ref SecVpcAz1PrivateSubnet GwlbEndpoint2: Type: AWS::EC2::VPCEndpoint Properties: VpcId: !Ref SecVpc ServiceName: !GetAtt RetrieveVpceServiceName.ServiceName VpcEndpointType: GatewayLoadBalancer SubnetIds: - !Ref SecVpcAz2PrivateSubnet#=========================================VpcA========================================# VpcA: Type: AWS::EC2::VPC Properties: CidrBlock: 10.110.10.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA# 创建IGW并且关联到VPC VpcAIGW: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcAIGW VpcAAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref VpcA InternetGatewayId: !Ref VpcAIGW#---------------------------VpcA创建8个子网-------------------------------------## VpcA AZ1内创建公有子网 VpcAAz1PublicSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcA CidrBlock: 10.110.10.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ1-Public-Subnet# VpcA AZ2内创建公有子网 VpcAAz2PublicSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcA CidrBlock: 10.110.20.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ2-Public-Subnet# VpcA AZ1内创建APP子网 VpcAAz1NlbSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcA CidrBlock: 10.110.30.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ1-Nlb-Subnet# VpcA AZ2内创建APP子网 VpcAAz2NlbSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcA CidrBlock: 10.110.40.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ2-Nlb-Subnet# VpcA AZ1内创建GWLB子网 VpcAAz1AppSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcA CidrBlock: 10.110.50.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ1-App-Subnet# VpcA AZ2内创建GWLB子网 VpcAAz2AppSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcA CidrBlock: 10.110.60.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ2-App-Subnet# VpcA AZ1内创建TGW子网 VpcAAz1TgwSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcA CidrBlock: 10.110.70.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ1-TGW-Subnet# VpcA AZ2内创建TGW子网 VpcAAz2TgwSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref VpcA CidrBlock: 10.110.80.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ2-TGW-Subnet#---------------------------VpcA创建路由表-------------------------------------## 公有子网路由表及关联 VpcAAz1PublicRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcA Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ1-Public-RouteTable VpcAAz1PublicRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcAAz1PublicRouteTable SubnetId: !Ref VpcAAz1PublicSubnet# IGW路由表及关联 VpcAIgwRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcA Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-Ingress-RouteTable VpcAIgwRouteTableAssociation: Type: &quot;AWS::EC2::GatewayRouteTableAssociation&quot; Properties: GatewayId: !Ref VpcAIGW RouteTableId: !Ref VpcAIgwRouteTable VpcAAz2PublicRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcAAz1PublicRouteTable SubnetId: !Ref VpcAAz2PublicSubnet# Nlb子网路由表及关联 VpcAAz1NlbRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcA Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ1-Nlb-RouteTable VpcAAz1NlbRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcAAz1NlbRouteTable SubnetId: !Ref VpcAAz1NlbSubnet VpcAAz2NlbRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcA Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ2-Nlb-RouteTable VpcAAz2NlbRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcAAz2NlbRouteTable SubnetId: !Ref VpcAAz2NlbSubnet# App子网路由表及关联 VpcAAz1AppRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcA Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ1-App-RouteTable VpcAAz1AppRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcAAz1AppRouteTable SubnetId: !Ref VpcAAz1AppSubnet VpcAAz2AppRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcA Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ2-App-RouteTable VpcAAz2AppRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcAAz2AppRouteTable SubnetId: !Ref VpcAAz2AppSubnet# Tgw路由表及关联 VpcAAz1TgwRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcA Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ1-Tgw-RouteTable VpcAAz1TgwRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcAAz1TgwRouteTable SubnetId: !Ref VpcAAz1TgwSubnet VpcAAz2TgwRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref VpcA Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ2-Tgw-RouteTable VpcAAz2TgwRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref VpcAAz2TgwRouteTable SubnetId: !Ref VpcAAz2TgwSubnet#---------------------------NAT Gateway------------------------------------## AZ1 NAT GW VpcAAz1NatGatewayEIP: Type: AWS::EC2::EIP Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ1-NatGateway-EIP VpcAAz1NatGateway: Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt VpcAAz1NatGatewayEIP.AllocationId SubnetId: !Ref VpcAAz1NlbSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ1-NatGateway# AZ2 NAT GW VpcAAz2NatGatewayEIP: Type: AWS::EC2::EIP Properties: Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ2-NatGateway-EIP VpcAAz2NatGateway: Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt VpcAAz2NatGatewayEIP.AllocationId SubnetId: !Ref VpcAAz2NlbSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-AZ2-NatGateway# VpcA 创建Endpoint VpcAEndpoint1: Type: AWS::EC2::VPCEndpoint Properties: VpcId: !Ref VpcA ServiceName: !GetAtt RetrieveVpceServiceName.ServiceName VpcEndpointType: GatewayLoadBalancer SubnetIds: - !Ref VpcAAz1PublicSubnet VpcAEndpoint2: Type: AWS::EC2::VPCEndpoint Properties: VpcId: !Ref VpcA ServiceName: !GetAtt RetrieveVpceServiceName.ServiceName VpcEndpointType: GatewayLoadBalancer SubnetIds: - !Ref VpcAAz2PublicSubnet#---------------------------添加路由------------------------------------## IGW 路由表 VpcAIgwRoute1: DependsOn: VpcAEndpoint1 Type: AWS::EC2::Route Properties: DestinationCidrBlock: &#x27;10.110.30.0/24&#x27; VpcEndpointId: !Ref VpcAEndpoint1 RouteTableId: !Ref VpcAIgwRouteTable VpcAIgwRoute2: DependsOn: VpcAEndpoint2 Type: AWS::EC2::Route Properties: DestinationCidrBlock: &#x27;10.110.40.0/24&#x27; VpcEndpointId: !Ref VpcAEndpoint2 RouteTableId: !Ref VpcAIgwRouteTable# 公有子网添加默认路由去往IGW VpcAPublicSubnetToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcAIGW Properties: RouteTableId: !Ref VpcAAz1PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref VpcAIGW# Nlb 添加默认路由去往App VpcANlbAz1Route1: DependsOn: VpcAEndpoint1 Type: AWS::EC2::Route Properties: DestinationCidrBlock: &#x27;0.0.0.0/0&#x27; VpcEndpointId: !Ref VpcAEndpoint1 RouteTableId: !Ref VpcAAz1NlbRouteTable VpcANlbAz2Route1: DependsOn: VpcAEndpoint2 Type: AWS::EC2::Route Properties: DestinationCidrBlock: &#x27;0.0.0.0/0&#x27; VpcEndpointId: !Ref VpcAEndpoint2 RouteTableId: !Ref VpcAAz2NlbRouteTable# App添加默认路由去往IGW VpcAAz1AppSubnetToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcAIGW Properties: RouteTableId: !Ref VpcAAz1AppRouteTable DestinationCidrBlock: 0.0.0.0/0 NatGatewayId: !Ref VpcAAz1NatGateway VpcAAz2AppSubnetToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: VpcAIGW Properties: RouteTableId: !Ref VpcAAz2AppRouteTable DestinationCidrBlock: 0.0.0.0/0 NatGatewayId: !Ref VpcAAz2NatGateway#---------------------------VpcA创建安全组------------------------------------# VpcABastionVpcSg: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SG to test ping VpcId: !Ref VpcA SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: !Ref WebServerPort ToPort: !Ref WebServerPort CidrIp: 10.110.0.0/16# - IpProtocol: -1# FromPort: -1# ToPort: -1# SourceSecurityGroupId: !Ref VpcANlbSg Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcASg#---------------------------VpcA创建EC2实例------------------------------------# VpcABastionLinux: Type: AWS::EC2::Instance Properties: IamInstanceProfile: !Ref BastionSsmProfile ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t3.nano NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: VpcABastionVpcSg SubnetId: !Ref VpcAAz1PublicSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-Bastion-Linux VpcAApp1Linux: Type: AWS::EC2::Instance DependsOn: [VpcAEndpoint1, VpcANlbAz1Route1] Properties: IamInstanceProfile: !Ref BastionSsmProfile ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t3.nano NetworkInterfaces: - DeviceIndex: 0 GroupSet: - Ref: VpcABastionVpcSg SubnetId: !Ref VpcAAz1AppSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-App1-Linux UserData: Fn::Base64: !Sub | #!/bin/bash yum update -y yum install -y httpd sed -i.bak &#x27;s/Listen 80/Listen $&#123;WebServerPort&#125;/g&#x27; /etc/httpd/conf/httpd.conf echo &quot;&lt;h2&gt;Hello World from $(hostname -f)&lt;/h2&gt;&quot; &gt; /var/www/html/index.html systemctl start httpd.service systemctl enable httpd.service VpcAApp2Linux: Type: AWS::EC2::Instance DependsOn: [VpcAEndpoint2, VpcANlbAz2Route1] Properties: IamInstanceProfile: !Ref BastionSsmProfile ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t3.nano NetworkInterfaces: - DeviceIndex: 0 GroupSet: - Ref: VpcABastionVpcSg SubnetId: !Ref VpcAAz2AppSubnet Tags: - Key: Name Value: !Sub $&#123;AWS::StackName&#125;-VpcA-App2-Linux UserData: Fn::Base64: !Sub | #!/bin/bash yum update -y yum install -y httpd sed -i.bak &#x27;s/Listen 80/Listen $&#123;WebServerPort&#125;/g&#x27; /etc/httpd/conf/httpd.conf echo &quot;&lt;h2&gt;Hello World from $(hostname -f)&lt;/h2&gt;&quot; &gt; /var/www/html/index.html systemctl start httpd.service systemctl enable httpd.service# -----------创建NLB----------- VpcAEc2TargetGroup: Type: AWS::ElasticLoadBalancingV2::TargetGroup Properties: HealthCheckIntervalSeconds: 10 HealthCheckProtocol: TCP HealthCheckTimeoutSeconds: 10 HealthyThresholdCount: 3 Name: VpcAEc2TargetGroup Port: !Ref WebServerPort Protocol: TCP TargetGroupAttributes: - Key: deregistration_delay.timeout_seconds Value: &#x27;20&#x27; - Key: preserve_client_ip.enabled Value: false Targets: - Id: !Ref VpcAApp1Linux Port: !Ref WebServerPort - Id: !Ref VpcAApp2Linux Port: !Ref WebServerPort UnhealthyThresholdCount: 3 VpcId: !Ref VpcA Tags: - Key: Name Value: VpcA-Target-Group VpcANlbListener: Type: AWS::ElasticLoadBalancingV2::Listener Properties: DefaultActions: - Type: forward TargetGroupArn: !Ref VpcAEc2TargetGroup LoadBalancerArn: !Ref VpcANetworkLoadBalancer Port: !Ref WebServerPort Protocol: TCP VpcANetworkLoadBalancer: Type: AWS::ElasticLoadBalancingV2::LoadBalancer Properties: Name: !Sub $&#123;AWS::StackName&#125;-VpcA-NLB Type: network Scheme: internet-facing Subnets: - !Ref VpcAAz1NlbSubnet - !Ref VpcAAz2NlbSubnet 三、测试3.1 访问NLB测试复制NLB的DNS名称。 访问NLB的DNS名称测试业务连通性。 3.2 App抓包测试连接App1 通过Session Manger连接。 在App上抓取TCP 8443的报文，因为Target Group关闭了Preserve client IP addresses属性，所以App会看到NLB的私有IP地址，安全组也可以只放行来自NLB子网的流量。 另外可以通过curl ifconfig.me查看App访问公网的IP地址，是NAT GW1的公网IP地址。 12sudo -itcpdump -n port 8443 3.3 appliance抓包测试在App1上ping公网地址。 在appliance上抓取GENEVE的报文，并使用grep对ICMP报文进行过滤。 1root@gwlb-target-1 ~]# tcpdump -n -i eth0 port 6081 | grep ICMP 可以使用grep -i过滤特定主机报文 1root@gwlb-target-1 ~]# tcpdump -n -i eth0 port 6081 | grep -i 8.8.8.8 抓包结果可以使用grep的\\|进行“或”过滤。 1root@gwlb-target-1 ~]# tcpdump -n -i eth0 port 6081 | grep &quot;ICMP\\|https&quot; 3.4 防火墙高可用测试在App1上发起对公网地址的访问，同时在appliance1和appliance2上开启抓包，确认流量目前通过appliance1转发。 Stop正在转发流量的appliance实例。 等待大概1分钟左右（依据是否为新建会话，还有协议切换时间不同），流量切换到另外一台防火墙。因为GWLB开启了Cross-zone load balancing，所以流量可以跨AZ，通过appliance2转发流量。","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"CloudFormation","slug":"CloudFormation","permalink":"https://liuqianglong.com/tags/CloudFormation/"},{"name":"AWS Gateway Load Balancer","slug":"AWS-Gateway-Load-Balancer","permalink":"https://liuqianglong.com/tags/AWS-Gateway-Load-Balancer/"},{"name":"iptables","slug":"iptables","permalink":"https://liuqianglong.com/tags/iptables/"},{"name":"Network Load Balancer","slug":"Network-Load-Balancer","permalink":"https://liuqianglong.com/tags/Network-Load-Balancer/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"AWS VPC 流量集中检测系列--(4)利用CloudFormation自动化部署AWS GWLB集成FortiGate防火墙","slug":"AWS-VPC-流量集中检测系列-4-利用CloudFormation自动化部署AWS-GWLB集成FortiGate防火墙","date":"2022-11-01T11:00:00.000Z","updated":"2022-11-23T15:02:21.325Z","comments":true,"path":"AWS-VPC-流量集中检测系列-4-利用CloudFormation自动化部署AWS-GWLB集成FortiGate防火墙.html","link":"","permalink":"https://liuqianglong.com/AWS-VPC-%E6%B5%81%E9%87%8F%E9%9B%86%E4%B8%AD%E6%A3%80%E6%B5%8B%E7%B3%BB%E5%88%97-4-%E5%88%A9%E7%94%A8CloudFormation%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2AWS-GWLB%E9%9B%86%E6%88%90FortiGate%E9%98%B2%E7%81%AB%E5%A2%99.html","excerpt":"","text":"B站视频链接：https://www.bilibili.com/video/BV1LG411j7v4/?spm_id_from=333.999.0.0微信公众号：自刘地 上一篇文章讲过了AWS GWLB如何集成FortiGate防火墙，来对流量做集中检测。上一次实验是通过AWS 控制台操作的，这里分享一下实验环境的CloudFormation代码，帮助大家快速部署一下实验环境。 一、CloudFormation代码部署这里的CloudFormation代码在Tokyo区域部署的，如果要在其他Region部署，请修改FortiGate和Windows2022Base的AMI ID（参考我之前的文章《如何寻找EC2特定版本的AMI ID》）。 这次CloudFormation是全自动化代码，堆栈运行完成以后，可以直接测试现象，不需要再做任何额外的配置。默认防火墙使用6.4.10的版本部署，如果要使用7.2.2参考第四部分修改关于防火墙的代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879880881882883884885886887888889890891892893894895896897898899900901902903904905906907908909910911912913914915916917918919920921922923924925926927928929930931932933934935936937938939940941942943944945946947948949950951952953954955956957958959960961962963964965966967968969970971972973974975976977978979980981982983984985986987988989990991992993994995996997998999100010011002100310041005100610071008100910101011101210131014101510161017101810191020102110221023102410251026102710281029103010311032103310341035103610371038103910401041104210431044104510461047104810491050105110521053105410551056105710581059106010611062106310641065106610671068106910701071107210731074107510761077107810791080108110821083108410851086108710881089109010911092109310941095109610971098109911001101110211031104110511061107110811091110111111121113111411151116111711181119112011211122112311241125112611271128112911301131113211331134113511361137113811391140114111421143114411451146114711481149115011511152115311541155115611571158115911601161116211631164116511661167116811691170117111721173AWSTemplateFormatVersion: &quot;2010-09-09&quot;Mappings: RegionMap: ap-northeast-1: FortiGate722: ami-08479d0bce02ca48b FortiGate6410: ami-0abf1a002258e8077 Windows2022Base: ami-06ac5e650e049a48f FirewallInstanceType: FortiGate722: InstanceType: c6i.xlarge FortiGate6410: InstanceType: c6i.xlargeParameters: EC2InstanceAmiId: Type: AWS::SSM::Parameter::Value&lt;AWS::EC2::Image::Id&gt; Default: &#x27;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2&#x27; Environment: Type: String AllowedValues: - dev - prod Default: dev MyKeyPair: Description: Amazon EC2 Key Pair Type: AWS::EC2::KeyPair::KeyName Default: Global_Tokyo_KeyPair WebServerPort: Description: Apache Http Server Port Type: String Default: 8443 AllowedValues: - 8443 - 8888 - 8088 FortigateVersion: Description: Choice Fortigate Firewall Version Type Type: String Default: FortiGate722 AllowedValues: - FortiGate722 - FortiGate6410Resources:#=========================================创建VPC、IGW========================================## 创建一SecVpc SecVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.20.0.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: SecVpc# 创建IGW并且关联到VPC SecVpcIGW: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: SecVpcIGW SecVpcAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref SecVpc InternetGatewayId: !Ref SecVpcIGW#---------------------------SecVpc创建4个子网-------------------------------------## SecVpc AZ1内创建GWLB子网 Az1GwlbSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.20.10.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: SecVpc-GWLB-AZ1-GWLB-Subnet# SecVpc AZ2内创建GWLB子网 Az2GwlbSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.20.30.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: SecVpc-GWLB-AZ2-GWLB-Subnet# SecVpc AZ1内创建MGT子网 Az1MgtSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.20.20.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: SecVpc-GWLB-AZ1-MGT-Subnet# SecVpc AZ2内创建MGT子网 Az2MgtSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.20.40.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: SecVpc-GWLB-AZ2-MGT-Subnet#---------------------------SecVpc创建路由表-------------------------------------## SecVpc创建管理网段的路由表 MgtRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: SecVpc-Mgt-route-table# Mgt路由表关联子网 Az1MgtSubnetAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref MgtRouteTable SubnetId: !Ref Az1MgtSubnet Az2MgtSubnetAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref MgtRouteTable SubnetId: !Ref Az2MgtSubnet# SecVpc创建Gwlb的路由表 GwlbRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: SecVpc-Gwlb-route-table# Gwlb路由表关联子网 Az1GwlbSubnetAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref GwlbRouteTable SubnetId: !Ref Az1GwlbSubnet Az2GwlbSubnetAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref GwlbRouteTable SubnetId: !Ref Az2GwlbSubnet# 管理网段添加默认路由去往IGW MgtToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: SecVpcIGW Properties: RouteTableId: !Ref MgtRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref SecVpcIGW#---------------------------SecVpc创建安全组------------------------------------## 在SEC VPC内创建一个安全组 SecVpcSg: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SG to test ping VpcId: !Ref SecVpc SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 443 ToPort: 443 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 8443 ToPort: 8443 CidrIp: 0.0.0.0/0 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.20.0.0/16 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.10.0.0/16 - IpProtocol: tcp FromPort: 3389 ToPort: 3389 CidrIp: 0.0.0.0/0 Tags: - Key: Name Value: SecVpcSg#---------------------------SecVpc创建Fortigate接口------------------------------------# Fortigate1MgmtEip: Type: &quot;AWS::EC2::EIP&quot; Properties: Tags: - Key: Name Value: SecVpc-fortigate1-mgmt-eip Fortigate1MgmtEni: # 创建Fortigate1管理接口 Type: &quot;AWS::EC2::NetworkInterface&quot; Properties: SourceDestCheck: false PrivateIpAddress: 10.20.20.100 GroupSet: - Ref: &quot;SecVpcSg&quot; SubnetId: Ref: &quot;Az1MgtSubnet&quot; Tags: - Key: Name Value: SecVpc-fortigate1-mgmt-eni Fortigate1MgmtEniAssociation: # 关联公网IP到Mgt弹性接口 Type: AWS::EC2::EIPAssociation Properties: AllocationId: !GetAtt Fortigate1MgmtEip.AllocationId # 这里是EIP NetworkInterfaceId: !Ref Fortigate1MgmtEni Fortigate1DataEni: # 创建Fortigate1数据接口 Type: &quot;AWS::EC2::NetworkInterface&quot; Properties: SourceDestCheck: false PrivateIpAddress: 10.20.10.100 GroupSet: - Ref: &quot;SecVpcSg&quot; SubnetId: Ref: &quot;Az1GwlbSubnet&quot; Tags: - Key: Name Value: SecVpc-fortigate1-data-eni Fortigate2MgmtEip: Type: &quot;AWS::EC2::EIP&quot; Properties: Tags: - Key: Name Value: SecVpc-fortigate2-mgmt-eip Fortigate2MgmtEni: # 创建Fortigate2管理接口 Type: &quot;AWS::EC2::NetworkInterface&quot; Properties: SourceDestCheck: false PrivateIpAddress: 10.20.40.100 GroupSet: - Ref: &quot;SecVpcSg&quot; SubnetId: Ref: &quot;Az2MgtSubnet&quot; Tags: - Key: Name Value: SecVpc-fortigate2-mgmt-eni Fortigate2MgmtEniAssociation: # 关联公网IP到Mgt弹性接口 Type: AWS::EC2::EIPAssociation Properties: AllocationId: !GetAtt Fortigate2MgmtEip.AllocationId # 这里是EIP NetworkInterfaceId: !Ref Fortigate2MgmtEni Fortigate2DataEni: # 创建Fortigate2数据接口 Type: &quot;AWS::EC2::NetworkInterface&quot; Properties: SourceDestCheck: false PrivateIpAddress: 10.20.30.100 GroupSet: - Ref: &quot;SecVpcSg&quot; SubnetId: Ref: &quot;Az2GwlbSubnet&quot; Tags: - Key: Name Value: SecVpc-fortigate2-data-eni#---------------------------SecVpc创建Fortigate实例------------------------------------## Fortigate1 Fortigate1: Type: AWS::EC2::Instance Properties: ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, !Ref FortigateVersion] KeyName: !Ref MyKeyPair InstanceType: !FindInMap [FirewallInstanceType, !Ref &quot;FortigateVersion&quot;, InstanceType] NetworkInterfaces: - NetworkInterfaceId: !Ref Fortigate1DataEni DeviceIndex: 0 - NetworkInterfaceId: !Ref Fortigate1MgmtEni DeviceIndex: 1 UserData: Fn::Base64: Fn::Sub: - | config system admin edit &quot;labuser&quot; set accprofile &quot;super_admin&quot; set vdom &quot;root&quot; set password FSr1Lliu1qiang2long3DemoZJG5 next end end config system interface edit &quot;port1&quot; set defaultgw disable set allowaccess ping https ssh fgfm probe-response next edit &quot;port2&quot; set mode dhcp set allowaccess ping https ssh set defaultgw enable next end config system global set vdom-mode split-vdom end config global config system interface edit &quot;port1&quot; set vdom &quot;FG-traffic&quot; end end config vdom edit FG-traffic config system geneve edit &quot;geneve1&quot; set interface &quot;port1&quot; set type ppp set remote-ip $&#123;Az1GwlbIp&#125; next edit &quot;geneve2&quot; set interface &quot;port1&quot; set type ppp set remote-ip $&#123;Az2GwlbIp&#125; next end config firewall policy edit 1 set name &quot;1&quot; set srcintf &quot;geneve1&quot; set dstintf &quot;geneve1&quot; set srcaddr &quot;all&quot; set dstaddr &quot;all&quot; set action accept set schedule &quot;always&quot; set service &quot;ALL&quot; set logtraffic all set logtraffic-start enable next edit 2 set name &quot;2&quot; set srcintf &quot;geneve2&quot; set dstintf &quot;geneve2&quot; set srcaddr &quot;all&quot; set dstaddr &quot;all&quot; set action accept set schedule &quot;always&quot; set service &quot;ALL&quot; set logtraffic all set logtraffic-start enable next end config log setting set local-in-allow enable set local-in-deny-unicast enable set local-in-deny-broadcast enable set local-out enable next end config router static edit 1 set device &quot;geneve1&quot; next edit 2 set device &quot;geneve2&quot; next edit 3 set dst 10.20.0.0 255.255.0.0 set gateway 10.20.10.1 set device &quot;port1&quot; next end config router policy edit 1 set input-device &quot;geneve1&quot; set gateway $&#123;Az1GwlbIp&#125; set output-device &quot;geneve1&quot; next edit 2 set input-device &quot;geneve2&quot; set gateway $&#123;Az2GwlbIp&#125; set output-device &quot;geneve2&quot; next end - Az1GwlbIp: !GetAtt &#x27;CustomGwlbIpResource.Az1GwlbIp&#x27; Az2GwlbIp: !GetAtt &#x27;CustomGwlbIpResource.Az2GwlbIp&#x27; Tags: - Key: Name Value: Fortigate-FW1 Fortigate2: Type: AWS::EC2::Instance DependsOn: CustomGwlbIpResource Properties: ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, !Ref FortigateVersion] KeyName: !Ref MyKeyPair InstanceType: !FindInMap [FirewallInstanceType, !Ref &quot;FortigateVersion&quot;, InstanceType] NetworkInterfaces: - NetworkInterfaceId: !Ref Fortigate2DataEni DeviceIndex: 0 - NetworkInterfaceId: !Ref Fortigate2MgmtEni DeviceIndex: 1 UserData: Fn::Base64: Fn::Sub: - | config system admin edit &quot;labuser&quot; set accprofile &quot;super_admin&quot; set vdom &quot;root&quot; set password FSr1Lliu1qiang2long3DemoZJG5 next end end config system interface edit &quot;port1&quot; set defaultgw disable set allowaccess ping https ssh fgfm probe-response next edit &quot;port2&quot; set mode dhcp set allowaccess ping https ssh set defaultgw enable next end config system global set vdom-mode split-vdom end config global config system interface edit &quot;port1&quot; set vdom &quot;FG-traffic&quot; end end config vdom edit FG-traffic config system geneve edit &quot;geneve1&quot; set interface &quot;port1&quot; set type ppp set remote-ip $&#123;Az2GwlbIp&#125; next edit &quot;geneve2&quot; set interface &quot;port1&quot; set type ppp set remote-ip $&#123;Az1GwlbIp&#125; next end config firewall policy edit 1 set name &quot;1&quot; set srcintf &quot;geneve1&quot; set dstintf &quot;geneve1&quot; set srcaddr &quot;all&quot; set dstaddr &quot;all&quot; set action accept set schedule &quot;always&quot; set service &quot;ALL&quot; set logtraffic all set logtraffic-start enable next edit 2 set name &quot;2&quot; set srcintf &quot;geneve2&quot; set dstintf &quot;geneve2&quot; set srcaddr &quot;all&quot; set dstaddr &quot;all&quot; set action accept set schedule &quot;always&quot; set service &quot;ALL&quot; set logtraffic all set logtraffic-start enable next end config log setting set local-in-allow enable set local-in-deny-unicast enable set local-in-deny-broadcast enable set local-out enable next end config router static edit 1 set device &quot;geneve1&quot; next edit 2 set device &quot;geneve2&quot; next edit 3 set dst 10.20.0.0 255.255.0.0 set gateway 10.20.30.1 set device &quot;port1&quot; next end config router policy edit 1 set input-device &quot;geneve1&quot; set gateway $&#123;Az2GwlbIp&#125; set output-device &quot;geneve1&quot; next edit 2 set input-device &quot;geneve2&quot; set gateway $&#123;Az1GwlbIp&#125; set output-device &quot;geneve2&quot; next end - Az1GwlbIp: !GetAtt &#x27;CustomGwlbIpResource.Az1GwlbIp&#x27; Az2GwlbIp: !GetAtt &#x27;CustomGwlbIpResource.Az2GwlbIp&#x27; Tags: - Key: Name Value: Fortigate-FW2#---------------------------创建GWLB------------------------------------# Gwlb: Type: AWS::ElasticLoadBalancingV2::LoadBalancer Properties: LoadBalancerAttributes: - Key: load_balancing.cross_zone.enabled Value: true Name: Fortigate-GWLB Type: gateway Subnets: - !Ref Az1GwlbSubnet - !Ref Az2GwlbSubnet Tags: - Key: Name Value: SecVpc-Fortigate-gwlb TargetGroup: Type: AWS::ElasticLoadBalancingV2::TargetGroup Properties: HealthCheckIntervalSeconds: 5 Name: Fortigate-Target Port: 6081 Protocol: GENEVE TargetGroupAttributes: - Key: deregistration_delay.timeout_seconds Value: 20 VpcId: !Ref SecVpc HealthCheckPort: 443 HealthCheckProtocol: HTTPS TargetType: instance Targets: - Id: !Ref Fortigate1 - Id: !Ref Fortigate2 Tags: - Key: Name Value: !Sub &quot;$&#123;AWS::StackName&#125;-gwlbtg&quot; Listener: Type: AWS::ElasticLoadBalancingV2::Listener Properties: DefaultActions: - Type: forward TargetGroupArn: !Ref TargetGroup LoadBalancerArn: !Ref Gwlb#---------------------------创建Endpoint Service------------------------------------# VpcEndpointService: Type: AWS::EC2::VPCEndpointService Properties: GatewayLoadBalancerArns: - !Ref Gwlb AcceptanceRequired: false# Create Lambda Custom Resource to retrieve VPC Endpoint Service Name: VpceServiceLambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Principal: Service: - lambda.amazonaws.com Action: - sts:AssumeRole Path: / Policies: - PolicyName: root PolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Action: - logs:CreateLogStream - logs:PutLogEvents Resource: arn:aws:logs:*:*:* - Effect: Allow Action: - ec2:DescribeVpcEndpointServiceConfigurations - ec2:DescribeVpcEndpointServicePermissions - ec2:DescribeVpcEndpointServices Resource: &quot;*&quot; # Lambda creates CloudWatch Log Group. # Since CF stack didn&#x27;t explicitly create the Log Group, Log Group doesn&#x27;t get deleted when stack is deleted. # Hence creating Log Group though the stack for Lambda specific funciton. # Their are few things to consider. For more details refer to: https://github.com/aws/serverless-application-model/issues/1216 VpceServiceLogGroup: Type: AWS::Logs::LogGroup Properties: LogGroupName: !Sub /aws/lambda/$&#123;AWS::StackName&#125;-service RetentionInDays: 1 VpceServiceName: Type: AWS::Lambda::Function DependsOn: VpceServiceLogGroup Properties: FunctionName: !Sub $&#123;AWS::StackName&#125;-service Handler: &quot;index.handler&quot; Role: !GetAtt VpceServiceLambdaExecutionRole.Arn Code: ZipFile: | import json import logging import time import boto3 import cfnresponse from botocore.exceptions import ClientError try: ec2 = boto3.client(&#x27;ec2&#x27;) except ClientError as e: logger.error(f&quot;ERROR: failed to connect to EC2 client: &#123;e&#125;&quot;) sys.exit(1) def handler(event, context): logger = logging.getLogger() logger.setLevel(logging.INFO) logger.info(&#x27;Received event: &#123;&#125;&#x27;.format(json.dumps(event))) responseData = &#123;&#125; responseStatus = cfnresponse.FAILED try: serviceid = event[&quot;ResourceProperties&quot;][&quot;VpceServiceId&quot;] except Exception as e: logger.info(&#x27;Attribute retrival failure: &#123;&#125;&#x27;.format(e)) try: if event[&quot;RequestType&quot;] == &quot;Delete&quot;: responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) except Exception: logger.exception(&quot;Signaling failure to CloudFormation.&quot;) cfnresponse.send(event, context, cfnresponse.FAILED, &#123;&#125;) if event[&quot;RequestType&quot;] == &quot;Create&quot;: logger.info(&quot;Retrieving VPC Endpoint Service Name:&quot;) try: response = ec2.describe_vpc_endpoint_service_configurations( Filters=[ &#123; &#x27;Name&#x27;: &#x27;service-id&#x27;, &#x27;Values&#x27;: [serviceid] &#125; ] ) except Exception as e: logger.info(&#x27;ec2.describe_vpc_endpoint_service_configurations failure: &#123;&#125;&#x27;.format(e)) service_name = response[&#x27;ServiceConfigurations&#x27;][0][&#x27;ServiceName&#x27;] time.sleep(120) responseData[&#x27;ServiceName&#x27;] = service_name responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) Runtime: python3.7 Timeout: 150 RetrieveVpceServiceName: Type: Custom::RetrieveAttributes Properties: ServiceToken: !GetAtt VpceServiceName.Arn VpceServiceId: !Ref VpcEndpointService App1Endpoint: Type: AWS::EC2::VPCEndpoint Properties: VpcId: !Ref AppVpc ServiceName: !GetAtt RetrieveVpceServiceName.ServiceName VpcEndpointType: GatewayLoadBalancer SubnetIds: - !Ref Gwlbe1Subnet App2Endpoint: Type: AWS::EC2::VPCEndpoint Properties: VpcId: !Ref AppVpc ServiceName: !GetAtt RetrieveVpceServiceName.ServiceName VpcEndpointType: GatewayLoadBalancer SubnetIds: - !Ref Gwlbe2Subnet#==============================创建App VPC、IGW==============================## 创建一APP VPC AppVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.10.0.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: AppVpc# 创建IGW并且关联到VPC AppVpcIGW: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: AppVpc-IGW AppVpcAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref AppVpc InternetGatewayId: !Ref AppVpcIGW#---------------------------AppVpc创建2个子网-------------------------------------## AppVpc创建GWLB1子网 Gwlbe1Subnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref AppVpc CidrBlock: 10.10.10.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: AppVpc-GWLBe1-Subnet# AppVpc创建App1子网 App1Subnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref AppVpc CidrBlock: 10.10.20.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: AppVpc-App1-Subnet# AppVpc创建GWLB2子网 Gwlbe2Subnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref AppVpc CidrBlock: 10.10.30.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: AppVpc-GWLBe2-Subnet# AppVpc创建App2子网 App2Subnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref AppVpc CidrBlock: 10.10.40.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: AppVpc-App2-Subnet#---------------------------AppVpc创建路由表-------------------------------------##---------------IGW路由---------------## AppVpc创建IGW的路由表 IgwIngressRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref AppVpc Tags: - Key: Name Value: AppVpc-Igw-Ingress-route-table# IgwIngress路由表关联IGW IgwIngressAssociation: Type: &quot;AWS::EC2::GatewayRouteTableAssociation&quot; Properties: RouteTableId: !Ref IgwIngressRouteTable GatewayId: !Ref AppVpcIGW# IgwIngress去往App1网段的路由 IgwIngressToApp1: Type: &quot;AWS::EC2::Route&quot; DependsOn: App1Endpoint Properties: RouteTableId: !Ref IgwIngressRouteTable DestinationCidrBlock: 10.10.20.0/24 VpcEndpointId: !Ref App1Endpoint# IgwIngress去往App2网段的路由 IgwIngressToApp2: Type: &quot;AWS::EC2::Route&quot; DependsOn: App2Endpoint Properties: RouteTableId: !Ref IgwIngressRouteTable DestinationCidrBlock: 10.10.40.0/24 VpcEndpointId: !Ref App2Endpoint#---------------GWLBe路由---------------## AppVpc创建Gwlbe的路由表 GwlbeRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref AppVpc Tags: - Key: Name Value: AppVpc-Gwlbe-route-table# 路由表关联子网Gwlbe1 Gwlbe1RouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref GwlbeRouteTable SubnetId: !Ref Gwlbe1Subnet# 路由表关联子网Gwlbe2 Gwlbe2RouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref GwlbeRouteTable SubnetId: !Ref Gwlbe2Subnet# 管理网段添加默认路由去往IGW Gwlbe1ToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: AppVpcIGW Properties: RouteTableId: !Ref GwlbeRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref AppVpcIGW#---------------App路由---------------## AppVpc创建App1的路由表 App1RouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref AppVpc Tags: - Key: Name Value: AppVpc-App1-route-table# AppVpc创建App2的路由表 App2RouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref AppVpc Tags: - Key: Name Value: AppVpc-App2-route-table# App1路由表关联子网 App1RouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref App1RouteTable SubnetId: !Ref App1Subnet# App2路由表关联子网 App2RouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref App2RouteTable SubnetId: !Ref App2Subnet# App1网段添加默认路由去往Endpoint App1ToEndpoint: Type: &quot;AWS::EC2::Route&quot; DependsOn: App1Endpoint Properties: RouteTableId: !Ref App1RouteTable DestinationCidrBlock: 0.0.0.0/0 VpcEndpointId: !Ref App1Endpoint# App2网段添加默认路由去往Endpoint App2ToEndpoint: Type: &quot;AWS::EC2::Route&quot; DependsOn: App2Endpoint Properties: RouteTableId: !Ref App2RouteTable DestinationCidrBlock: 0.0.0.0/0 VpcEndpointId: !Ref App2Endpoint#---------------------------AppVpc创建安全组------------------------------------## 在SEC VPC内创建一个安全组 AppVpcSg: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SG to test ping VpcId: !Ref AppVpc SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 8443 ToPort: 8443 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 443 ToPort: 443 CidrIp: 0.0.0.0/0 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.20.0.0/16 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.10.0.0/16 - IpProtocol: tcp FromPort: 3389 ToPort: 3389 CidrIp: 0.0.0.0/0 Tags: - Key: Name Value: AppVpcSg#---------------------------AppVpc创建EC2实例------------------------------------## App1 Linux AMI App1Linux: Type: AWS::EC2::Instance DependsOn: [App1ToEndpoint, App2ToEndpoint] Properties: ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t2.micro NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: AppVpcSg SubnetId: !Ref App1Subnet UserData: Fn::Base64: !Sub | #!/bin/bash yum update -y yum install -y httpd sed -i.bak &#x27;s/Listen 80/Listen 8443/g&#x27; /etc/httpd/conf/httpd.conf echo &quot;&lt;h2&gt;Hello World from $(hostname -f)&lt;/h2&gt;&quot; &gt; /var/www/html/index.html systemctl start httpd.service systemctl enable httpd.service Tags: - Key: Name Value: App1-Linux# App2 Windows AMI App2Windows: Type: AWS::EC2::Instance Properties: ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, Windows2022Base] KeyName: !Ref MyKeyPair InstanceType: t2.xlarge NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: AppVpcSg SubnetId: !Ref App2Subnet Tags: - Key: Name Value: App2-Windows UserData: Fn::Base64: !Sub | &lt;powershell&gt; $PASSWORD = convertto-securestring &quot;FSr1Lliu1qiang2long3DemoZJG5&quot; -asplaintext -force New-LocalUser -Name &quot;labuser&quot; -Description &quot;rdp user&quot; -Password $Password Add-LocalGroupMember -Group &#x27;Administrators&#x27; -Member &#x27;labuser&#x27; net localgroup &quot;Remote Desktop Users&quot; /add labuser $file = &quot;C:\\&quot; + (Get-Date).ToString(&quot;MM-dd-yy-hh-mm&quot;) New-Item $file -ItemType file &lt;/powershell&gt; GwlbIpLambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Principal: Service: - lambda.amazonaws.com Action: - sts:AssumeRole Path: / Policies: - PolicyName: GwlbIpAccess PolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Action: - logs:CreateLogStream - logs:PutLogEvents Resource: arn:aws:logs:*:*:* - Effect: Allow Action: - ec2:DescribeNetworkInterfaces Resource: &quot;*&quot; CustomGwlbIpResource: DependsOn: GwlbIpAddressFunction Type: Custom::GwlbIp Properties: ServiceToken: !GetAtt &#x27;GwlbIpAddressFunction.Arn&#x27; GwlbIpAddressFunction: Type: AWS::Lambda::Function DependsOn: Gwlb Properties: FunctionName: GwlbIpAddressFunction Handler: &quot;index.handler&quot; Role: !GetAtt GwlbIpLambdaExecutionRole.Arn Code: ZipFile: | import json import logging import time import boto3 import cfnresponse from botocore.exceptions import ClientError try: ec2 = boto3.client(&#x27;ec2&#x27;) except ClientError as e: logger.error(f&quot;ERROR: failed to connect to EC2 client: &#123;e&#125;&quot;) sys.exit(1) def handler(event, context): logger = logging.getLogger() logger.setLevel(logging.INFO) logger.info(&#x27;Received event: &#123;&#125;&#x27;.format(json.dumps(event))) responseData = &#123;&#125; responseStatus = cfnresponse.FAILED try: serviceid = event[&quot;ResourceProperties&quot;][&quot;VpceServiceId&quot;] except Exception as e: logger.info(&#x27;Attribute retrival failure: &#123;&#125;&#x27;.format(e)) try: if event[&quot;RequestType&quot;] == &quot;Delete&quot;: responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) except Exception: logger.exception(&quot;Signaling failure to CloudFormation.&quot;) cfnresponse.send(event, context, cfnresponse.FAILED, &#123;&#125;) if event[&quot;RequestType&quot;] == &quot;Create&quot;: logger.info(&quot;Retrieving VPC Endpoint Service Name:&quot;) try: response = ec2.describe_network_interfaces( Filters=[ &#123; &#x27;Name&#x27;: &#x27;interface-type&#x27;, &#x27;Values&#x27;: [ &#x27;gateway_load_balancer&#x27;, ] &#125;, ] ) for x in response[&#x27;NetworkInterfaces&#x27;]: if x[&#x27;AvailabilityZone&#x27;] == &#x27;ap-northeast-1a&#x27;: az1_gwlb_ip = x[&#x27;PrivateIpAddress&#x27;] if x[&#x27;AvailabilityZone&#x27;] == &#x27;ap-northeast-1c&#x27;: az2_gwlb_ip = x[&#x27;PrivateIpAddress&#x27;] except Exception as e: logger.info(&#x27;ec2.describe_network_interfaces failure: &#123;&#125;&#x27;.format(e)) time.sleep(120) responseData = &#123;&#125; responseData[&#x27;Az1GwlbIp&#x27;] = az1_gwlb_ip responseData[&#x27;Az2GwlbIp&#x27;] = az2_gwlb_ip responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) Runtime: python3.7 Timeout: 150Outputs: Az1GwlbIp: Description: Firewall AZ1 GWLB IP Address Value: !GetAtt &#x27;CustomGwlbIpResource.Az1GwlbIp&#x27; Az2GwlbIp: Description: Firewall AZ2 GWLB IP Address Value: !GetAtt &#x27;CustomGwlbIpResource.Az2GwlbIp&#x27; 堆栈创建完成之后，会输出GWLB的弹性接口IP地址。如果手动配置Fortigate防火墙，配置geneve时需要这个信息。在CloudFormation里面，已经通过脚本自动化把这个地址抓取并且配置了。 二、查看FortiGate防火墙配置FortiGate防火墙的配置在CloudFormation代码里面已经配置完成了，这里通过图形化界面来看一下配置结果。 首次登陆FortiGate防火墙，默认的用户名是admin，默认的密码是实例id。 我在CloudFormation代码里面，为防火墙新建了一个测试用户，用户名为labuser，密码为FSr1Lliu1qiang2long3DemoZJG5。 这里可以查看实例ID信息。 2.1 FortiGate FW1 配置FortiGate-FW1启用了Split-VDOM，有两个VDOM，root用于防火墙管理，FG-traffic用于转发数据流量。 port1是主接口，用于转发数据流量。port2作为管理接口，用于管理流量。 静态路由配置，默认路由从geneve1和geneve2接口出去，配置本VPC CIDR网段从port1数据接口出去，下一跳指向子网网关。 因为配置了两条默认路由，有可能造成流量来回路径不一致的问题。所以通过配置策略路由，让来自geneve1的流量从genven1接口出去，来自geneve2的流量从genven2接口出去。 测试环境下，放行所有流量。 2.2 FortiGate FW2 配置FortiGate-FW2启用了Split-Task VDOM，有两个VDOM，root和FG-traffic。 port1是主接口，用于转发数据流量。port2作为管理接口，用于管理流量。 静态路由配置，默认路由从geneve1和geneve2接口出去，配置本VPC CIDR网段从port1数据接口出去，下一跳指向子网网关。 配置策略路由，因为配置了两条默认路由，有可能造成流量来回路径不一致的问题。所以通过配置策略路由，让来自geneve1的流量从genven1接口出去，来自geneve2的流量从genven2接口出去。 测试环境下，放行所有流量。 三、现象测试3.1 访问APP测试连接上APP2 Window RDP桌面。可以使用我在代码里面新建的用户名labuser，密码FSr1Lliu1qiang2long3DemoZJG5进行连接。 查看防火墙连接日志信息。 3.2 防火墙抓包FortiGate防火墙可以通过Debug packet flow[1]来查看防火墙对数据包执行的动作，这个抓包方法一般用于排错，输出的信息比较多。也可以通过自带的sniffer工具[2]单纯的抓包，输出的信息比较简洁。 Debug packet flow 例如：这里首先暂停了之前的抓包进程，然后抓取地址包含114.114.114.114的10个报文。 123456diagnose debug flow trace stopdiagnose debug enablediagnose debug flow filter addr 114.114.114.114diagnose debug flow show function-name enablediagnose debug flow trace start 10 也可以通过协议来进行过滤，这里只查看icmp协议的报文。 123456diagnose debug flow trace stopdiagnose debug enablediagnose debug flow filter proto 1diagnose debug flow show function-name enablediagnose debug flow trace start 10 运行的效果如下： 自带sniffer工具抓包 例如，这里抓取来自port1端口，端口号为6081的报文，其实就是GENVEN报文。 1FGT-GWLB-1 (FG-traffic) # diagnose sniffer packet port1 &#39;port 6081&#39; 例如，这里抓取来所有的icmp报文。 1FGT-GWLB-1 (FG-traffic) # diagnose sniffer packet any icmp 4 抓包命令结果如下： 可以利用sniff抓包来确认流量目前走哪一台防火墙，然后stop这个防火墙实例，查看流量多长时间能够切换成功，测试防火墙的高可用切换。我测试大致会在40秒左右切换成功。 四、部署Fortigate7.2.2版本代码参考上述的CloudFormation代码中FortiGate防火墙的开机启动配置，是基于FortiGate6.4.10版本配置的。如果选择7.2.2版本部署，防火墙无法加载对应配置，可以将下面的代码替换上面关于防火墙的部分。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294# Fortigate1 Fortigate1: Type: AWS::EC2::Instance Properties: ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, !Ref FortigateVersion] KeyName: !Ref MyKeyPair InstanceType: !FindInMap [FirewallInstanceType, !Ref &quot;FortigateVersion&quot;, InstanceType] NetworkInterfaces: - NetworkInterfaceId: !Ref Fortigate1DataEni DeviceIndex: 0 - NetworkInterfaceId: !Ref Fortigate1MgmtEni DeviceIndex: 1 UserData: Fn::Base64: Fn::Sub: - | config system admin edit &quot;labuser&quot; set accprofile &quot;super_admin&quot; set vdom &quot;root&quot; set password FSr1Lliu1qiang2long3DemoZJG5 next end end config system interface edit &quot;port1&quot; set defaultgw disable set allowaccess ping https ssh fgfm probe-response next edit &quot;port2&quot; set mode dhcp set allowaccess ping https ssh fgfm probe-response set defaultgw enable next end config system global set vdom-mode multi-vdom set timezone 08 end end config vdom edit root config system settings set vdom-type admin end end config vdom edit FG-traffic config system settings set vdom-type traffic end end config global config system interface edit &quot;port1&quot; set vdom &quot;FG-traffic&quot; set defaultgw disable set allowaccess ping https ssh fgfm probe-response next edit &quot;port2&quot; set vdom &quot;root&quot; set mode dhcp set allowaccess ping https ssh fgfm probe-response set defaultgw enable next end end config vdom edit FG-traffic config system geneve edit &quot;geneve1&quot; set interface &quot;port1&quot; set type ppp set remote-ip $&#123;Az1GwlbIp&#125; next edit &quot;geneve2&quot; set interface &quot;port1&quot; set type ppp set remote-ip $&#123;Az2GwlbIp&#125; next end config firewall policy edit 1 set name &quot;1&quot; set srcintf &quot;geneve1&quot; set dstintf &quot;geneve1&quot; set srcaddr &quot;all&quot; set dstaddr &quot;all&quot; set action accept set schedule &quot;always&quot; set service &quot;ALL&quot; set logtraffic all set logtraffic-start enable next edit 2 set name &quot;2&quot; set srcintf &quot;geneve2&quot; set dstintf &quot;geneve2&quot; set srcaddr &quot;all&quot; set dstaddr &quot;all&quot; set action accept set schedule &quot;always&quot; set service &quot;ALL&quot; set logtraffic all set logtraffic-start enable next end config log setting set local-in-allow enable set local-in-deny-unicast enable set local-in-deny-broadcast enable set local-out enable next end config router static edit 1 set device &quot;geneve1&quot; next edit 2 set device &quot;geneve2&quot; next edit 3 set dst 10.20.0.0 255.255.0.0 set gateway 10.20.10.1 set device &quot;port1&quot; next end config router policy edit 1 set input-device &quot;geneve1&quot; set gateway $&#123;Az1GwlbIp&#125; set output-device &quot;geneve1&quot; next edit 2 set input-device &quot;geneve2&quot; set gateway $&#123;Az2GwlbIp&#125; set output-device &quot;geneve2&quot; next end - Az1GwlbIp: !GetAtt &#x27;CustomGwlbIpResource.Az1GwlbIp&#x27; Az2GwlbIp: !GetAtt &#x27;CustomGwlbIpResource.Az2GwlbIp&#x27; Tags: - Key: Name Value: Fortigate-FW1 Fortigate2: Type: AWS::EC2::Instance DependsOn: CustomGwlbIpResource Properties: ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, !Ref FortigateVersion] KeyName: !Ref MyKeyPair InstanceType: !FindInMap [FirewallInstanceType, !Ref &quot;FortigateVersion&quot;, InstanceType] NetworkInterfaces: - NetworkInterfaceId: !Ref Fortigate2DataEni DeviceIndex: 0 - NetworkInterfaceId: !Ref Fortigate2MgmtEni DeviceIndex: 1 UserData: Fn::Base64: Fn::Sub: - | config system admin edit &quot;labuser&quot; set accprofile &quot;super_admin&quot; set vdom &quot;root&quot; set password FSr1Lliu1qiang2long3DemoZJG5 next end end config system interface edit &quot;port1&quot; set defaultgw disable set allowaccess ping https ssh fgfm probe-response next edit &quot;port2&quot; set mode dhcp set allowaccess ping https ssh fgfm probe-response set defaultgw enable next end config system global set vdom-mode multi-vdom set timezone 08 end end config vdom edit root config system settings set vdom-type admin end end config vdom edit FG-traffic config system settings set vdom-type traffic end end config global config system interface edit &quot;port1&quot; set vdom &quot;FG-traffic&quot; set defaultgw disable set allowaccess ping https ssh fgfm probe-response next edit &quot;port2&quot; set vdom &quot;root&quot; set mode dhcp set allowaccess ping https ssh fgfm probe-response set defaultgw enable next end end config vdom edit FG-traffic config system geneve edit &quot;geneve1&quot; set interface &quot;port1&quot; set type ppp set remote-ip $&#123;Az2GwlbIp&#125; next edit &quot;geneve2&quot; set interface &quot;port1&quot; set type ppp set remote-ip $&#123;Az1GwlbIp&#125; next end config firewall policy edit 1 set name &quot;1&quot; set srcintf &quot;geneve1&quot; set dstintf &quot;geneve1&quot; set srcaddr &quot;all&quot; set dstaddr &quot;all&quot; set action accept set schedule &quot;always&quot; set service &quot;ALL&quot; set logtraffic all set logtraffic-start enable next edit 2 set name &quot;2&quot; set srcintf &quot;geneve2&quot; set dstintf &quot;geneve2&quot; set srcaddr &quot;all&quot; set dstaddr &quot;all&quot; set action accept set schedule &quot;always&quot; set service &quot;ALL&quot; set logtraffic all set logtraffic-start enable next end config log setting set local-in-allow enable set local-in-deny-unicast enable set local-in-deny-broadcast enable set local-out enable next end config router static edit 1 set device &quot;geneve1&quot; next edit 2 set device &quot;geneve2&quot; next edit 3 set dst 10.20.0.0 255.255.0.0 set gateway 10.20.30.1 set device &quot;port1&quot; next end config router policy edit 1 set input-device &quot;geneve1&quot; set gateway $&#123;Az2GwlbIp&#125; set output-device &quot;geneve1&quot; next edit 2 set input-device &quot;geneve2&quot; set gateway $&#123;Az1GwlbIp&#125; set output-device &quot;geneve2&quot; next end end - Az1GwlbIp: !GetAtt &#x27;CustomGwlbIpResource.Az1GwlbIp&#x27; Az2GwlbIp: !GetAtt &#x27;CustomGwlbIpResource.Az2GwlbIp&#x27; Tags: - Key: Name Value: Fortigate-FW2 五、参考文档 [1] FortiGate / FortiOS 7.2.1 Administration Guide Debugging the packet flow：https://docs.fortinet.com/document/fortigate/7.2.1/administration-guide/054688/debugging-the-packet-flow [2] Troubleshooting Tip: Using the FortiOS built-in packet sniffer：https://community.fortinet.com/t5/FortiGate/Troubleshooting-Tip-Using-the-FortiOS-built-in-packet-sniffer/ta-p/194222","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"CloudFormation","slug":"CloudFormation","permalink":"https://liuqianglong.com/tags/CloudFormation/"},{"name":"AWS Gateway Load Balancer","slug":"AWS-Gateway-Load-Balancer","permalink":"https://liuqianglong.com/tags/AWS-Gateway-Load-Balancer/"},{"name":"FortiGate","slug":"FortiGate","permalink":"https://liuqianglong.com/tags/FortiGate/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"AWS VPC 流量集中检测系列--(3)AWS GWLB集成FortiGate防火墙","slug":"AWS-VPC-流量集中检测系列-3-AWS-GWLB集成FortiGate防火墙","date":"2022-10-31T00:03:00.000Z","updated":"2022-11-23T14:56:52.877Z","comments":true,"path":"AWS-VPC-流量集中检测系列-3-AWS-GWLB集成FortiGate防火墙.html","link":"","permalink":"https://liuqianglong.com/AWS-VPC-%E6%B5%81%E9%87%8F%E9%9B%86%E4%B8%AD%E6%A3%80%E6%B5%8B%E7%B3%BB%E5%88%97-3-AWS-GWLB%E9%9B%86%E6%88%90FortiGate%E9%98%B2%E7%81%AB%E5%A2%99.html","excerpt":"","text":"B站视频链接：https://www.bilibili.com/video/BV1ee4y147HK/?spm_id_from=333.999.0.0微信公众号：自刘地 一、背景之前在《AWS GWLB集成paloalto防火墙》里面提到过，AWS GWLB集成FortiGate防火墙的官方博客[1]缺少一些配置，导致无法实现防火墙的高可用。这篇文档来介绍一下AWS GWLB如何集成FortiGate防火墙。 FortiGate防火墙集成AWS GWLB需要注意： FortiGate防火墙建议使用6.4.10版本。经过测试目前使用7.0.7版本无法正常工作，但是从6.4.10升级到7.0.7版本，流量是可以正常转发的。另外，不建议对防火墙执行降级操作，防火墙会丢配置，并且图形化界面可能遇到无法切换VDOM的Bug。所以目前生产环境建议使用6.4.10，7.2.2版本可以用于测试。 FortiGate防火墙建议配置VDOM，Fortigate默认没有带外管理接口，也就是所有接口默认都会转发数据流量，通过配置VDOM可以将管理流量与数据流量分离，从而简化路由配置。 二、Fortigate VDOMFortiGate 中有两种类型的 VDOM 模式——Split VDOM 和 Multi-VDOM 。你可以将一个VDOM理解成一个虚拟的防火墙，不同的VDOM之间，默认情况下路由表、流量等都是隔离的。 Split VDOM：启用Split VDOM 模式[2]后，FortiGate 会产生两个 VDOM，一个root VDOM 和 FG-Traffic VDOM。在Split VDOM 模式下，不能添加新的 VDOM。 这个非常实用的一个模式，激活这个模式能快速的将防火墙的管理平面和数据平面进行分离。但是在7.0.8版本之后，FortiGate取消了Split VDOM模式。 Root：只能允许管理工作，并且有分离的条目。 FG-Traffic：可以提供单独的安全策略并允许流量通过 FortiGate，它仅用于数据流量。 激活split-vdom命令： 123config system global set vdom-mode split-vdomend Multi-VDOM ：在7.0.8版本之后，只有Multi-VDOM模式[3]。Split VDOM模式更加适合小型网络，快速的分离管理和数据平面。Multi-VDOM更加适合ISP，可以划分多个租户并进行隔离，或者需要进行流量细分的大型网络。 激活Multi-VDOM模式之后，所有的VDOM配置都会迁移到root VDOM下，root VDOM用于管理防火墙，无法删除。一次只能存在一个管理 VDOM。建议管理 VDOM 具有 Internet 访问权限，否则与管理相关的服务（例如 FortiGuard 更新和查询）将无法工作。 激活multi-vdom命令： 123config system global set vdom-mode multi-vdomend 三、实验环境介绍这里实验环境与之前的《AWS GWLB集成paloalto防火墙》是一样的，只是替换了防火墙产品。 这里AppVpc模拟业务的VPC，APP进出互联网的流量会被引导到SecVpc内的防火墙做安全检测，防火墙允许通过后，流量才能正常通信。 这次实验的核心组件： GWLB：Gateway Load Balancer与防火墙建立GENEVE[4]隧道，使用UDP 6081来转发数据，这种封装方式让防火墙不用关闭源/目的地址检查，也不用做源/目的NAT的转换。GWLB会在子网创建一个弹性接口，流量通过这个弹性接口来转发。 GWLBe：Gateway Load Balancer endpoint 是由AWS PrivateLink提供的VPC终端节点，可以作为路由表中的下一跳存在，流量送到GWLBe后，会继续送往GWLB背后的实例。 Ingress Route Table：这个路由表关联在IGW上，路由表一般都是关联在子网，这里是AWS 2019年发布的一个功能VPC Ingress Routing[5]，让路由表可以关联到IGW上，用于控制入向的流量。 APP访问互联网流量路径（红色箭头） AppVpc内的APP1想要访问Internet上的资源，所在子网关联的路由表将默认路由指向了GWLB Endpoint1。 GWLB Endpoint1 使用 AWS PrivateLink 将流量送到到GWLB，这里流量是由AWS来控制，无需用户配置。 GWLB会使用IP数据包的5元组或者3元组哈希来选择实例。GWLB使用GENEVE来封装原始IP流量，并通过UDP 6081发送到防火墙。GENEVE封装可以将所有的IP流量送到实例上，GWLB的侦听组上不需要为每个协议和端口配置侦听器。 当 GWLB 接收到新的 TCP/UDP 流时，它会使用 5 元组流哈希（源 IP、目标 IP、传输协议、源端口、目标端口）从目标组中选择一个健康的设备。随后，GWLB 将该流的所有数据包（正向和反向）路由到同一设备（粘性）。对于非 TCP/UDP 流，GWLB 仍然使用 3 元组（源 IP、目标 IP、传输协议）进行转发决策。 防火墙收到GENEVE报文，需要解封装流量，然后根据防火墙的安全策略决定是否允许流量通过。 防火墙重新使用GENEVE封装流量，并发送到GWLB。 GWLB根据 GENEVE TLV字段，选择转发到GWLB Endpoint1，并且发送时会去除GENEVE封装。 为了支持具有重叠 CIDR 的多租户设备，设备需要知道流量的来源。GWLB 还需要跟踪流量并避免用户流量的混合。GWLB 可以通过将每个数据包的类型-长度-值 (TLV) 三元组发送到设备的额外信息（例如 GWLBE/VPCE ID、附件 ID、流 Cookie）来实现这一点。 GWLB Endpoint1接受到流量，查看子网关联路由表，默认路由指向IGW，流量通过IGW访问Internet。 互联网访问APP的流量路径（蓝色箭头） 客户发起对App1公网地址的访问，流量到达AppVpc的IGW，IGW查看所关联的路由表，将流量送往GWLB Endpoint1。 GWLB Endpoint1 使用 AWS PrivateLink 将流量送到到GWLB。 GWLB使用GENEVE来封装原始IP流量，并通过UDP 6081转发到实例。 防火墙收到GENEVE报文，需要解封装流量，然后根据防火墙的安全策略决定是否允许流量通过。 防火墙重新使用GENEVE封装流量，并发送到GWLB。 GWLB根据 GENEVE TLV字段，选择转发到GWLB Endpoint1，并去除GENEVE封装。 GWLB Endpoint1接受到流量，查看子网关联路由表，匹配到local路由，流量送到APP1。 四、 配置部署4.1 VPC 配置4.1.1 创建VPC创建两个VPC 123VPC名称 网段AppVpc 10.10.0.0&#x2F;16SecVpc 10.20.0.0&#x2F;16 4.1.2 创建IGW关联VPC创建两个IGW，分别关联上VPC 4.1.3 创建子网AppVpc 创建4个子网 12345子网名称 网段 备注AppVpc-GWLBe1-Subnet 10.10.10.0&#x2F;24 AZ1 的Gateway Load Balancer Endpoint所在子网AppVpc-App1-Subnet 10.10.20.0&#x2F;24 AZ1 App1 所在子网AppVpc-GWLBe2-Subnet 10.10.30.0&#x2F;24 AZ2 的Gateway Load Balancer Endpoint所在子网AppVpc-App2-Subnet 10.10.40.0&#x2F;24 AZ2 App2 所在子网 SecVpc 创建4个子网 12345子网名称 网段 备注SecVpc-GWLB1-Subnet 10.20.10.0&#x2F;24 AZ1 FortiGate 数据接口所在子网，GWLB的接口也在此子网SecVpc-MGT1-Subnet 10.20.20.0&#x2F;24 AZ1 FortiGate 的管理接口所在子网，可以通过互联网直接访问SecVpc-GWLB2-Subnet 10.20.30.0&#x2F;24 AZ2 FortiGate 数据接口所在子网，GWLB的接口也在此子网SecVpc-MGT2-Subnet 10.20.40.0&#x2F;24 AZ2 FortiGate 的管理接口所在子网，可以通过互联网直接访问 4.1.4 创建路由表这里创建路由表之后，暂时先不修改路由，因为有些路由的下一跳是Endpoint，需要等Endpoint创建完成后再修改路由表。 AppVpc创建4个路由表 12345路由表名称 备注AppVpc-Igw-Ingress-route-table 这个路由表关联AppVpcIGW，不关联子网，用于将入向流量引导到endpoint AppVpc-Gwlbe-route-table 这个路由表关联两个GWLBe所在的子网，用于将流量从IGW出去AppVpc-App1-route-table 这是AZ1 App的路由表，默认路由指向AZ1的endpointAppVpc-App2-route-table 这是AZ2 App的路由表，默认路由指向AZ2的endpoint AppVpc-Igw-Ingress-route-table关联IGW。路由表一般都是关联子网，这里是AWS 2019年发布的一个功能VPC Ingress Routing，让路由表可以关联到IGW上，用于控制入向的流量。 AppVpc-Gwlbe-route-table关联两个GWLBe子网 AppVpc-App1-route-table关联AZ1的APP1的子网。 AppVpc-App2-route-table关联AZ2的APP2的子网。 SecVpc创建1个路由表 12路由表名称 备注SecVpc-Mgt-route-table 默认路由指向IGW，用于互联网访问防火墙的管理接口 SecVpc-Mgt-route-table关联两个管理子网。防火墙的数据接口不需要单独的路由表，因为数据接口主要是和GWLB通过GENVEN隧道通信，当然为数据接口网段单独创建一个路由表也可以，不用添加任何特殊路由。 管理网络的默认路由指向IGW，为了之后从公网连接到防火墙进行初始化。其他路由之后再设置。 4.2 创建实例4.2.1 创建FortiGate实例在Marketplace搜索Fortigate关键词，这里图形化界面只提供最新的7.2.2版本选择。要想使用其他版本，可以使用AWS CLI或者CloudFormation启动。 实例命名为Fortigate1，实例类型保持默认。 选择放置在SecVpc，主网卡在SecVpc-GWLB1-Subnet网段，用于防火墙转发数据流量。安全组放行来自本VPC的所有流量，如果要精确放行，可以放行UDP 6081 GENEVE的流量。 再添加一块网卡，放置在AZ1的管理网段。 在User data里面为防火墙创建一个测试账号（可选），Fortigate启动之后默认用户名为admin，密码为实例ID，但是需要重置密码。我觉得重置密码太麻烦，所以这里添加一个测试用户。 另外因为需要通过port2来对防火墙进行管理，所以禁用port1的默认路由，让默认路由从port2出去。 123456789101112131415161718config system admin edit &quot;labuser&quot; set accprofile &quot;super_admin&quot; set vdom &quot;root&quot; set password FSr1Lliu1qiang2long3DemoZJG5 nextendconfig system interface edit &quot;port1&quot; set defaultgw disable set allowaccess ping https ssh fgfm probe-response next edit &quot;port2&quot; set mode dhcp set allowaccess ping https ssh fgfm probe-response set defaultgw enable nextend 申请两个弹性IP，用于关联防火墙的管理接口。 关联Fortigate1的管理接口，注意不要选错接口了。 一样的步骤，关联Fortigate2，查看防火墙关联的弹性IP。 4.2.2 创建APP实例创建App1，主要用于后续搭建一个HTTP服务，从公网访问测试，这里使用Amazon Linux AMI，保持默认的实例大小即可。 实例放置在AppVpc-App1-Subnet子网，开启自动分配公网IP，安全组放行TCP 8843，后续的HTTP使用8443端口。还可以放行ICMP，便于测试。 创建App2实例，这里使用Window AMI，为了启动速度快一些，这里使用了t3.large的实例类型。App2实例可以用于从公网RDP测试，也可以做为客户端使用浏览器测试互联网访问流量监测。 实例放置在AppVpc-App2-Subnet子网，允许自动获取公网IP地址，安全组保持默认放行3389即可。 4.3 创建GWLB并关联FortiGate创建Gateway Load Balancer。 指定两台防火墙数据接口所在的子网，GWLB会在这两个子网创建两个弹性接口，GENEVE流量实际从这个弹性接口转发。在这个界面创建侦听组。 实例类型的target会侦听实例的主网卡，防火墙主网卡为port1。 防火墙主接口开启了TCP 443服务，所以使用这个端口来做健康监测。 将两台防火墙注册到侦听组上。 回到创建GWLB的界面，调用刚才创建的侦听组。 启用GWLB的跨区域负载均衡。 确认防火墙的健康检查正常。 4.4 创建Endpoint Service及Endpoint创建Endpoint Service关联GWLB，测试环境取消勾选Acceptance required，这样当Endpoint发起连接时，不需要再手动确认一次。 记录Endpoint Service name。 AppVpc创建endpoint，填写刚才记录的Endpoint Service name，放置到AppVpc-GWLBe1-Subnet子网。 继续创建endpoint，放置到AppVpc-GWLBe2-Subnet子网。 查看创建的两个endpoint，记录endpoint ID，后续修改路由表需要用到。 记录GWLB弹性接口的IP，之后防火墙的配置需要用到这个IP地址。 4.5 配置路由表修改IGW关联的路由表，控制去往App网段的流量分别送到两个endpoint上去。 修改App1所在子网的路由，默认路由指向Endpoint1。 修改App2所在子网的路由，默认路由指向Endpoint2。 修改endpoint所在子网的路由，默认路由指向IGW。 4.6 配置FortiGate4.6.1 登录FortiGate登录Fortigate1，Fortigate启动之后默认用户名为admin，密码为实例ID。 默认密码为实例ID信息。 首次登陆需要修改密码。 登录Fortigate2，因为在User Data里面创建了新的用户，可以直接使用用户名labuser，密码为FSr1Lliu1qiang2long3DemoZJG5登录。 4.6.2 Fortigate1图形化配置Fortigate启用VDOM模式。 修改root VDOM的类型。 修改为Admin模式，用于对防火墙进行管理。 新建一个FG-trafficVDOM，类型为Traffic模式，用于转发数据流量。 修改port1关联的VDOM信息。 关联到FG-trafficVDOM上。 进入防火墙命令行模式，配置geneve接口信息（目前图形化不支持此配置）。 123456789101112config system geneve edit &quot;geneve1&quot; set interface &quot;port1&quot; set type ppp set remote-ip 10.20.10.32 next edit &quot;geneve2&quot; set interface &quot;port1&quot; set type ppp set remote-ip 10.20.30.8 nextend 查看创建的geneve接口信息。 创建防火墙策略，放行所有进出geneve1的流量。 同样的步骤，放行所有进出geneve2接口的所有流量。 设置日志信息，开启所有的Local Traffic Log。 配置静态路由，默认路由从两个geneve接口出去，另外设置去往本VPC CIDR网段从port1出去，网关为数据接口所在子网的网关。 因为前面配置了等价默认路由，可能造成从geneve1接口进的流量从geneve2出去。所以配置一下配置策略路由，让从geneve1进的流量从geneve1出去，从geneve2进的流量从geneve2出去。 查看策略路由配置。 4.6.3 Fortigate2命令行配置配置激活multi-vdom模式，防火墙需要重新登录。 123456config system global set vdom-mode multi-vdom set timezone 08 endyend 继续刷其他配置，注意配置替换GWLB的私有IP地址。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101endconfig vdom edit root config system settings set vdom-type admin endyendconfig vdom edit FG-traffic config system settings set vdom-type traffic endendconfig global config system interface edit &quot;port1&quot; set vdom &quot;FG-traffic&quot; set defaultgw disable set allowaccess ping https ssh fgfm probe-response next edit &quot;port2&quot; set vdom &quot;root&quot; set mode dhcp set allowaccess ping https ssh fgfm probe-response set defaultgw enable next endendconfig vdomedit FG-trafficconfig system geneve edit &quot;geneve1&quot; set interface &quot;port1&quot; set type ppp set remote-ip 10.20.30.8 next edit &quot;geneve2&quot; set interface &quot;port1&quot; set type ppp set remote-ip 10.20.10.32 nextendconfig firewall policy edit 1 set name &quot;1&quot; set srcintf &quot;geneve1&quot; set dstintf &quot;geneve1&quot; set srcaddr &quot;all&quot; set dstaddr &quot;all&quot; set action accept set schedule &quot;always&quot; set service &quot;ALL&quot; set logtraffic all set logtraffic-start enable next edit 2 set name &quot;2&quot; set srcintf &quot;geneve2&quot; set dstintf &quot;geneve2&quot; set srcaddr &quot;all&quot; set dstaddr &quot;all&quot; set action accept set schedule &quot;always&quot; set service &quot;ALL&quot; set logtraffic all set logtraffic-start enable nextendconfig log setting set local-in-allow enable set local-in-deny-unicast enable set local-in-deny-broadcast enable set local-out enable nextendconfig router static edit 1 set device &quot;geneve1&quot; next edit 2 set device &quot;geneve2&quot; next edit 3 set dst 10.20.0.0 255.255.0.0 set gateway 10.20.30.1 set device &quot;port1&quot; nextendconfig router policy edit 1 set input-device &quot;geneve1&quot; set gateway 10.20.30.8 set output-device &quot;geneve1&quot; next edit 2 set input-device &quot;geneve2&quot; set gateway 10.20.10.32 set output-device &quot;geneve2&quot; nextend 五、访问测试5.1 App1 HTTP访问测试通过SSH连接到App1上，安装HTTP服务，修改端口为8443。 12345yum install -y httpdsed -i.bak &#39;s&#x2F;Listen 80&#x2F;Listen 8443&#x2F;g&#39; &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.confecho &quot;&lt;h2&gt;Hello World from $(hostname -f)&lt;&#x2F;h2&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.htmlsystemctl start httpd.servicesystemctl enable httpd.service 访问EC2的公网8443端口测试，在浏览器界面可以使用CTRL+F5多强制刷新几次。 查看防火墙的日志信息。 5.2 App2 Windows访问测试通过RDP连接到App2上。 防火墙查看日志信息。 5.3 防火墙冗余测试防火墙抓包 FortiGate防火墙可以通过Debug packet flow[7]来查看防火墙对数据包执行的动作，这个抓包方法一般用于排错，输出的信息比较多。也可以通过自带的sniffer工具[8]单纯的抓包，输出的信息比较简洁。 Debug packet flow 例如：这里首先暂停了之前的抓包进程，然后抓取地址包含114.114.114.114的10个报文。 123456diagnose debug flow trace stopdiagnose debug enablediagnose debug flow filter addr 114.114.114.114diagnose debug flow show function-name enablediagnose debug flow trace start 10 也可以通过协议来进行过滤，这里只查看icmp协议的报文。 123456diagnose debug flow trace stopdiagnose debug enablediagnose debug flow filter proto 1diagnose debug flow show function-name enablediagnose debug flow trace start 10 运行的效果如下： 自带sniffer工具抓包 例如，这里抓取来自port1端口，端口号为6081的报文，其实就是GENVEN报文。 1FGT-GWLB-1 (FG-traffic) # diagnose sniffer packet port1 &#39;port 6081&#39; 例如，这里抓取来所有的icmp报文。 1FGT-GWLB-1 (FG-traffic) # diagnose sniffer packet any icmp 4 抓包命令结果如下： 可以利用sniff抓包来确认流量目前走哪一台防火墙，然后stop这个防火墙实例，查看流量多长时间能够切换成功，测试防火墙的高可用切换。注意，如果是已经建立的会话，切换时间会长一点，如果是新建会话，切换时间会快一点。 六、清理实验环境步骤到上面其实实验已经做完了，既然是实验，肯定是需要清空实验环境的。这个实验有一些依赖调用，有时候不太好删除，另外如果漏删除了EIP和卷，还会持续产生费用。 按照下面步骤可以彻底清空前面所有操作创建的资源，不会有依赖报错。 123456789101. 终止所有实例。2. 解除AppVpc的4个路由表关联的子网和IGW。3. 删除AppVpc的4个路由表。4. 删除2个Endpoint。5. 删除Endpoint Service。6. 删除AppVpc。7. 删除GWLB。8. 删除SecVpc。9. 删除Target Group。10. 释放申请的2个EIP。 七、参考文档 [1] 亚马逊云科技(中国区)网关负载均衡服务集成FortiGate安全网关扩展安全服务性能：https://aws.amazon.com/cn/blogs/china/gateway-load-balancing-services-integrate-fortigate-security-gateways/ [2] FortiGate 6.4.10 Split-Task VDOM Mode：https://docs.fortinet.com/document/fortigate/6.4.10/administration-guide/758820/split-task-vdom-mode [3] FortiGate 7.2 VDOM overview：https://docs.fortinet.com/document/fortigate/7.2.2/administration-guide/597696/vdom-overview [4] RFC 8926 Geneve: Generic Network Virtualization Encapsulation：https://www.rfc-editor.org/rfc/rfc8926 [5] New – VPC Ingress Routing – Simplifying Integration of Third-Party Appliances：https://aws.amazon.com/cn/blogs/aws/new-vpc-ingress-routing-simplifying-integration-of-third-party-appliances [6] FortiGate VDOM Configuration: Complete Guide：https://networkinterview.com/fortigate-vdom-configuration/ [7] FortiGate / FortiOS 7.2.1 Administration Guide Debugging the packet flow：https://docs.fortinet.com/document/fortigate/7.2.1/administration-guide/054688/debugging-the-packet-flow [8] Troubleshooting Tip: Using the FortiOS built-in packet sniffer：https://community.fortinet.com/t5/FortiGate/Troubleshooting-Tip-Using-the-FortiOS-built-in-packet-sniffer/ta-p/194222","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"CloudFormation","slug":"CloudFormation","permalink":"https://liuqianglong.com/tags/CloudFormation/"},{"name":"AWS Gateway Load Balancer","slug":"AWS-Gateway-Load-Balancer","permalink":"https://liuqianglong.com/tags/AWS-Gateway-Load-Balancer/"},{"name":"FortiGate","slug":"FortiGate","permalink":"https://liuqianglong.com/tags/FortiGate/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"AWS 如何查找EC2实例特定版本的AMI ID","slug":"AWS-如何查找EC2实例特定版本的AMI-ID","date":"2022-10-23T15:39:00.000Z","updated":"2022-11-23T14:51:51.374Z","comments":true,"path":"AWS-如何查找EC2实例特定版本的AMI-ID.html","link":"","permalink":"https://liuqianglong.com/AWS-%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BEEC2%E5%AE%9E%E4%BE%8B%E7%89%B9%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84AMI-ID.html","excerpt":"","text":"B站视频链接：https://www.bilibili.com/video/BV1884y1q7qM/微信公众号：自刘地 一、背景在我的CloudFormation代码里面，经常会使用到特定版本的实例。但是在AWS控制台启动EC2实例时，AWS只会提供特定版本的EC2镜像，用户并不能自由选择特定的版本进行启动。要启动特定版本的EC2只能通过AWS CLI或者AWS CloudFormation在代码里面指定ami-id信息然后启动。这里分享一下如何寻找特定版本的ami-id信息。 二、获取AWS控制台提供的镜像ami-id对于控制台界面能够选择的实例，比较好查找对应的ami-id信息，找到这个ami-id是第一步，后续查找实例的其他版本需要用到这个ami-id。所以先看一下如何获取图形化能选择的实例ami-id。 AWS控制台界面可以通过四种途径启动EC2，分别是： 快速启动（Quickstart AMIs） 我的AMI（My AMIs） 亚马逊云科技Marketplace（AWS Marketplace AMIs） 社区AMI（Community AMIs）。 目前AWS 中国区和AWS Global区域启动EC2的界面所有区别。对于第一、二和四种类型，在控制台界面可以直接看到ami-id信息。但是对于第三种在Marketplace上的实例，两种控制台界面获取ami-id的方法有所区别。 快速启动（QUickstart AMIs）界面获取ami-id信息 我的AMI（My AMIs）界面获取ami-id信息。 社区AMI（Community AMIs）界面获取ami-id信息。 对于AWS Global区域查看AWS Marketplace AMIs，在选择镜像后，准备启动时就可以看到ami-id信息，并不需要真的启动EC2就能获取ami-id信息。 对于AWS 中国区域查看AWS Marketplace AMIs，需要启动EC2之后，选中对应实例，才能看到对应的ami-id信息。 三、查询历史版本ami-id现在已经了解如何通过AWS控制台界面来获取实例的ami-id信息。要获取实例其他版本的ami-id，需要使用aws cli，并配置好凭证信息（请参考往期文章《AWS CloudFormation系列–(3)Python 操作CloudFormation》介绍了如何使用 AWS CLI以及配置凭证信息）。 这里通过一个案例，来看如何获取实例特定版本的ami-id信息，例如想要获取Fortigate 6.4.10版本的ami-id信息。 AWS控制台当前提供的Fortigate版本是7.0.7，通过上面的方法，获取到7.0.7版本的ami-id是ami-0f2b0162d497c9988。 下面需要使用aws ec2 describe-images[1]命令来查看这个ami-id的详细信息。 使用--region参数，指定只查看Tokyo区域的的镜像。使用--image-ids，指定ami-id信息。命令可以在有凭证的主机上运行，也可以在AWS CloudShell上操作。 123aws ec2 describe-images \\ --region ap-northeast-1 \\ --image-ids ami-0f2b0162d497c9988 AWS Gloabl区域提供CloudShell服务，进入之后可以直接配置AWS CLI，拥有和图形化界面用户相同的权限。 输出结果主要关注Description字段，里面的信息可以作为下一次过滤的字段，例如里面有FortiGate、AWSONDEMAND、7.0.7等关键词。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253[cloudshell-user@ip-10-0-179-71 ~]$ aws ec2 describe-images \\&gt; --region ap-northeast-1 \\&gt; --image-ids ami-0f2b0162d497c9988&#123; &quot;Images&quot;: [ &#123; &quot;ProductCodes&quot;: [ &#123; &quot;ProductCodeId&quot;: &quot;2wqkpek696qhdeo7lbbjncqli&quot;, &quot;ProductCodeType&quot;: &quot;marketplace&quot; &#125; ], &quot;Description&quot;: &quot;FortiGate-VM64-AWSONDEMAND build0367 (7.0.7) GA&quot;, &quot;VirtualizationType&quot;: &quot;hvm&quot;, &quot;Hypervisor&quot;: &quot;xen&quot;, &quot;ImageOwnerAlias&quot;: &quot;aws-marketplace&quot;, &quot;EnaSupport&quot;: true, &quot;SriovNetSupport&quot;: &quot;simple&quot;, &quot;ImageId&quot;: &quot;ami-0f2b0162d497c9988&quot;, &quot;State&quot;: &quot;available&quot;, &quot;BlockDeviceMappings&quot;: [ &#123; &quot;DeviceName&quot;: &quot;/dev/sda1&quot;, &quot;Ebs&quot;: &#123; &quot;SnapshotId&quot;: &quot;snap-04c5af4435c4672a3&quot;, &quot;DeleteOnTermination&quot;: true, &quot;VolumeType&quot;: &quot;gp2&quot;, &quot;VolumeSize&quot;: 2, &quot;Encrypted&quot;: false &#125; &#125;, &#123; &quot;DeviceName&quot;: &quot;/dev/sdb&quot;, &quot;Ebs&quot;: &#123; &quot;Encrypted&quot;: false, &quot;DeleteOnTermination&quot;: true, &quot;VolumeType&quot;: &quot;gp2&quot;, &quot;VolumeSize&quot;: 30 &#125; &#125; ], &quot;Architecture&quot;: &quot;x86_64&quot;, &quot;ImageLocation&quot;: &quot;aws-marketplace/FortiGate-VM64-AWSONDEMAND build0367 (7.0.7) GA-3124a694-441c-4ff1-8bf7-4d153be424a6&quot;, &quot;RootDeviceType&quot;: &quot;ebs&quot;, &quot;OwnerId&quot;: &quot;679593333241&quot;, &quot;RootDeviceName&quot;: &quot;/dev/sda1&quot;, &quot;CreationDate&quot;: &quot;2022-10-20T15:56:18.000Z&quot;, &quot;Public&quot;: true, &quot;ImageType&quot;: &quot;machine&quot;, &quot;Name&quot;: &quot;FortiGate-VM64-AWSONDEMAND build0367 (7.0.7) GA-3124a694-441c-4ff1-8bf7-4d153be424a6&quot; &#125; ]&#125; 有了上面三个关键词之后，只需要替换版本信息，就可以进行精确的过滤查找了。 1234aws ec2 describe-images \\ --region ap-northeast-1 \\ --filters &quot;Name=description,Values=*FortiGate*AWSONDEMAND*6.4.10*&quot; \\ --query &#x27;Images[*].&#123;Description:Description,ImageId:ImageId,Architecture:Architecture&#125;&#x27; --filters：通过filters字段可以过滤特定字段里面的关键词，前面通过查询特定的ami-id信息，就是为了了解有哪些可以作为关键词进行查找的，这个关键字一般要经过多次尝试。 AWSONDEMAND：这个关键词表示AWS推荐的实例，一般是PAYG（pay as you go）类型的授权。如果不添加这个关键词，会返回两个6.4.10版本的ami-id，不包含AWSONDEMAND关键词的BYOL类型的License。 --query：这个参数可以控制返回哪些字段信息，简化输出结果。 输出结果如下，加了三个关键词，控制只输出描述信息、ami-id信息，还有系统架构信息。 1234567891011[cloudshell-user@ip-10-0-179-71 ~]$ aws ec2 describe-images \\&gt; --region ap-northeast-1 \\&gt; --filters &quot;Name=description,Values=*FortiGate*AWSONDEMAND*6.4.10*&quot; \\&gt; --query &#x27;Images[*].&#123;Description:Description,ImageId:ImageId,Architecture:Architecture&#125;&#x27;[ &#123; &quot;Description&quot;: &quot;FortiGate-VM64-AWSONDEMAND build2000 (6.4.10) GA&quot;, &quot;ImageId&quot;: &quot;ami-0abf1a002258e8077&quot;, &quot;Architecture&quot;: &quot;x86_64&quot; &#125;] 还可以通--output参数，来指定输出的文本格式，默认是json类型，这里输出文本类型。而且只查看ami-id信息，会输出非常简洁的结果。 1234567aws ec2 describe-images \\ --region ap-northeast-1 \\ --filters &quot;Name=description,Values=*FortiGate*AWSONDEMAND*6.4.10*&quot; \\ --query &#x27;Images[*].[ImageId]&#x27; \\ --output text ami-0abf1a002258e8077 四、实战案例4.1 查询Cisco ASAv 9.14.4 ami-id已知东京区域Cisco ASAv 9.18.1版本的ami-id是ami-058c3870fc61fdc32，请查询9.14.4版本的ami-id信息。 首先查看这个ami-id的详细信息，主要是查看Description字段里面可以提取的关键词。 123aws ec2 describe-images \\ --region ap-northeast-1 \\ --image-ids ami-058c3870fc61fdc32 输出结果摘要如下，可以看到关键词是asav9-18-1 123...&quot;Description&quot;: &quot;[Copied ami-00ce522a548e6bc01 from us-east-1] asav9-18-1-ENA&quot;,... 进一步查询asav9-14-4版本的信息： 1234aws ec2 describe-images \\ --region ap-northeast-1 \\ --filters &quot;Name=description,Values=*asav9-14-4*&quot; \\ --query &#x27;Images[*].&#123;Description:Description,ImageId:ImageId&#125;&#x27; 输出结果如下，可以看到有两个ami-id信息，而且从描述来看也没法区分哪个是BYOL的授权，哪个是PAYG（pay as you go）类型的授权。这种情况根据我的个人经验（不一定准确），这个输出结果的顺序与AWS控制台当前版本的顺序大概率是一致的，所以可以先猜测第二个ami-id是PAYG类型的授权。 12345678910[ &#123; &quot;Description&quot;: &quot;[Copied ami-03e7d9c4b42328a0b from us-east-1] asav9-14-4-ENA&quot;, &quot;ImageId&quot;: &quot;ami-0aed364da25893e71&quot; &#125;, &#123; &quot;Description&quot;: &quot;[Copied ami-03e7d9c4b42328a0b from us-east-1] asav9-14-4-ENA&quot;, &quot;ImageId&quot;: &quot;ami-0f46125dd0064a704&quot; &#125;] 如果需要进一步确认，可以使用命令行快速在默认VPC使用这个ami-id启动一台EC2确认一下。 1aws ec2 run-instances --image-id ami-0f46125dd0064a704 --count 1 --instance-type c5.xlarge --key-name Global_Tokyo_KeyPair --security-group-ids sg-cbd442b7 --subnet-id subnet-ee03eca6 4.2 查询Palo Alto Bundle2 10.2.2 ami-id已知东京区域Palo Alto PAN-OS 10.0.11-h1 Bundle 2版本的ami-id是ami-05587f4db3c1c966b，请查询10.2.2版本的ami-id信息。 直接输出这个ami-id的描述信息，获取关键词信息。 1234567aws ec2 describe-images \\ --region ap-northeast-1 \\ --image-ids ami-05587f4db3c1c966b \\ --query &#39;Images[*].[Description]&#39; \\ --output text [Copied ami-0588942bc26617f1d from us-east-1] PA-VM-AWS-10.0.11-h1 输入关键词词PA-VM-AWS-10.2.2-h1进行查找，这个结果非常清晰。 1234567aws ec2 describe-images \\ --region ap-northeast-1 \\ --filters &quot;Name=description,Values=*PA-VM-AWS-10.2.2-h1*&quot; \\ --query &#x27;Images[*].[ImageId]&#x27; \\ --output text ami-0af0b709bb9eb7d08 五、参考文档 [1] AWS CLI describe-images：https://awscli.amazonaws.com/v2/documentation/api/2.1.29/reference/ec2/describe-images.html [2] AWS CLI describe-instances –query：https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/describe-instances.html [3] Python Searches across all AWS AMI Images in all regions：https://github.com/hutchris/amisearch","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"EC2 AMI","slug":"EC2-AMI","permalink":"https://liuqianglong.com/tags/EC2-AMI/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"AWS VPC 流量集中检测系列--(2)利用CloudFormation自动化部署AWS GWLB集成Palo Alto防火墙","slug":"AWS-VPC-流量集中检测系列-2-利用CloudFormation自动化部署AWS-GWLB集成Palo-Alto防火墙","date":"2022-10-16T15:54:00.000Z","updated":"2022-11-23T14:45:22.629Z","comments":true,"path":"AWS-VPC-流量集中检测系列-2-利用CloudFormation自动化部署AWS-GWLB集成Palo-Alto防火墙.html","link":"","permalink":"https://liuqianglong.com/AWS-VPC-%E6%B5%81%E9%87%8F%E9%9B%86%E4%B8%AD%E6%A3%80%E6%B5%8B%E7%B3%BB%E5%88%97-2-%E5%88%A9%E7%94%A8CloudFormation%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2AWS-GWLB%E9%9B%86%E6%88%90Palo-Alto%E9%98%B2%E7%81%AB%E5%A2%99.html","excerpt":"","text":"B站视频链接：https://www.bilibili.com/video/BV1EP411N73r/?spm_id_from=333.999.0.0微信公众号：自刘地 上一篇文章讲过了AWS GWLB如何集成Palo Alto防火墙，来对流量做集中检测。上一次实验是通过AWS 控制台操作的，部署起来还是比较繁琐的，这里分享一下实验环境的CloudFormation代码，帮助大家快速部署一下实验环境。 一、CloudFormation 代码部署这里的CloudFormation代码在Tokyo区域(ap-northeast-1)部署的，如果要在其他Region部署，请修改paloalto和windows的ami id。堆栈大概会在8分钟创建完成。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879AWSTemplateFormatVersion: &quot;2010-09-09&quot;Mappings: RegionMap: ap-northeast-1: PaBundle1: ami-0bcddfc3678d5a897 PaBundle2: ami-0c4d901d7a5370b78 us-west-2: PaBundle1: ami-01d7ef8ff7ddaff25 PaBundle2: ami-0d45d840ed2fe3ebaParameters: EC2InstanceAmiId: Type: AWS::SSM::Parameter::Value&lt;AWS::EC2::Image::Id&gt; Default: &#x27;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2&#x27; MyKeyPair: Description: Amazon EC2 Key Pair Type: AWS::EC2::KeyPair::KeyName PaVmType: Description: Choice PA Firewall License Type Type: String Default: PaBundle2 AllowedValues: - PaBundle1 - PaBundle2Resources:#=========================================创建SSM Role========================================# BastionSsmRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Statement: - Effect: Allow Principal: Service: - ec2.amazonaws.com Action: - &#x27;sts:AssumeRole&#x27; Path: / BastionSsmPolicy: Type: AWS::IAM::Policy Properties: PolicyName: ApplianceInstanceAccess PolicyDocument: Statement: - Effect: Allow Action: - ssm:DescribeAssociation - ssm:GetDeployablePatchSnapshotForInstance - ssm:GetDocument - ssm:DescribeDocument - ssm:GetManifest - ssm:GetParameter - ssm:GetParameters - ssm:ListAssociations - ssm:ListInstanceAssociations - ssm:PutInventory - ssm:PutComplianceItems - ssm:PutConfigurePackageResult - ssm:UpdateAssociationStatus - ssm:UpdateInstanceAssociationStatus - ssm:UpdateInstanceInformation Resource: &quot;*&quot; - Effect: Allow Action: - ssmmessages:CreateControlChannel - ssmmessages:CreateDataChannel - ssmmessages:OpenControlChannel - ssmmessages:OpenDataChannel Resource: &quot;*&quot; - Effect: Allow Action: - ec2messages:AcknowledgeMessage - ec2messages:DeleteMessage - ec2messages:FailMessage - ec2messages:GetEndpoint - ec2messages:GetMessages - ec2messages:SendReply Resource: &quot;*&quot; Roles: - !Ref BastionSsmRole BastionSsmProfile: Type: AWS::IAM::InstanceProfile Properties: Path: / Roles: - !Ref BastionSsmRole#=========================================创建VPC、IGW========================================## 创建一SecVpc SecVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.20.0.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: SecVpc# 创建IGW并且关联到VPC SecVpcIGW: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: SecVpcIGW SecVpcAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref SecVpc InternetGatewayId: !Ref SecVpcIGW#---------------------------SecVpc创建4个子网-------------------------------------## SecVpc AZ1内创建GWLB子网 Az1GwlbSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.20.10.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: SecVpc-GWLB1-Subnet# SecVpc AZ2内创建GWLB子网 Az2GwlbSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.20.30.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: SecVpc-GWLB2-Subnet# SecVpc AZ1内创建MGT子网 Az1MgtSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.20.20.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: SecVpc-MGT1-Subnet# SecVpc AZ2内创建MGT子网 Az2MgtSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref SecVpc CidrBlock: 10.20.40.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: SecVpc-MGT2-Subnet#---------------------------SecVpc创建路由表-------------------------------------## SecVpc创建管理网段的路由表 MgtRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: SecVpc-Mgt-route-table# Mgt路由表关联子网 Az1MgtSubnetAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref MgtRouteTable SubnetId: !Ref Az1MgtSubnet Az2MgtSubnetAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref MgtRouteTable SubnetId: !Ref Az2MgtSubnet# SecVpc创建Gwlb的路由表 GwlbRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref SecVpc Tags: - Key: Name Value: SecVpc-Gwlb-route-table# Gwlb路由表关联子网 Az1GwlbSubnetAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref GwlbRouteTable SubnetId: !Ref Az1GwlbSubnet Az2GwlbSubnetAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref GwlbRouteTable SubnetId: !Ref Az2GwlbSubnet# 管理网段添加默认路由去往IGW MgtToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: SecVpcIGW Properties: RouteTableId: !Ref MgtRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref SecVpcIGW#---------------------------SecVpc创建安全组------------------------------------## 在SecVpc内创建一个安全组 SecVpcSg: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SG to test ping VpcId: !Ref SecVpc SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 443 ToPort: 443 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 8443 ToPort: 8443 CidrIp: 0.0.0.0/0 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.20.0.0/16 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.10.0.0/16 - IpProtocol: tcp FromPort: 3389 ToPort: 3389 CidrIp: 0.0.0.0/0 Tags: - Key: Name Value: SecVpcSg#---------------------------SecVpc创建paloalto接口------------------------------------# Pa1MgmtEip: Type: &quot;AWS::EC2::EIP&quot; Properties: Tags: - Key: Name Value: SecVpc-pa1-mgmt-eip Pa1MgmtEni: # 创建PA1管理接口 Type: &quot;AWS::EC2::NetworkInterface&quot; Properties: GroupSet: - Ref: &quot;SecVpcSg&quot; SubnetId: Ref: &quot;Az1MgtSubnet&quot; Tags: - Key: Name Value: SecVpc-pa1-mgmt-eni Pa1MgmtEniAssociation: # 关联公网IP到Mgt弹性接口 Type: AWS::EC2::EIPAssociation DependsOn: PA1 Properties: AllocationId: !GetAtt Pa1MgmtEip.AllocationId # 这里是EIP NetworkInterfaceId: !Ref Pa1MgmtEni Pa1DataEni: # 创建PA1数据接口 Type: &quot;AWS::EC2::NetworkInterface&quot; Properties: GroupSet: - Ref: &quot;SecVpcSg&quot; SubnetId: Ref: &quot;Az1GwlbSubnet&quot; Tags: - Key: Name Value: SecVpc-pa1-data-eni Pa2MgmtEip: Type: &quot;AWS::EC2::EIP&quot; Properties: Tags: - Key: Name Value: SecVpc-pa2-mgmt-eip Pa2MgmtEni: # 创建PA2管理接口 Type: &quot;AWS::EC2::NetworkInterface&quot; Properties: GroupSet: - Ref: &quot;SecVpcSg&quot; SubnetId: Ref: &quot;Az2MgtSubnet&quot; Tags: - Key: Name Value: SecVpc-pa2-mgmt-eni Pa2MgmtEniAssociation: # 关联公网IP到Mgt弹性接口 Type: AWS::EC2::EIPAssociation DependsOn: PA2 Properties: AllocationId: !GetAtt Pa2MgmtEip.AllocationId # 这里是EIP NetworkInterfaceId: !Ref Pa2MgmtEni Pa2DataEni: # 创建PA2数据接口 Type: &quot;AWS::EC2::NetworkInterface&quot; Properties: GroupSet: - Ref: &quot;SecVpcSg&quot; SubnetId: Ref: &quot;Az2GwlbSubnet&quot; Tags: - Key: Name Value: SecVpc-pa2-data-eni#---------------------------SecVpc创建PA实例------------------------------------## PA1 PA1: Type: AWS::EC2::Instance Properties: ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, !Ref PaVmType] KeyName: !Ref MyKeyPair InstanceType: m5.2xlarge NetworkInterfaces: - NetworkInterfaceId: !Ref Pa1DataEni DeviceIndex: 0 - NetworkInterfaceId: !Ref Pa1MgmtEni DeviceIndex: 1 UserData: Fn::Base64: !Sub | mgmt-interface-swap=enable plugin-op-commands=aws-gwlb-inspect:enable Tags: - Key: Name Value: PA-FW1# PA2 PA2: Type: AWS::EC2::Instance Properties: ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, !Ref PaVmType] KeyName: !Ref MyKeyPair InstanceType: m5.2xlarge NetworkInterfaces: - NetworkInterfaceId: !Ref Pa2DataEni DeviceIndex: 0 - NetworkInterfaceId: !Ref Pa2MgmtEni DeviceIndex: 1 UserData: Fn::Base64: !Sub | mgmt-interface-swap=enable plugin-op-commands=aws-gwlb-inspect:enable Tags: - Key: Name Value: PA-FW2#---------------------------创建GWLB------------------------------------# Gwlb: Type: AWS::ElasticLoadBalancingV2::LoadBalancer Properties: LoadBalancerAttributes: - Key: load_balancing.cross_zone.enabled Value: true Name: PA-GWLB Type: gateway Subnets: - !Ref Az1GwlbSubnet - !Ref Az2GwlbSubnet Tags: - Key: Name Value: SecVpc-pa-gwlb TargetGroup: Type: AWS::ElasticLoadBalancingV2::TargetGroup Properties: HealthCheckIntervalSeconds: 5 Name: PA-Target Port: 6081 Protocol: GENEVE TargetGroupAttributes: - Key: deregistration_delay.timeout_seconds Value: 20 VpcId: !Ref SecVpc HealthCheckPort: 80 HealthCheckProtocol: HTTP TargetType: instance Targets: - Id: !Ref PA1 - Id: !Ref PA2 Tags: - Key: Name Value: !Sub &quot;$&#123;AWS::StackName&#125;-gwlbtg&quot; Listener: Type: AWS::ElasticLoadBalancingV2::Listener Properties: DefaultActions: - Type: forward TargetGroupArn: !Ref TargetGroup LoadBalancerArn: !Ref Gwlb#---------------------------创建Endpoint Service------------------------------------# VpcEndpointService: Type: AWS::EC2::VPCEndpointService Properties: GatewayLoadBalancerArns: - !Ref Gwlb AcceptanceRequired: false# Create Lambda Custom Resource to retrieve VPC Endpoint Service Name: VpceServiceLambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Principal: Service: - lambda.amazonaws.com Action: - sts:AssumeRole Path: / Policies: - PolicyName: root PolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Action: - logs:CreateLogStream - logs:PutLogEvents Resource: arn:aws:logs:*:*:* - Effect: Allow Action: - ec2:DescribeVpcEndpointServiceConfigurations - ec2:DescribeVpcEndpointServicePermissions - ec2:DescribeVpcEndpointServices Resource: &quot;*&quot; # Lambda creates CloudWatch Log Group. # Since CF stack didn&#x27;t explicitly create the Log Group, Log Group doesn&#x27;t get deleted when stack is deleted. # Hence creating Log Group though the stack for Lambda specific funciton. # Their are few things to consider. For more details refer to: https://github.com/aws/serverless-application-model/issues/1216 VpceServiceLogGroup: Type: AWS::Logs::LogGroup Properties: LogGroupName: !Sub /aws/lambda/$&#123;AWS::StackName&#125;-service RetentionInDays: 1 VpceServiceName: Type: AWS::Lambda::Function DependsOn: VpceServiceLogGroup Properties: FunctionName: !Sub $&#123;AWS::StackName&#125;-service Handler: &quot;index.handler&quot; Role: !GetAtt VpceServiceLambdaExecutionRole.Arn Code: ZipFile: | import json import logging import time import boto3 import cfnresponse from botocore.exceptions import ClientError try: ec2 = boto3.client(&#x27;ec2&#x27;) except ClientError as e: logger.error(f&quot;ERROR: failed to connect to EC2 client: &#123;e&#125;&quot;) sys.exit(1) def handler(event, context): logger = logging.getLogger() logger.setLevel(logging.INFO) logger.info(&#x27;Received event: &#123;&#125;&#x27;.format(json.dumps(event))) responseData = &#123;&#125; responseStatus = cfnresponse.FAILED try: serviceid = event[&quot;ResourceProperties&quot;][&quot;VpceServiceId&quot;] except Exception as e: logger.info(&#x27;Attribute retrival failure: &#123;&#125;&#x27;.format(e)) try: if event[&quot;RequestType&quot;] == &quot;Delete&quot;: responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) except Exception: logger.exception(&quot;Signaling failure to CloudFormation.&quot;) cfnresponse.send(event, context, cfnresponse.FAILED, &#123;&#125;) if event[&quot;RequestType&quot;] == &quot;Create&quot;: logger.info(&quot;Retrieving VPC Endpoint Service Name:&quot;) try: response = ec2.describe_vpc_endpoint_service_configurations( Filters=[ &#123; &#x27;Name&#x27;: &#x27;service-id&#x27;, &#x27;Values&#x27;: [serviceid] &#125; ] ) except Exception as e: logger.info(&#x27;ec2.describe_vpc_endpoint_service_configurations failure: &#123;&#125;&#x27;.format(e)) service_name = response[&#x27;ServiceConfigurations&#x27;][0][&#x27;ServiceName&#x27;] time.sleep(120) responseData[&#x27;ServiceName&#x27;] = service_name responseStatus = cfnresponse.SUCCESS cfnresponse.send(event, context, responseStatus, responseData) Runtime: python3.7 Timeout: 150 RetrieveVpceServiceName: Type: Custom::RetrieveAttributes Properties: ServiceToken: !GetAtt VpceServiceName.Arn VpceServiceId: !Ref VpcEndpointService App1Endpoint: Type: AWS::EC2::VPCEndpoint Properties: VpcId: !Ref AppVpc ServiceName: !GetAtt RetrieveVpceServiceName.ServiceName VpcEndpointType: GatewayLoadBalancer SubnetIds: - !Ref Gwlbe1Subnet App2Endpoint: Type: AWS::EC2::VPCEndpoint Properties: VpcId: !Ref AppVpc ServiceName: !GetAtt RetrieveVpceServiceName.ServiceName VpcEndpointType: GatewayLoadBalancer SubnetIds: - !Ref Gwlbe2Subnet#==============================创建App VPC、IGW==============================## 创建一APP VPC AppVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.10.0.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: AppVpc# 创建IGW并且关联到VPC AppVpcIGW: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: AppVpc-IGW AppVpcAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref AppVpc InternetGatewayId: !Ref AppVpcIGW#---------------------------AppVpc创建4个子网-------------------------------------## AppVpc创建GWLBe1子网 Gwlbe1Subnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref AppVpc CidrBlock: 10.10.10.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: AppVpc-GWLBe1-Subnet# AppVpc创建App1子网 App1Subnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref AppVpc CidrBlock: 10.10.20.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: AppVpc-App1-Subnet# AppVpc创建GWLBe1子网 Gwlbe2Subnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref AppVpc CidrBlock: 10.10.30.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: AppVpc-GWLBe2-Subnet# AppVpc创建App1子网 App2Subnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref AppVpc CidrBlock: 10.10.40.0/24 AvailabilityZone: Fn::Select: - 1 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: AppVpc-App2-Subnet#---------------------------AppVpc创建4个路由表-------------------------------------##---------------IGW路由---------------## AppVpc创建IGW的路由表 IgwIngressRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref AppVpc Tags: - Key: Name Value: AppVpc-Igw-Ingress-route-table# IgwIngress路由表关联IGW IgwIngressAssociation: Type: &quot;AWS::EC2::GatewayRouteTableAssociation&quot; Properties: RouteTableId: !Ref IgwIngressRouteTable GatewayId: !Ref AppVpcIGW# IgwIngress去往App网段的路由 IgwIngressToApp1: Type: &quot;AWS::EC2::Route&quot; DependsOn: App1Endpoint Properties: RouteTableId: !Ref IgwIngressRouteTable DestinationCidrBlock: 10.10.20.0/24 VpcEndpointId: !Ref App1Endpoint IgwIngressToApp2: Type: &quot;AWS::EC2::Route&quot; DependsOn: App2Endpoint Properties: RouteTableId: !Ref IgwIngressRouteTable DestinationCidrBlock: 10.10.40.0/24 VpcEndpointId: !Ref App2Endpoint#---------------GWLBe路由---------------## AppVpc创建Gwlbe的路由表 GwlbeRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref AppVpc Tags: - Key: Name Value: AppVpc-Gwlbe-route-table# Gwlbe路由表关联子网 GwlbeRouteTableAz1Association: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref GwlbeRouteTable SubnetId: !Ref Gwlbe1Subnet GwlbeRouteTableAz2Association: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref GwlbeRouteTable SubnetId: !Ref Gwlbe2Subnet# 管理网段添加默认路由去往IGW GwlbeToInternetRoute: Type: &quot;AWS::EC2::Route&quot; DependsOn: AppVpcIGW Properties: RouteTableId: !Ref GwlbeRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref AppVpcIGW#---------------App路由---------------## AppVpc创建App1的路由表 App1RouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref AppVpc Tags: - Key: Name Value: AppVpc-App1-route-table# App1路由表关联子网 App1RouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref App1RouteTable SubnetId: !Ref App1Subnet# App1网段添加默认路由去往Endpoint App1ToEndpoint: Type: &quot;AWS::EC2::Route&quot; DependsOn: App1Endpoint Properties: RouteTableId: !Ref App1RouteTable DestinationCidrBlock: 0.0.0.0/0 VpcEndpointId: !Ref App1Endpoint# AppVpc创建App2的路由表 App2RouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref AppVpc Tags: - Key: Name Value: AppVpc-App2-route-table# App2路由表关联子网 App2RouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref App2RouteTable SubnetId: !Ref App2Subnet# App2网段添加默认路由去往Endpoint App2ToEndpoint: Type: &quot;AWS::EC2::Route&quot; DependsOn: App1Endpoint Properties: RouteTableId: !Ref App2RouteTable DestinationCidrBlock: 0.0.0.0/0 VpcEndpointId: !Ref App2Endpoint#---------------------------AppVpc创建安全组------------------------------------## 在SEC VPC内创建一个安全组 AppVpcSg: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SG to test ping VpcId: !Ref AppVpc SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 8443 ToPort: 8443 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 443 ToPort: 443 CidrIp: 0.0.0.0/0 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.20.0.0/16 - IpProtocol: -1 FromPort: -1 ToPort: -1 CidrIp: 10.10.0.0/16 - IpProtocol: tcp FromPort: 3389 ToPort: 3389 CidrIp: 0.0.0.0/0 Tags: - Key: Name Value: AppVpcSg#---------------------------AppVpc创建EC2实例------------------------------------## App1 App1: Type: AWS::EC2::Instance Properties: IamInstanceProfile: !Ref BastionSsmProfile ImageId: !Ref EC2InstanceAmiId KeyName: !Ref MyKeyPair InstanceType: t2.micro NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: AppVpcSg SubnetId: !Ref App1Subnet Tags: - Key: Name Value: App1-Linux# App2 Windows AMI App2: Type: AWS::EC2::Instance Properties: ImageId: ami-09e5001ad68a3ec91 #Tokyo ami-09e5001ad68a3ec91 KeyName: !Ref MyKeyPair InstanceType: t2.xlarge NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: AppVpcSg SubnetId: !Ref App2Subnet Tags: - Key: Name Value: App2-Windows UserData: Fn::Base64: !Sub | &lt;powershell&gt; $PASSWORD= ConvertTo-SecureString –AsPlainText -Force -String LIYJMSgaliu1qiang2long3windemoZJ2vG5 New-LocalUser -Name &quot;labuser&quot; -Description &quot;rdp user&quot; -Password $Password Add-LocalGroupMember -Group &#x27;Administrators&#x27; -Member &#x27;labuser&#x27; net localgroup &quot;Remote Desktop Users&quot; /add labuser $file = &quot;C:\\&quot; + (Get-Date).ToString(&quot;MM-dd-yy-hh-mm&quot;) New-Item $file -ItemType file &lt;/powershell&gt; 二、命令行配置 paloaltoAWS上paloalto其实可以做成开机自动加载配置，关键词是Bootstrap the VM-Series Firewall on AWS[参见链接1]。原理大致是将相关的文件到放在S3桶内，在paloalto EC2的User Data里面指定S3的路径来加载这些文件。视频演示可以[参见链接2]。 这里使用CloudFormation做成全自动需要写的代码挺多，但是实际场景并不多，所以这里我并不进一步往下研究了。 通过SSH登录paloalto修改admin密码。 1234567891011121314151617Welcome admin.admin@PA-VM&gt; configureEntering configuration mode[edit]admin@PA-VM# set mgt-config users admin passwordEnter password :Confirm password :[edit]admin@PA-VM# commitCommit job 2 is in progress. Use Ctrl+C to return to command prompt.........55%75%98%..............100%Configuration committed successfully[edit]admin@PA-VM# 将下面的命令刷到PA FW1和FW2上。 1234567891011121314151617181920212223242526272829303132set network profiles interface-management-profile MgtProfile http yesset network profiles interface-management-profile MgtProfile ssh yesset network profiles interface-management-profile MgtProfile ping yesset network interface ethernet ethernet1&#x2F;1 layer3 ndp-proxy enabled noset network interface ethernet ethernet1&#x2F;1 layer3 sdwan-link-settings upstream-nat enable noset network interface ethernet ethernet1&#x2F;1 layer3 sdwan-link-settings upstream-nat static-ipset network interface ethernet ethernet1&#x2F;1 layer3 sdwan-link-settings enable noset network interface ethernet ethernet1&#x2F;1 layer3 interface-management-profile MgtProfileset network interface ethernet ethernet1&#x2F;1 layer3 lldp enable noset network interface ethernet ethernet1&#x2F;1 layer3 dhcp-clientset network virtual-router default interface ethernet1&#x2F;1set zone untrust network layer3 ethernet1&#x2F;1set rulebase default-security-rules rules intrazone-default action allowset rulebase default-security-rules rules intrazone-default log-start yesset rulebase default-security-rules rules intrazone-default log-end yesset rulebase default-security-rules rules intrazone-default profile-setting profiles url-filtering defaultset rulebase default-security-rules rules intrazone-default profile-setting profiles file-blocking &quot;strict file blocking&quot;set rulebase default-security-rules rules intrazone-default profile-setting profiles virus defaultset rulebase default-security-rules rules intrazone-default profile-setting profiles spyware strictset rulebase default-security-rules rules intrazone-default profile-setting profiles vulnerability strictset rulebase default-security-rules rules intrazone-default profile-setting profiles wildfire-analysis defaultcommitCommit job 3 is in progress. Use Ctrl+C to return to command prompt.........55%70%98%.............100%Configuration committed successfullyWarning: No valid Antivirus content package exists(Module: device) 三、测试3.1 App1 HTTP访问测试通过SSH连接到App1上，安装HTTP服务，修改端口为8443。 12345yum install -y httpdsed -i.bak &#39;s&#x2F;Listen 80&#x2F;Listen 8443&#x2F;g&#39; &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.confecho &quot;&lt;h2&gt;Hello World from $(hostname -f)&lt;&#x2F;h2&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.htmlsystemctl start httpd.servicesystemctl enable httpd.service 访问EC2的公网8443端口测试，在浏览器界面可以使用CTRL+F5多强制刷新几次。 查看PA-FW1上的日志。 查看PA-FW2上的日志。 3.2 App2 RDP连接测试通过RDP连接到App2上，可以通过浏览器访问一些网页制造流量。 查看PA-FW1上的日志。 查看PA-FW2上的日志。 四、参考链接 [1] Bootstrap the VM-Series Firewall on AWS：https://docs.paloaltonetworks.com/vm-series/9-1/vm-series-deployment/bootstrap-the-vm-series-firewall/bootstrap-the-vm-series-firewall-in-aws [2] Bootstrapping the VM-Series on AWS：https://www.youtube.com/watch?v=v4HIvytbVU8","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"CloudFormation","slug":"CloudFormation","permalink":"https://liuqianglong.com/tags/CloudFormation/"},{"name":"AWS Gateway Load Balancer","slug":"AWS-Gateway-Load-Balancer","permalink":"https://liuqianglong.com/tags/AWS-Gateway-Load-Balancer/"},{"name":"Paloalto","slug":"Paloalto","permalink":"https://liuqianglong.com/tags/Paloalto/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"AWS VPC 流量集中检测系列--(1)AWS GWLB集成paloalto防火墙","slug":"AWS-VPC-流量集中检测系列-1-AWS-GWLB集成paloalto防火墙","date":"2022-10-13T23:00:00.000Z","updated":"2022-11-23T14:40:37.313Z","comments":true,"path":"AWS-VPC-流量集中检测系列-1-AWS-GWLB集成paloalto防火墙.html","link":"","permalink":"https://liuqianglong.com/AWS-VPC-%E6%B5%81%E9%87%8F%E9%9B%86%E4%B8%AD%E6%A3%80%E6%B5%8B%E7%B3%BB%E5%88%97-1-AWS-GWLB%E9%9B%86%E6%88%90paloalto%E9%98%B2%E7%81%AB%E5%A2%99.html","excerpt":"","text":"B站视频链接：https://www.bilibili.com/video/BV13m4y1P72M/微信公众号：自刘地 一、背景1.1 参考的博客这个文档是我的笔记，最开始是对着AWS官方博客[参见链接1]来做实验的，发现无论如何都无法实验成功，后来发现博客里面一个重要参数写错了导致异常。坑出现在原博客[3.2.1 创建PA防火墙实例]，里面写到plugin-op-commands=Amazon-gwlb-inspect:enable，应该将Amazon修改为aws，即plugin-op-commands=aws-gwlb-inspect:enable。 测试完paloalto之后，我想测试FortiGate防火墙，飞塔是对这个AWS官方博客[参见链接2]来做实验的，两个拓扑基本一致，只是替换了防火墙，但是发现这篇博客更坑，关键步骤有缺失，无法实现防火墙的高可用切换。后续我会在相同的拓扑下，使用FortiGate防火墙来测试，会填上博客缺失步骤的坑。 这次实验是在AWS Console上操作的，后续我会演示AWS CloudFormation来部署这个环境。 1.2 流量集中检测传统网络都会在出口部署防火墙，用于检测内网进出互联网的流量。到了AWS云上，这个需求并不太容易实现，因为每个VPC都可以认为是一个独立的网络，有独立的出口。但是对AWS云上的南北向（VPC访问互联网）和东西向（VPC互访）流量做集中检测一直都是比较常见的需求。 流量集中检测架构的核心主要是两个点，一是如何将流量引导到防火墙上，二是防火墙如何实现高可用。 以前常见方法是通过AWS Lambda函数来修改路由表，从而切换流量，并且实现防火墙的高可用。这种方案扩展性不好，而且不太容易实施。 AWS Gateway Load Balancer（GWLB）的出现很好的解决了上面两个问题。AWS PrivateLink提供了新的VPC终端节点GWLB endpoint（GWLBe），它可以做为下一跳路由节点，解决了流量引导的问题。GWLB在防火墙的前面做负载均衡，解决了防火墙高可用的问题。另外关于流量引导，也可结合Transit Gateway来进行引流，可以实现更具扩展性的架构。 二、实验介绍这里AppVpc模拟业务的VPC，APP进出互联网的流量会被引导到SecVpc内的防火墙做安全检测，防火墙允许通过后，流量才能正常通信。 这次实验的核心组件： GWLB：Gateway Load Balancer与防火墙建立GENEVE[参见链接3]隧道，使用UDP 6081来转发数据，这种封装方式让防火墙不用关闭源/目的地址检查，也不用做源/目的NAT的转换。GWLB会在子网创建一个弹性接口，流量通过这个弹性接口来转发。 GWLBe：Gateway Load Balancer endpoint 是由AWS PrivateLink提供的VPC终端节点，可以作为路由表中的下一跳存在，流量送到GWLBe后，会继续送往GWLB背后的实例。 Ingress Route Table：这个路由表关联在IGW上，路由表一般都是关联在子网，这里是AWS 2019年发布的一个功能VPC Ingress Routing[参见链接4]，让路由表可以关联到IGW上，用于控制入向的流量。 APP访问互联网流量路径（红色箭头） AppVpc内的APP1想要访问Internet上的资源，所在子网关联的路由表将默认路由指向了GWLB Endpoint1。 GWLB Endpoint1 使用 AWS PrivateLink 将流量送到到GWLB，这里流量是由AWS来控制，无需用户配置。 GWLB会使用IP数据包的5元组或者3元组哈希来选择实例。GWLB使用GENEVE来封装原始IP流量，并通过UDP 6081发送到防火墙。GENEVE封装可以将所有的IP流量送到实例上，GWLB的侦听组上不需要为每个协议和端口配置侦听器。 当 GWLB 接收到新的 TCP/UDP 流时，它会使用 5 元组流哈希（源 IP、目标 IP、传输协议、源端口、目标端口）从目标组中选择一个健康的设备。随后，GWLB 将该流的所有数据包（正向和反向）路由到同一设备（粘性）。对于非 TCP/UDP 流，GWLB 仍然使用 3 元组（源 IP、目标 IP、传输协议）进行转发决策。 防火墙收到GENEVE报文，需要解封装流量，然后根据防火墙的安全策略决定是否允许流量通过。 防火墙重新使用GENEVE封装流量，并发送到GWLB。 GWLB根据 GENEVE TLV字段，选择转发到GWLB Endpoint1，并且发送时会去除GENEVE封装。 为了支持具有重叠 CIDR 的多租户设备，设备需要知道流量的来源。GWLB 还需要跟踪流量并避免用户流量的混合。GWLB 可以通过将每个数据包的类型-长度-值 (TLV) 三元组发送到设备的额外信息（例如 GWLBE/VPCE ID、附件 ID、流 Cookie）来实现这一点。 GWLB Endpoint1接受到流量，查看子网关联路由表，默认路由指向IGW，流量通过IGW访问Internet。 互联网访问APP的流量路径（蓝色箭头） 客户发起对App1公网地址的访问，流量到达AppVpc的IGW，IGW查看所关联的路由表，将流量送往GWLB Endpoint1。 GWLB Endpoint1 使用 AWS PrivateLink 将流量送到到GWLB。 GWLB使用GENEVE来封装原始IP流量，并通过UDP 6081转发到实例。 防火墙收到GENEVE报文，需要解封装流量，然后根据防火墙的安全策略决定是否允许流量通过。 防火墙重新使用GENEVE封装流量，并发送到GWLB。 GWLB根据 GENEVE TLV字段，选择转发到GWLB Endpoint1，并去除GENEVE封装。 GWLB Endpoint1接受到流量，查看子网关联路由表，匹配到local路由，流量送到APP1。 三、 配置部署3.1 VPC 配置3.1.1 创建VPC创建两个VPC 123VPC名称 网段AppVpc 10.10.0.0&#x2F;16SecVpc 10.20.0.0&#x2F;16 3.1.2 创建IGW关联VPC创建两个IGW，分别关联上VPC 3.1.3 创建子网AppVpc 创建4个子网 12345子网名称 网段 备注AppVpc-GWLBe1-Subnet 10.10.10.0&#x2F;24 AZ1 的Gateway Load Balancer Endpoint所在子网AppVpc-App1-Subnet 10.10.20.0&#x2F;24 AZ1 App1 所在子网AppVpc-GWLBe2-Subnet 10.10.30.0&#x2F;24 AZ2 的Gateway Load Balancer Endpoint所在子网AppVpc-App2-Subnet 10.10.40.0&#x2F;24 AZ2 App2 所在子网 SecVpc 创建4个子网 12345子网名称 网段 备注SecVpc-GWLB1-Subnet 10.20.10.0&#x2F;24 AZ1 paloalto 数据接口所在子网，GWLB的接口也在此子网SecVpc-MGT1-Subnet 10.20.20.0&#x2F;24 AZ1 paloalto 的管理接口所在子网，可以通过互联网直接访问SecVpc-GWLB2-Subnet 10.20.30.0&#x2F;24 AZ2 paloalto 数据接口所在子网，GWLB的接口也在此子网SecVpc-MGT2-Subnet 10.20.40.0&#x2F;24 AZ2 paloalto 的管理接口所在子网，可以通过互联网直接访问 3.1.4 创建路由表这里创建路由表之后，暂时先不修改路由，因为有些路由的下一跳是Endpoint，需要等Endpoint创建完成后再修改路由表。 AppVpc创建4个路由表 12345路由表名称 备注AppVpc-Igw-Ingress-route-table 这个路由表关联AppVpcIGW，不关联子网，用于将入向流量引导到endpoint AppVpc-Gwlbe-route-table 这个路由表关联两个GWLBe所在的子网，用于将流量从IGW出去AppVpc-App1-route-table 这是AZ1 App的路由表，默认路由指向AZ1的endpointAppVpc-App2-route-table 这是AZ2 App的路由表，默认路由指向AZ2的endpoint AppVpc-Igw-Ingress-route-table关联IGW。路由表一般都是关联子网，这里是AWS 2019年发布的一个功能VPC Ingress Routing，让路由表可以关联到IGW上，用于控制入向的流量。 AppVpc-Gwlbe-route-table关联两个GWLBe子网 AppVpc-App1-route-table关联AZ1的APP AppVpc-App1-route-table关联AZ2的APP SecVpc创建1个路由表 12路由表名称 备注SecVpc-Mgt-route-table 默认路由指向IGW，用于互联网访问防火墙的管理接口 SecVpc-Mgt-route-table关联两个管理子网。防火墙的数据接口不需要单独的路由表，因为数据接口主要是和GWLB通过GENVEN隧道通信，当然为数据接口网段单独创建一个路由表也可以，不用添加任何特殊路由。 管理网络的默认路由指向IGW，为了之后从公网连接到防火墙进行初始化。其他路由之后再设置。 3.2 创建实例3.2.1 创建paloalto实例在Marketplace搜索paloalto关键词，选择VM-Series Next-Generation Firewall Bundle 2AMI。 设置实例名称，保持默认建议的实例大小。 实例放置到SecVpc，防火墙的数据接口作为主网卡，放置在SecVpc-GWLB1-Subnet子网。可以使用系统创建的安全组，另外放行了TCP 80，用于侦听组的健康监测，放行GENEVE协议使用的UDP 6081。 再添加一块网卡，用于防火墙的带外管理，放置在SecVpc-MGT1-Subnet子网。 这里非常关键，源博客就是坑在了这里，在安装aws-gwlb插件是写错了关键词导致插件无法正常安装。这里两条命令的详细含义可以[参见链接5]。 mgmt-interface-swap=enable用于切换防火墙的网卡的映射关系。 默认情况下，AWS 上的ENI eth0映射到paloalto防火墙上的MGT接口，也就是主网卡是管理接口，而ENI eth1映射到paloalto防火墙上的ethernet1/1接口。 AWS 负载均衡器可以选择实例或者IP地址作为目标发送流量，如果选择实例作为目标（默认），流量会发送到实例的主接口。 官方文档建议数据口作为防火墙的主接口，所以需要在防火墙内部修改一下接口的映射关系，将AWS eth0映射为数据接口，AWS eth1映射为管理接口。 plugin-op-commands=aws-gwlb-inspect:enable防火墙安装插件，用于处理GWLB的流量。 防火墙启动后，可以使用show plugins vm_series aws gwlb查看插件的安装情况。如果没有安装成功，可以使用request plugins vm_series aws gwlb inspect enable yes命令手动再安装一次。 12mgmt-interface-swap&#x3D;enableplugin-op-commands&#x3D;aws-gwlb-inspect:enable 申请两个EIP，用于关联防火墙的管理接口，这样可以通过互联网管理防火墙。 关联防火墙的管理接口，注意不要关联成数据接口了。 PA-FW2也是相同的步骤关联EIP。 3.2.2 创建APP实例创建App1，主要用于后续搭建一个HTTP服务，从公网访问测试，这里使用Amazon Linux AMI，保持默认的实例大小即可。 实例放置在AppVpc-App1-Subnet子网，开启自动分配公网IP，安全组放行TCP 8843，后续的HTTP使用8443端口。 创建App2实例，这里使用Window AMI，为了启动速度快一些，这里使用了t3.large的实例类型。App2实例可以用于从公网RDP测试，也可以做为客户端使用浏览器测试互联网访问流量监测。 实例放置在AppVpc-App2-Subnet子网，允许自动获取公网IP地址，安全组保持默认放行3389即可。 3.3 配置paloalto3.3.1 paloalto修改默认密码在AWS上启用Paloalto，需要先SSH登录到防火墙，设置密码，然后才能使用HTTPS登录管理。 使用用户名admin结合密钥的方式登录防火墙，然后按照下面命令修改admin的密码，最后需要commit提交。两台防火墙均按照这个方法重置密码。 1234567891011121314151617Welcome admin.admin@PA-VM&gt; configureEntering configuration mode[edit]admin@PA-VM# set mgt-config users admin passwordEnter password :Confirm password :[edit]admin@PA-VM# commitCommit job 2 is in progress. Use Ctrl+C to return to command prompt.........55%75%98%..............100%Configuration committed successfully[edit]admin@PA-VM# 3.3.2 图形化界面配置PA-FW1使用HTTPS登录防火墙的管理地址。 设置数据接口的虚拟路由器，这里新建一个安全区域为”untrust”。新建的过程省略了。 接口通过DHCP获取地址。 设置数据接口的管理配置文件，主要是管理接口开启的服务。 开启HTTP、SSH、Ping服务，这个服务是用于后续侦听组探测实例是否存活用的。 接口关联创建的配置文件。 因为流量都是从相同的接口进出，这里为了方便，直接修改默认的intrazone-default安全策略。 开启日志，并按照下图配置安全防护策略。 提交配置后上面的操作才会生效。 3.3.3 命令行配置PA-FW2图形化的配置方式虽然直观，但效率实在太低，截图也比较冗长。所以第二台防火墙我通过命令行的方式来配置。通过下面命令，paloalto可以实现类似思科show run的操作来查看配置。 123admin@PA-VM&gt; set cli config-output-format setadmin@PA-VM&gt; configureadmin@PA-VM# show 将下面的命令刷到PA-FW2上，和上面图形化配置相同。 1234567891011121314151617181920212223242526272829303132set network profiles interface-management-profile MgtProfile http yesset network profiles interface-management-profile MgtProfile ssh yesset network profiles interface-management-profile MgtProfile ping yesset network interface ethernet ethernet1&#x2F;1 layer3 ndp-proxy enabled noset network interface ethernet ethernet1&#x2F;1 layer3 sdwan-link-settings upstream-nat enable noset network interface ethernet ethernet1&#x2F;1 layer3 sdwan-link-settings upstream-nat static-ipset network interface ethernet ethernet1&#x2F;1 layer3 sdwan-link-settings enable noset network interface ethernet ethernet1&#x2F;1 layer3 interface-management-profile MgtProfileset network interface ethernet ethernet1&#x2F;1 layer3 lldp enable noset network interface ethernet ethernet1&#x2F;1 layer3 dhcp-clientset network virtual-router default interface ethernet1&#x2F;1set zone untrust network layer3 ethernet1&#x2F;1set rulebase default-security-rules rules intrazone-default action allowset rulebase default-security-rules rules intrazone-default log-start yesset rulebase default-security-rules rules intrazone-default log-end yesset rulebase default-security-rules rules intrazone-default profile-setting profiles url-filtering defaultset rulebase default-security-rules rules intrazone-default profile-setting profiles file-blocking &quot;strict file blocking&quot;set rulebase default-security-rules rules intrazone-default profile-setting profiles virus defaultset rulebase default-security-rules rules intrazone-default profile-setting profiles spyware strictset rulebase default-security-rules rules intrazone-default profile-setting profiles vulnerability strictset rulebase default-security-rules rules intrazone-default profile-setting profiles wildfire-analysis defaultcommitCommit job 3 is in progress. Use Ctrl+C to return to command prompt.........55%70%98%.............100%Configuration committed successfullyWarning: No valid Antivirus content package exists(Module: device) 3.4 创建GWLB并关联paloalto创建Gateway Load Balancer 指定两台防火墙数据接口所在的子网，GWLB会在这两个子网创建两个弹性接口，GENEVE流量实际从这个弹性接口转发。这里创建侦听组。 实例类型的target会侦听实例的主网卡，因为防火墙的主网卡就是数据接口，所以可以使用Instances类型的target。如果要侦听非主网卡，那只能使用IP地址了。 实验环境可以加快监控检测探测的频率。 将两台防火墙注册到侦听组上。 回到创建GWLB的界面，调用刚才创建的侦听组。 确认防火墙的健康检查正常。 启用GWLB的跨区域负载均衡。 3.5 创建Endpoint Service及Endpoint创建Endpoint Service关联GWLB，测试环境取消勾选Acceptance required，这样当Endpoint发起连接时，不需要再手动确认一次。 记录Endpoint Service name。 创建endpoint，填写刚才记录的Endpoint Service name，放置到AppVpc-GWLBe1-Subnet子网。 继续创建endpoint，放置到AppVpc-GWLBe2-Subnet子网。 查看创建的两个endpoint，记录endpoint ID，后续修改路由表需要用到。 3.6 修改路由表修改IGW关联的路由表，控制去往App网段的流量分别送到两个endpoint上去。 修改App1所在子网的路由，默认路由指向Endpoint1。 修改App2所在子网的路由，默认路由指向Endpoint2。 修改endpoint所在子网的路由，默认路由指向IGW。 四、访问测试4.1 App1 HTTP访问测试通过SSH连接到App1上，安装HTTP服务，修改端口为8443。 12345yum install -y httpdsed -i.bak &#39;s&#x2F;Listen 80&#x2F;Listen 8443&#x2F;g&#39; &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.confecho &quot;&lt;h2&gt;Hello World from $(hostname -f)&lt;&#x2F;h2&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.htmlsystemctl start httpd.servicesystemctl enable httpd.service 访问EC2的公网8443端口测试，在浏览器界面可以使用CTRL+F5多强制刷新几次。 查看PA-FW1上的日志。 查看PA-FW2上的日志。 4.2 App2 RDP连接测试通过RDP连接到App2上，可以通过浏览器访问一些网页制造流量。 查看PA-FW1上的日志。 查看PA-FW2上的日志。 五、清理实验环境步骤到上面其实实验已经做完了，既然是实验，肯定是需要清空实验环境的。这个实验有一些依赖调用，有时候不太好删除，另外如果漏删除了EIP和卷，还会持续产生费用。 按照下面步骤可以彻底清空前面所有操作创建的资源，不会有依赖报错。 12345678910111. 终止所有实例。2. 解除AppVpc的4个路由表关联的子网和IGW。3. 删除AppVpc的4个路由表。4. 删除2个Endpoint。5. 删除Endpoint Service。6. 删除AppVpc。7. 删除GWLB。8. 删除SecVpc。9. 删除Target Group。10. 释放申请的2个EIP。11. 删除未清空的EC2卷。 六、参考文档 [1] 使用Gateway Load Balancer和Palo alto防火墙实现集中的网络流量深度检测：https://aws.amazon.com/cn/blogs/china/centralized-network-traffic-depth-detection-using-gateway-load-balancer-and-palo-alto-firewalls/ [2] 亚马逊云科技(中国区)网关负载均衡服务集成FortiGate安全网关扩展安全服务性能：https://aws.amazon.com/cn/blogs/china/gateway-load-balancing-services-integrate-fortigate-security-gateways/ [3] RFC 8926 Geneve: Generic Network Virtualization Encapsulation：https://www.rfc-editor.org/rfc/rfc8926 [4] New – VPC Ingress Routing – Simplifying Integration of Third-Party Appliances：https://aws.amazon.com/cn/blogs/aws/new-vpc-ingress-routing-simplifying-integration-of-third-party-appliances [5] Management Interface Mapping for Use with Amazon ELB：https://docs.paloaltonetworks.com/vm-series/10-2/vm-series-deployment/set-up-the-vm-series-firewall-on-aws/about-the-vm-series-firewall-on-aws/management-interface-mapping-for-use-with-amazon-elb#id7e1c2653-88af-4a85-8bb8-aae1847c0d9f paloalto Viewing the configuration in set and XML format：https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClHoCAK Integrate your custom logic or appliance with AWS Gateway Load Balancer：https://aws.amazon.com/cn/blogs/networking-and-content-delivery/integrate-your-custom-logic-or-appliance-with-aws-gateway-load-balancer/ Introducing AWS Gateway Load Balancer – Easy Deployment, Scalability, and High Availability for Partner Appliances：https://aws.amazon.com/cn/blogs/aws/introducing-aws-gateway-load-balancer-easy-deployment-scalability-and-high-availability-for-partner-appliances/ GeneveProxy - an AWS Gateway Load Balancer reference application：https://www.sentiatechblog.com/geneveproxy-an-aws-gateway-load-balancer-reference-application","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"CloudFormation","slug":"CloudFormation","permalink":"https://liuqianglong.com/tags/CloudFormation/"},{"name":"AWS Gateway Load Balancer","slug":"AWS-Gateway-Load-Balancer","permalink":"https://liuqianglong.com/tags/AWS-Gateway-Load-Balancer/"},{"name":"Paloalto","slug":"Paloalto","permalink":"https://liuqianglong.com/tags/Paloalto/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"AWS CloudFormation 系列--(3)Python操作CloudFormation","slug":"CloudFormation从入门到进阶-3-Python操作CloudFormation","date":"2022-10-12T14:32:00.000Z","updated":"2022-11-23T14:23:11.702Z","comments":true,"path":"CloudFormation从入门到进阶-3-Python操作CloudFormation.html","link":"","permalink":"https://liuqianglong.com/CloudFormation%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6-3-Python%E6%93%8D%E4%BD%9CCloudFormation.html","excerpt":"","text":"B站视频链接：https://www.bilibili.com/video/BV1FG411773k/微信公众号：自刘地 前面两篇已经对CloudFormation做了快速入门和进阶的学习，但是在创建堆栈的时候，还是在AWS控制台界面导入文本文件。这个文章的目的是介绍如何使用Python来操作CloudFormation，进一步的实现自动化操作。 一、AWS 凭证(Credentials)1.1、凭证介绍客户端必须拥有凭证[参考链接1]才能对AWS API进行操作，可以通过多种方式来配置凭证。配置凭证的最佳实践是，如果你在EC2上运行代码，建议使用IAM角色。如果你是用AWS开发工具包（例如Python），建议使用共享凭证文件。后面代码都是使用的共享凭证文件。 Boto3 将在搜索凭证时查找多个位置。Boto3 查找凭据的机制是搜索可能位置的列表，并在找到凭据后立即停止。Boto3 搜索凭据的顺序参考： 123456781.在boto.client()方法中将凭证作为参数传递2.创建Session对象时将凭证作为参数传递3.环境变量4.共享凭证文件 ( ~&#x2F;.aws&#x2F;credentials )5.AWS 配置文件 ( ~&#x2F;.aws&#x2F;config )6.担任角色提供者7.Boto2 配置文件（&#x2F;etc&#x2F;boto.cfg和~&#x2F;.boto）8.配置了 IAM 角色的 Amazon EC2 实例上的实例元数据服务。 1.2、AWS CLI配置凭证安装AWS CLI[参考链接2]客户端之后，可以利用aws configure快速配置凭证。需要提前从AWS控制台创建对应账号的AK(Access Key)和SK(Secret Key)。 12345$ aws configureAWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLEAWS Secret Access Key [None]: wJalrXUtnFEMI&#x2F;K7MDENG&#x2F;bPxRfiCYEXAMPLEKEYDefault region name [None]: cn-northwest-1Default output format [None]: 直接使用aws configure产生的是default配置文件，在没有明确指定配置文件时，就会使用default配置文件。你还可以使用aws configure --profile cn-prod来创建名称为cn-prod的配置文件。假设default配置的是测试账号信息，cn-prod配置的是生产账号信息，在不明确指定配置文件的情况下，代码会使用default配置，也就是测试环境的凭证。 配置凭证时，指定名称为cn-prod。 12345$ aws configure --profile cn-prodAWS Access Key ID [None]: AKIAI44QH8DHBEXAMPLEAWS Secret Access Key [None]: je7MtGbClwBF&#x2F;2Zp9Utk&#x2F;h3yCo8nvbEXAMPLEKEYDefault region name [None]: cn-northwest-1Default output format [None]: AWS会将配置文件放在.aws文件夹中，这个文件夹默认在用户主目录下，例如Windows的路径C:\\Users\\crosswalk\\.aws，Linux root用户路径/root/.aws。文件夹中会产生一个凭证配置文件credentials和一个Config配置文件config。 凭证配置文件credentials中具体的内容： 1234567[default]aws_access_key_id&#x3D;AKIAIOSFODNN7EXAMPLEaws_secret_access_key&#x3D;wJalrXUtnFEMI&#x2F;K7MDENG&#x2F;bPxRfiCYEXAMPLEKEY[cn-prod]aws_access_key_id&#x3D;AKIAI44QH8DHBEXAMPLEaws_secret_access_key&#x3D;je7MtGbClwBF&#x2F;2Zp9Utk&#x2F;h3yCo8nvbEXAMPLEKEY Config配置文件config中的具体内容： 12345[default]region&#x3D;cn-northwest-1[profile cn-prod]region&#x3D;cn-northwest-1 使用 aws configure list-profiles 命令列出所有配置文件名称。 123C:\\Users\\crosswalk&gt;aws configure list-profilesdefaultcn-prod 1.3、AWS CLI凭证测试使用默认凭证，查看测试账号下的EC2 1234567891011C:\\Users\\crosswalk&gt;aws ec2 describe-instances&#123; &quot;Reservations&quot;: [ &#123; &quot;Groups&quot;: [], &quot;Instances&quot;: [ &#123; &quot;AmiLaunchIndex&quot;: 0, &quot;ImageId&quot;: &quot;ami-007315f06e322f1ab&quot;, &quot;InstanceId&quot;: &quot;i-08fc1f70383191bb4&quot;, &quot;InstanceType&quot;: &quot;t2.2xlarge&quot; 指定cn-prod凭证，查看生产账号下的EC2 1234567891011C:\\Users\\crosswalk&gt;aws ec2 describe-instances --profile cn-prod&#123; &quot;Reservations&quot;: [ &#123; &quot;Groups&quot;: [], &quot;Instances&quot;: [ &#123; &quot;AmiLaunchIndex&quot;: 0, &quot;ImageId&quot;: &quot;ami-7c9f8b1e&quot;, &quot;InstanceId&quot;: &quot;i-099540680995ce588&quot;, &quot;InstanceType&quot;: &quot;t2.medium&quot;, 1.4、boto3 切换凭证测试你可以在创建Session[参考链接3]时通过profile_name参数指定凭证配置文件名称。 12345profile_name = &#x27;my-global&#x27;my_region = &#x27;cn-northwest-1&#x27;session = boto3.Session(profile_name=profile_name, region_name=my_region)dev_s3_client = session.client(&#x27;s3&#x27;) 在创建脚本时，开头定义使用的凭证名称。 1234567891011121314151617181920profile_name = &#x27;cn-prod&#x27;my_region = &#x27;cn-northwest-1&#x27;def cfn_create_stack(stackname, file_path): &quot;&quot;&quot;创建堆栈&quot;&quot;&quot; import boto3 session = boto3.Session(profile_name=profile_name, region_name=my_region) client = session.client(&#x27;cloudformation&#x27;) with open(f&quot;&#123;file_path&#125;&quot;, &#x27;r&#x27;, encoding=&#x27;UTF-8&#x27;) as fd: # 读取CloudFormation YAML文件内容 templatebody = fd.read() try: client.create_stack(StackName=f&quot;&#123;stackname&#125;&quot;, Capabilities=[&#x27;CAPABILITY_IAM&#x27;], TemplateBody=templatebody) print(f&#x27;[&quot;&#123;stackname&#125;&quot;堆栈创建成功]&#x27;) except Exception as e: print(f&#x27;[&quot;&#123;stackname&#125;&quot;堆栈创建失败]&#x27;) print(e)if __name__ == &quot;__main__&quot;: cft_create_stack(&#x27;vpc-stack-test&#x27;, &#x27;vpc-test.yaml&#x27;) 二、Python Boto3操作CloudFormation代码参考利用Python3的Boto3模块，就可以完成AWS上的所有API操作，具体可以参考boto3 CloudFormaionl[参考链接4]，查看API的详细参数。 写一个用于测试脚本的CloudFormation模板vpc-test.yaml，创建一个VPC并且输出VPC的ID信息。 1234567891011121314151617Resources: MyTestVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: MyTestVpcOutputs: MyTestVpc: Description: MyTestVpc Value: !Ref MyTestVpc Export: Name: MyTestVpc-ID 2.1、创建堆栈脚本需要指定堆栈的名称和模板的路径。 1234567891011121314151617181920profile_name = &#x27;cn-prod&#x27;my_region = &#x27;cn-northwest-1&#x27;def cfn_create_stack(stackname, file_path): &quot;&quot;&quot;创建堆栈&quot;&quot;&quot; import boto3 session = boto3.Session(profile_name=profile_name, region_name=my_region) client = session.client(&#x27;cloudformation&#x27;) with open(f&quot;&#123;file_path&#125;&quot;, &#x27;r&#x27;, encoding=&#x27;UTF-8&#x27;) as fd: # 读取CloudFormation YAML文件内容 templatebody = fd.read() try: client.create_stack(StackName=f&quot;&#123;stackname&#125;&quot;, Capabilities=[&#x27;CAPABILITY_IAM&#x27;], TemplateBody=templatebody) print(f&#x27;[&quot;&#123;stackname&#125;&quot;堆栈创建成功]&#x27;) except Exception as e: print(f&#x27;[&quot;&#123;stackname&#125;&quot;堆栈创建失败]&#x27;) print(e)if __name__ == &quot;__main__&quot;: cft_create_stack(&#x27;vpc-stack-test&#x27;, &#x27;vpc-test.yaml&#x27;) 代码输出： 1[&quot;vpc-stack-test&quot;堆栈创建成功] 2.2、获取堆栈输出12345678910111213141516171819202122232425profile_name = &#x27;cn-prod&#x27;my_region = &#x27;cn-northwest-1&#x27;def cfn_stack_output(stackname): # 当堆栈完成后获取输出 &quot;&quot;&quot;获取堆栈输出内容&quot;&quot;&quot; import time import boto3 while True: nowtime = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()) session = boto3.Session(profile_name=profile_name, region_name=my_region) client = session.client(&#x27;cloudformation&#x27;) response = client.describe_stacks(StackName=stackname) if response[&#x27;Stacks&#x27;][0][&#x27;StackStatus&#x27;] == &#x27;CREATE_COMPLETE&#x27;: response = client.describe_stacks(StackName=stackname) outputs = response[&quot;Stacks&quot;][0][&quot;Outputs&quot;] print(f&#x27;[&#123;nowtime&#125;] Stack Create Complete!&#x27;) print(outputs) return outputs else: time.sleep(1) print(f&#x27;[&#123;nowtime&#125;] Wait Stack Complete...&#x27;) if __name__ == &quot;__main__&quot;: # cft_create_stack(&#x27;vpc-stack-test&#x27;, &#x27;vpc-test.yaml&#x27;) cfn_stack_output(&#x27;vpc-stack-test&#x27;) 代码输出： 12[2022-04-02 11:51:26] Stack Create Complete![&#123;&#39;OutputKey&#39;: &#39;MyTestVpc&#39;, &#39;OutputValue&#39;: &#39;vpc-0e764b67068222644&#39;, &#39;Description&#39;: &#39;MyTestVpc&#39;, &#39;ExportName&#39;: &#39;MyTestVpc-ID&#39;&#125;] 2.3、删除堆栈12345678910111213141516171819profile_name = &#x27;cn-prod&#x27;my_region = &#x27;cn-northwest-1&#x27;def cfn_delete_stack(stackname): &quot;&quot;&quot;删除堆栈&quot;&quot;&quot; import boto3 session = boto3.Session(profile_name=profile_name, region_name=my_region) client = session.client(&#x27;cloudformation&#x27;) try: rsp = client.delete_stack(StackName=stackname) print(f&#x27;[&quot;&#123;stackname&#125;&quot;堆栈删除成功]&#x27;) except Exception as e: print(f&#x27;[&quot;&#123;stackname&#125;&quot;堆栈删除失败]&#x27;) print(e) if __name__ == &quot;__main__&quot;: # cft_create_stack(&#x27;vpc-stack-test&#x27;, &#x27;vpc-test.yaml&#x27;) # cfn_stack_output(&#x27;vpc-stack-test&#x27;) cfn_delete_stack(&#x27;vpc-stack-test&#x27;) 代码输出： 1[&quot;vpc-stack-test&quot;堆栈删除成功] 三、参考文档 [1] AWS Credentials：https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html [2] 安装或更新最新版本的 AWS CLI：https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/getting-started-install.html [3] AWS Session reference：https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html [4] AWS Boto3 CloudFormation：https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudformation.html","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"CloudFormation","slug":"CloudFormation","permalink":"https://liuqianglong.com/tags/CloudFormation/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"AWS CloudFormation 系列--(2)常用函数及字段","slug":"CloudFormation从入门到进阶-2-常用函数及字段","date":"2022-10-11T14:04:18.000Z","updated":"2022-11-23T14:17:44.142Z","comments":true,"path":"CloudFormation从入门到进阶-2-常用函数及字段.html","link":"","permalink":"https://liuqianglong.com/CloudFormation%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6-2-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%8F%8A%E5%AD%97%E6%AE%B5.html","excerpt":"","text":"B站视频链接：https://www.bilibili.com/video/BV1Pe411L7zL/?spm_id_from=333.999.list.card_archive.click微信公众号：自刘地 前面CloudFormation的快速入门，基本了解了如何使用这个服务来创建AWS资源。但是前面写的代码基本只能自己看看，没法分享给别人使用，比如代码里面明确写了EC2的密钥，别人账号里面肯定没有这个密钥，应该让使用者自己选择密钥信息。 所以需要创建更加灵活的CloudFormation模板，这里会介绍一些常见的字段和函数，了解了这些之后，基本上能看懂网络上大部分的CloudFormation代码。 这篇文章知识点比较多，我会先追个介绍，最后会通过一个实验把这些知识点整合起来。下面这个实验环境，和之前快速入门是一样的，但是会通过一些函数和字段，让这个模板更加灵活。 一、DependsOn属性前面快速入门，讲过了模板里面最重要的资源（Resources）字段。资源字段内部一共有6种属性，这里只介绍最常用的DependsOn属性。 之前创建的环境比较简单，所以没有用到这个属性。如果在两个资源之间有依赖关系时，如果你希望其中一个资源先创建，然后再创建另外一个资源，就可以用DependsOn属性。 123456CreationPolicy attributeDeletionPolicy attributeDependsOn attributeMetadata attributeUpdatePolicy attributeUpdateReplacePolicy attribute 这里通过一个场景，来看DependsOn属性的用法。例如需要在CloudFormation代码里面创建EC2和数据库，并且让EC2连接上数据库。那么肯定希望先创建数据，然后再创建EC2，否则肯定连接不上。这时候就可以在EC2资源下面，加上DependsOn属性，确保创建完数据之后再创建EC2。 123456789101112131415Resources: Ec2Instance: Type: AWS::EC2::Instance DependsOn: myDB Properties: ImageId: ami-003a3de8892ecbc45 myDB: Type: AWS::RDS::DBInstance Properties: AllocatedStorage: &#x27;5&#x27; DBInstanceClass: db.t2.small Engine: MySQL EngineVersion: &#x27;5.5&#x27; MasterUsername: MyName MasterUserPassword: MyPassword 这里其实隐含了一个特性，就是AWS在创建、更新、删除资源的时候默认是并行的，也就是尽可能同时创建所有资源。使用DependsOn属性可以明确的指定资源创建的先后顺序。 另外!Ref和!GetAtt 这两个内部函数具有隐式的依赖关系。例如之前使用过!Ref函数，在创建IGW时，使用Ref函数调用了VPC ID信息，这样也可以确保被调用的资源先创建，也就是创建VPC之后，才会创建IGW。 123456# IGW 关联VPC MyTestAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref MyTestVpc InternetGatewayId: !Ref MyTestIgw 二、常用内部函数下面介绍CloudFormation常见的一些内部函数。 只能在特定的模板字段下面使用内部函数，例如在resource properties、outputs、metadata attributes、update policy attributes这几个字段下面使用内部函数。下面是所有内部函数，这里只介绍几个常用的内部函数[参考链接1]。 12345678910111213Fn::Base64Fn::CidrCondition functionsFn::FindInMapFn::GetAttFn::GetAZsFn::ImportValueFn::JoinFn::SelectFn::SplitFn::SubFn::TransformRef Fn::Ref 函数最常见的毫无疑问就是Ref函数，前面的模板使用过了Ref函数，一般情况下Ref函数返回资源的ID信息。有些资源会返回有重要意义的标识符，例如AWS::EC2::EIP[参考链接2]资源返回 IP 地址，AWS::EC2::Instance返回实例 ID。 完整函数名称的语法： 1Ref: logicalName 短格式的语法： 1!Ref logicalName 例如前面将IGW关联到VPC，就用到Ref函数，VPC ID使用了完成名称，IGW ID使用了短格式写法。一般我会使用短格式写法，写在一行更加简洁。 123456MyTestAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: Ref: MyTestVpc InternetGatewayId: !Ref MyTestIgw Fn::GetAtt 函数Fn::GetAtt 函数返回模板中资源的属性值。例如你希望获取EC2实例的公网IP地址，就可以使用!GetAtt MyTestEc2Instance.PublicIp来获取EC2的公网IP地址。具体每个资源可以获取哪些属性值，可以查阅对应资源的文档，例如查看AWS::EC2::Instance有哪些属性值。 完整函数名称的语法： 1Fn::GetAtt: [ logicalNameOfResource, attributeName ] 短格式的语法： 1!GetAtt logicalNameOfResource.attributeName 例如输出EC2的公网IP地址，Fn::GetAtt 函数短格式写法为： 123456Outputs: MyTestEc2InstanceEip: Description: MyTestEc2InstanceEip Value: !GetAtt MyTestEc2Instance.PublicIp Export: Name: MyTestEc2InstanceEip 下面是对应的Fn::GetAtt 函数的完整写法。 1234567Outputs: MyTestEc2InstanceEip: Description: MyTestEc2InstanceEip Value: Fn::Getatt: [ MyTestEc2Instance, PublicIp ] Export: Name: MyTestEc2InstanceEip Fn::Select 函数Fn::Select函数通过索引，来获取列表中的某个对象。一般结合函数Fn::GetAZs使用。 完整函数名称的语法，index指定索引序号，listOfObjects表示对象的列表。 1Fn::Select: [ index, listOfObjects ] 短格式的语法： 1!Select [ index, listOfObjects ] 为了更好理解这个函数的用法，这里通过一个伪代码来进行解释。例如变量Ec2TypeList是一个列表，想要设置EC2实例类型为t2.micro，通过Select函数，选择列表的第一个索引，即0号索引即可。 123456Ec2TypeList = [ t2.micro, t2.small, t2.large ] MyTestEc2Instance: Type: AWS::EC2::Instance Properties: InstanceType: !Select [ 0, Ec2TypeList ] Fn::GetAZs 函数Fn::GetAZs函数返回一个数组，该数组按字母顺序列出指定区域的可用区。 前面模板创建子网时，在模板里面硬编码了可用区信息AvailabilityZone: cn-northwest-1a，那么这个代码在宁夏以外的其他区域使用就会报错，因为其他区域没有cn-northwest-1a这个可用区。 下面案例中，AWS::Region是伪参数[参考链接3]。伪参数是 AWS CloudFormation 内建的变量，调用AWS::Region会返回代码运行的区域值，即cn-northwest-1。 进一步通过Fn::GetAZs函数来指定获取可用区信息，因为返回的结果是一个列表，所以可以用Select函数来选择单个对象，例如这里选择返回结果中的第一个可用区。 123AvailabilityZone: !Select - 0 - Fn::GetAZs: !Ref &#x27;AWS::Region&#x27; 这样前面子网的可用区信息就不用硬编码了，换成更加灵活的方式指定可用区，这里指定为CloudFormation运行区域的第一个可用区。 12345678910111213# 在VPC内创建子网 MyTestVpcSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref MyTestVpc CidrBlock: 10.0.0.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: my-test-vpc-public-subnet Fn::Base64 函数内部函数Fn::Base64返回输入字符串的 Base64 表示方法。该函数通常用于通过 UserData 属性将编码的数据传递给 Amazon EC2 实例。你可以在 Fn::Base64 函数内部使用返回字符串的任意函数。 完整函数名称的语法： 1Fn::Base64: valueToEncode 短格式的语法： 1!Base64 valueToEncode Fn::Sub 函数内部函数 Fn::Sub 将输入字符串中的变量替换为你指定的值。 Fn::Sub 主要有两个使用场景，一个是拼接字符串，另外就是结合Fn::Base64函数，将数据传递到EC2的 UserData 里面。 完整函数名称的语法： 1Fn::Sub: String 短格式的语法： 1!Sub String 例如下面这个案例，通过UserData来安装apache服务，修改http端口，并启动服务。 函数Fn::Base64:表示将后面的字符串编码转换为Base64格式。 函数!Sub将输入字符串中的变量替换为你指定的值。 字符|（管道符号）表示一种文本风格(Literal Style)，它可以让你输入正常的文本，而不用使用\\n来表示换行。 12345678910111213141516171819202122# 创建一个EC2实例 MyTestEc2Instance: Type: AWS::EC2::Instance Properties: ImageId: ami-003a3de8892ecbc45 KeyName: CloudFormation-Test-Key InstanceType: t3.small NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: MyTestVpcSg SubnetId: !Ref MyTestVpcSubnet UserData: Fn::Base64: !Sub | #!/bin/bash yum update -y yum install -y httpd sed -i.bak &#x27;s/Listen 80/Listen 8443/g&#x27; /etc/httpd/conf/httpd.conf systemctl start httpd.service systemctl enable httpd.service 函数 Fn::Sub 也经常用来做文本替换操作，有两种使用场景，一种是直接调用已有变量，另外一种是指定变量映射。 直接调用已有变量 以下示例使用AWS::Region这个伪参数，以及 VPC 资源逻辑 ID 产生了一个字符串。替换的结果格式为arn:aws:ec2:cn-northwest-1:vpc/vpc-0e2bd48e14bb15086。 使用$&#123;&#125;替换变量，其实就是直接调用变量。以下示例使用AWS::Region这个伪参数，以及 VPC 资源逻辑 ID 产生了一个字符串。替换的结果格式为arn:aws:ec2:cn-northwest-1:vpc/vpc-0e2bd48e14bb15086。 1!Sub &#x27;arn:aws:ec2:$&#123;AWS::Region&#125;:vpc/$&#123;MyTestVpc&#125;&#x27; 变量映射 变量映射的短格式语法如下，后面的变量往前面的字符串传递参数。 1234!Sub - String - Var1Name: Var1Value Var2Name: Var2Value 例如，使用GetAtt 函数获取的结果，来替换变量 $&#123;MyTestEc2InstanceEip&#125; 的值。注意$&#123;&#125;内部只能填写变量，不能嵌套其他函数，例如不能写成$&#123;!GetAtt MyTestEc2Instance.PublicIp&#125;。 1234567WebServerSubUrl: Description: WebServerSubUrl Value: !Sub - &quot;http://$&#123;MyTestEc2InstanceEip&#125;:$&#123;webServerPort&#125;&quot; - &#123;MyTestEc2InstanceEip: !GetAtt MyTestEc2Instance.PublicIp&#125; Export: Name: WebServerSubUrl Fn::FindInMap 函数内置函数Fn::FindInMap返回与Mappings部分声明的双层映射中的键对应的值。通过下面的例子看下什么是双层映射中的键对应的值： ToplevelKey1是第一层映射的键，SecondLevelKey1是第二层映射的键。想要获取Vaule-ABC这个值，就可以利用FindInMap函数来获取。 1234567891011Mappings: logicalResource: ToplevelKey1: SecondLevelKey1: Vaule-ABC SecondLevelKey2: Vaule-123 ToplevelKey2: SecondLevelKey1: Vaule-XYZ SecondLevelKey2: Vaule-456!FindInMap [logicalResource, ToplevelKey1, SecondLevelKey1]Vaule-ABC 上面就是一些常见的函数，还有一些函数没有介绍，后续有时间会在单独介绍。 三、Parameters(参数)Parameters是模板里面的可选字段。利用参数，你能够在每次创建或更新堆栈时将自定义值输入模板。 例如可以让用户自己选择EC2的密钥对，密钥对可以设置默认值。设置Web服务器的端口，端口值只能在AllowedValues中选择，后续安全组和输出都可以调用这个端口信息。 12345678910111213Parameters: myKeyPair: Description: Amazon EC2 Key Pair Type: AWS::EC2::KeyPair::KeyName Default: MyCN-CloudFormation-Test-Key webServerPort: Description: Apache Http Server Port Type: String Default: 8443 AllowedValues: - 8443 - 8888 - 8088 在创建EC2时，调用参数定义的密钥对信息。 12345# 创建一个EC2实例 MyTestEc2Instance: Type: AWS::EC2::Instance Properties: KeyName: !Ref myKeyPair 在安全组放行端口时，可以使用!Ref或者!Sub函数调用参数里面定义的Web服务器端口。 1234567# 在VPC内创建一个安全组 MyTestVpcSg:... - IpProtocol: tcp FromPort: !Ref webServerPort # !Sub $&#123;webServerPort&#125; ToPort: !Ref webServerPort # !Sub $&#123;webServerPort&#125; CidrIp: 0.0.0.0/0 在创建堆栈时，需要填写参数信息。 四、Outputs(输出)Outputs是模板里面的可选参数，你可以输出指定的值，这些值可以导入到其他堆栈中、可以从响应中获取这些值、或者在AWS CloudFormation 控制台中查看。 这里输出了EC2的公网IP地址信息。还通过字符串替换或拼接的方式输出了EC2的URL信息，可以用!Sub和!Join两种方式输出Web服务器的URL，!Join函数这里简单演示一下使用案例，Join函数类似于字符串拼接，我个人更习惯使用!Sub函数。 12345678910111213141516171819202122232425Outputs: MyTestEc2InstanceEip: Description: MyTestEc2InstanceEip Value: !GetAtt MyTestEc2Instance.PublicIp Export: Name: MyTestEc2InstanceEip WebServerSubUrl: Description: WebServerUrl Value: !Sub - &quot;http://$&#123;MyTestEc2InstanceEip&#125;:$&#123;webServerPort&#125;&quot; - &#123;MyTestEc2InstanceEip: !GetAtt MyTestEc2Instance.PublicIp&#125; Export: Name: WebServerSubUrl WebServerJoinUrl: Description: WebServerUrlTest Value: !Join - &#x27;&#x27; - - &#x27;http://&#x27; - !GetAtt - MyTestEc2Instance - PublicIp - &#x27;:&#x27; - !Sub $&#123;webServerPort&#125; Export: Name: WebServerJoinUrl 五、Mappings(映像)Mappings是模板里面的可选字段，包含一些键值对，通过Fn::FindInMap函数可以获取映射中值的信息。 Mappings字段在网上其它人分享的模板里面经常会看到。例如，因为AMI ID每个区域都是不一样的，所以想要模板内部的EC2实例能在多个区域运行，需要提前指定不同区域的AMI ID信息，然后就可以利用Mappings定义好不同区域的AMI ID信息，然后在EC2资源利用Fn::FindInMap调用。 这里定义了中国北京和中国宁夏区域的Amazon Linux AMI ID。其中HVM64表示全虚拟化x86架构64位系统，HVMG2表示Arm架构Graviton2处理器。[参考链接4] 12345678Mappings: RegionMap: cn-north-1: HVM64: ami-0a01c170bf8ccec5b HVMG2: ami-0491098e85ea4b162 cn-northwest-1: HVM64: ami-003a3de8892ecbc45 HVMG2: ami-026d9fc0529d10475 在指定EC2镜像时，可以使用!FindInMap函数进行调用。其中!Ref &quot;AWS::Region&quot;是伪参数，可以获取创建堆栈的AWS区域。这里就实现了在哪个区域部署时，就传递对应区域的AMI ID信息，模板将具有更好的灵活性。 12345# 创建一个EC2实例 MyTestEc2Instance: Type: AWS::EC2::Instance Properties: ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, HVM64] 另外一个常见使用Mappings的场景，是根据测试环境或者生产环境自动选择EC2的实例类型，或者其他参数。 Mappings定义测试环境和生产环境的实例类型，并提供参数让用户选择环境类型。 1234567891011121314151617Mappings: EnvironmentType: dev: instanceType: t3.micro name: dev prod: instanceType: t3.small name: prod Parameters: Environment: Type: String AllowedValues: - dev - prod Default: dev EC2实例调用用户选择的环境类型，来决定启动的实例类型。例如如果选择的dev环境，那么实例类型就会通过FindInMap函数获取到t3.micro。 1234567# 创建一个EC2实例 MyTestEc2Instance: Type: AWS::EC2::Instance Properties: ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, HVM64] KeyName: !Ref myKeyPair InstanceType: !FindInMap [EnvironmentType, !Ref Environment, instanceType] 六、创建一个更加灵活的模板现在把上面的参数和函数都整合起来。 模板添加了Parameters字段、让用户选择EC2的Key、指定Web服务器的端口、在安全组内调用Web端口的参数、在UserData的配置文件调用Web端口信息、添加了Outputs字段，输出EC2的公网IP地址，输出Web服务器的URL信息。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171AWSTemplateFormatVersion: &quot;2010-09-09&quot;Description: &quot;CloudFormation learning template from Liu Qianglong.&quot;Mappings: RegionMap: cn-north-1: HVM64: ami-0a01c170bf8ccec5b HVMG2: ami-0491098e85ea4b162 cn-northwest-1: HVM64: ami-003a3de8892ecbc45 HVMG2: ami-026d9fc0529d10475 EnvironmentType: dev: instanceType: t3.micro name: dev prod: instanceType: t3.small name: prodParameters: Environment: Type: String AllowedValues: - dev - prod Default: dev myKeyPair: Description: Amazon EC2 Key Pair Type: AWS::EC2::KeyPair::KeyName Default: CloudFormation-Test-Key webServerPort: Description: Apache Http Server Port Type: String Default: 8443 AllowedValues: - 8443 - 8888 - 8088 Resources:# 创建一个VPC MyTestVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: MyTestVpc# 创建IGW并且关联到VPC MyTestIgw: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: my-test-igw MyTestAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref MyTestVpc InternetGatewayId: !Ref MyTestIgw# 在VPC内创建子网 MyTestVpcSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref MyTestVpc CidrBlock: 10.0.0.0/24 AvailabilityZone: Fn::Select: - 0 - Fn::GetAZs: &quot;&quot; Tags: - Key: Name Value: my-test-vpc-public-subnet# VPC内创建路由表并关联到子网，路由表设置默认路由指向IGW MyTestPublicRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref MyTestVpc Tags: - Key: Name Value: my-test-public-route-table MyTestRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref MyTestPublicRouteTable SubnetId: !Ref MyTestVpcSubnet MyTestInternetRoute: Type: &quot;AWS::EC2::Route&quot; Properties: RouteTableId: !Ref MyTestPublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref MyTestIgw# 在VPC内创建一个安全组 MyTestVpcSg: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SG to test ping VpcId: Ref: MyTestVpc SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: !Ref webServerPort # !Sub $&#123;webServerPort&#125; ToPort: !Ref webServerPort CidrIp: 0.0.0.0/0# 创建一个EC2实例 MyTestEc2Instance: Type: AWS::EC2::Instance Properties: ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, HVM64] KeyName: !Ref myKeyPair # MyCN-CloudFormation-Test-Key InstanceType: !FindInMap [EnvironmentType, !Ref Environment, instanceType] NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: MyTestVpcSg SubnetId: !Ref MyTestVpcSubnet UserData: Fn::Base64: !Sub | #!/bin/bash yum update -y yum install -y httpd sed -i.bak &#x27;s/Listen 80/Listen $&#123;webServerPort&#125;/g&#x27; /etc/httpd/conf/httpd.conf echo &quot;&lt;h2&gt;Hello World from $(hostname -f)&lt;/h2&gt;&quot; &gt; /var/www/html/index.html systemctl start httpd.service systemctl enable httpd.serviceOutputs: MyTestEc2InstanceEip: Description: MyTestEc2InstanceEip Value: !GetAtt MyTestEc2Instance.PublicIp Export: Name: MyTestEc2InstanceEip WebServerSubUrl: Description: WebServerSubUrl Value: !Sub - &quot;http://$&#123;MyTestEc2InstanceEip&#125;:$&#123;webServerPort&#125;&quot; - &#123;MyTestEc2InstanceEip: !GetAtt MyTestEc2Instance.PublicIp&#125; Export: Name: WebServerSubUrl WebServerJoinUrl: Description: WebServerJoinUrl Value: !Join - &#x27;&#x27; - - &#x27;http://&#x27; - !GetAtt - MyTestEc2Instance - PublicIp - &#x27;:&#x27; - !Sub $&#123;webServerPort&#125; Export: Name: WebServerJoinUrl 可以通过【参数】查看用户堆栈的输入 通过【输出】查看Outputs 打开Web服务器的URL 七、参考文档 [1] 内置函数参考：https://docs.aws.amazon.com/zh_cn/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html [2] AWS::EC2::EIP：https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html [3] AWS CloudFormation 伪参数：https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html [4] AWS Linux AMI 虚拟化类型：https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/virtualization_types.html","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"CloudFormation","slug":"CloudFormation","permalink":"https://liuqianglong.com/tags/CloudFormation/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"AWS CloudFormation 系列--(1)快速入门","slug":"CloudFormation从入门到进阶-1-快速入门","date":"2022-10-07T12:36:00.000Z","updated":"2022-11-23T14:16:21.263Z","comments":true,"path":"CloudFormation从入门到进阶-1-快速入门.html","link":"","permalink":"https://liuqianglong.com/CloudFormation%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6-1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html","excerpt":"","text":"B站视频链接：​ ​​https://www.bilibili.com/video/BV1Wd4y1i7PE/?spm_id_from=333.999.0.0​​​ 微信公众号：自刘地 学习AWS CloudFormation服务，需要具备一定的AWS基础知识，比如在AWS Console上创建过VPC和EC2等资源，因为这个服务就是用代码的方式来创建资源，如果你不会通过图形化的方式创建，那么会很难理解代码。 一、为什么需要AWS CloudFormation服务利用AWS CloudFormation服务，可以让你通过代码的方式来创建AWS资源，这是AWS的基础架构即代码服务(IaC)。 为什么不在AWS Console界面来创建、删除资源，而是通过代码的方式来操作资源，主要有下面几个优势： 容易分享AWS环境给他人。通过代码的方式分享你的AWS环境，可以确保每次部署都是完全相同的，不用担心一些误操作引起的环境差异。当你需要学习一个新的服务时，经常会看到别人已经搭建好了所有的测试环境，并且分享了CloudFormation的代码，学会看这些代码能帮你提高学习效率。例如学习GWLB时看到这篇文档[参考链接1]，节约了很多部署环境的时间。 可以「批量」操作AWS资源。在AWS CloudFormation代码里面，定义的VPC和EC2等这些资源，形成了一个堆栈(stack)，创建或者删除一堆栈，就会自动创建或删除堆栈里面定义的所有资源。这个特点太方便学习做实验了，需要时，一键创建所有实验环境，做完后，一键打扫战场。避免漏删资源而扣费。 可以做版本控制。因为AWS CloudFormation都是代码文件，所以可以使用Git来进行版本控制。 二、AWS CloudFormation 模板格式CloudFormation 模板就是你需要写的代码文件，模板是JSON或YAML格式的文本文件，你可以指定任何的扩展名称，例如.txt，后缀名并不会影响内容的读取。 下面是在模板里面定义创建一个VPC，分别用JSON和YAML格式来展现。JSON和YAML格式是可以相互转换的，但是YAML支持注释功能，所以我更习惯使用YAML格式来写模板，之后的CloudFormation模板的代码我都会使用YAML格式来写。 通过JSON格式来创建一个VPC的代码，不用关心代码里面的字段，后面会讲解。 1234567891011&quot;MyTestVpc&quot; : &#123; &quot;Type&quot; : &quot;AWS::EC2::VPC&quot;, &quot;Properties&quot; : &#123; &quot;CidrBlock&quot; : &quot;10.0.0.0/16&quot;, &quot;EnableDnsSupport&quot; : &quot;true&quot;, &quot;EnableDnsHostnames&quot; : &quot;true&quot;, &quot;Tags&quot; : [ &#123;&quot;Key&quot; : &quot;Name&quot;, &quot;Value&quot; : &quot;MyTestVpc&quot;&#125; ] &#125;&#125; 通过YAML格式来创建一个VPC的代码。YAML格式写起来更加简单，你可以写单引号、双引号、不写引号，都是一样的。我一般不写引号，除非字符较多，会通过引号来分隔字符。YAML和Python语法一样，不同的层级，通过缩进来区分。 12345678910# 创建VPCMyTestVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsSupport: true EnableDnsHostnames: true Tags: - Key: Name Value: MyTestVpc 三、AWS CloudFormation 模板字段下面是CloudFormation模板的所有字段，这是快速入门，只介绍最重要的一个字段，其他参考大家可以自己看文档*模板格式*[参考链接2]，以后在其他文章中会陆续介绍这些参数。 Resources：这是唯一的必选字段，定义模板要创建哪些资源，例如创建VPC、EC2等，模板的主要作用就是定义资源，模板里面其他字段都可以省略，但是必须定义资源字段。 1234567891011121314151617181920212223242526272829---AWSTemplateFormatVersion: &quot;version date&quot;Description: StringMetadata: template metadataParameters: set of parametersRules: set of rulesMappings: set of mappingsConditions: set of conditionsTransform: set of transformsResources: set of resourcesOutputs: set of outputs 四、AWS CloudFormation 资源字段属性4.1、实战案例首先来看最重要的Resources字段，这个字段下面会有很多属性，而且不同的服务类型，属性参数并不一样。这些属性不需要你刻意去记忆， 主要还是明确需求之后，去查看文档资源和属性类型参考[参考链接3]。 这里通过一个实际的需求来看如何写CloudFormation的模板：创建一个VPC，内部创建一个EC2实例并关联安全组，实例通过IGW访问互联网。 4.2、创建VPC创建一个VPC，查询VPC这个资源有哪些属性字段，AWS::EC2::VPC[参考链接4] MyTestVpc是我起的一个名字，称为逻辑ID，注意命名不能有中横线和下划线。 AWS::EC2::VPC表示创建的资源类型。资源类型标识符采用这个格式：service-provider::service-name::data-type-name。 10.0.0.0/16是为VPC分配的CIDR地址段，这是一个必选属性。创建一个资源时，脑海里面可以回顾AWS Console的操作，一般控制台界面必选的参数，在CloudFormation模板里面也会是必选。如果你需要修改某些特殊属性，但是不知道属性名称，那就需要查看文档了。 Tags标签参数应该不会陌生，因为可以添加多个标签，-表示列表，可以添加多个标签。 12345678910# 创建一个VPC MyTestVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: MyTestVpc 4.3、创建IGW并关联到VPC创建IGW并且关联到VPC：AWS::EC2::InternetGateway[参考链接5] 这里创建了一个IGW并且关联到了上面创建的VPC。将IGW关联到VPC时，用到了Ref这个函数。*Ref内部函数[参考链接6]可以返回指定的参数或资源*的值。例如你需要查看AWS::EC2::VPC[参考链接4]就可以知道，它返回的是VpcId信息。 这里使用了Ref函数的短格式写法，可以写在一行!Ref logicalName，第二部分会专门介绍各种函数的用法。 1234567891011121314# 创建IGW MyTestIgw: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: my-test-igw# IGW 关联VPC MyTestAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref MyTestVpc InternetGatewayId: !Ref MyTestIgw 4.4、创建子网在VPC里面创建子网：AWS::EC2::Subnet[参考链接7] 这里子网需要指定VpcId，可以使用Ref内部函数来获取这个信息。 12345678910# 在VPC内创建子网 MyTestVpcSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref MyTestVpc CidrBlock: 10.0.0.0/24 AvailabilityZone: cn-northwest-1a Tags: - Key: Name Value: my-test-vpc-public-subnet 4.5、路由表操作在VPC内创建路由表并关联到子网，路由表设置默认路由指向IGW：AWS::EC2::RouteTable、AWS::EC2::Route、AWS::EC2::SubnetRouteTableAssociation 1234567891011121314151617181920212223# VPC内创建路由表 MyTestPublicRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref IpsecTsVpc Tags: - Key: Name Value: my-test-public-route-table# 路由表关联子网 MyTestRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref MyTestPublicRouteTable SubnetId: !Ref MyTestVpcSubnet# 路由表设置默认路由指向IGW MyTestInternetRoute: Type: &quot;AWS::EC2::Route&quot; Properties: RouteTableId: !Ref MyTestPublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref MyTestIgw 4.6、创建安全组在VPC内创建一个安全组：AWS::EC2::SecurityGroup 安全组里面数字-1表示允许所有。 1234567891011121314151617181920# 在VPC内创建一个安全组 MyTestVpcSg: Type: AWS::EC2::SecurityGroup DependsOn: MyTestVpc Properties: GroupDescription: SG to test ping VpcId: !Ref MyTestVpc SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 8443 ToPort: 8443 CidrIp: 0.0.0.0/0 4.7、创建EC2实例创建一个EC2实例：AWS::EC2::Instance 指定了EC2的AMI ID，可以通过控制台查询AMI ID。需要确认账号下存在MyCN-CloudFormation-Test-Key这个密钥对信息。设置实例类型为t3.small。另外接口设置自动获取公网IP地址、因为是第一个主接口，所以编号为0、接口关联之前创建的安全组、接口放置之前创建的子网内。 12345678910111213# 创建一个EC2实例 MyTestEc2Instance: Type: AWS::EC2::Instance Properties: ImageId: ami-003a3de8892ecbc45 KeyName: MyCN-CloudFormation-Test-Key InstanceType: t3.small NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: MyTestVpcSg SubnetId: !Ref MyTestVpcSubnet 五、AWS 控制台创建堆栈(stack)要将模板的代码实例化，就需要创建堆栈，可以通过AWS控制台、AWS CLI、API，来创建创建、更新、删除堆栈。模板里面所有的资源可以作为一个堆栈进行管理。 前面的内容单独解释每个资源如何创建，现在将这些资源都写到一个模板里面。这个模板中创建了一个VPC，VPC内部创建一个IGW，创建子网并将默认路由指向IGW。最后创建了一个EC2放置在公有子网里面，允许获取公网IP地址。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495Resources:# 创建一个VPC MyTestVpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsSupport: &#x27;true&#x27; EnableDnsHostnames: &#x27;true&#x27; Tags: - Key: Name Value: MyTestVpc# 创建IGW MyTestIgw: Type: &quot;AWS::EC2::InternetGateway&quot; Properties: Tags: - Key: Name Value: my-test-igw # IGW 关联VPC MyTestAttachIgw: Type: &quot;AWS::EC2::VPCGatewayAttachment&quot; Properties: VpcId: !Ref MyTestVpc InternetGatewayId: !Ref MyTestIgw# 在VPC内创建子网 MyTestVpcSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref MyTestVpc CidrBlock: 10.0.0.0/24 AvailabilityZone: cn-northwest-1a Tags: - Key: Name Value: my-test-vpc-public-subnet# VPC内创建路由表 MyTestPublicRouteTable: Type: &quot;AWS::EC2::RouteTable&quot; Properties: VpcId: !Ref MyTestVpc Tags: - Key: Name Value: my-test-public-route-table# 路由表关联子网 MyTestRouteTableAssociation: Type: &quot;AWS::EC2::SubnetRouteTableAssociation&quot; Properties: RouteTableId: !Ref MyTestPublicRouteTable SubnetId: !Ref MyTestVpcSubnet# 路由表设置默认路由指向IGW MyTestInternetRoute: Type: &quot;AWS::EC2::Route&quot; Properties: RouteTableId: !Ref MyTestPublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref MyTestIgw# 在VPC内创建一个安全组 MyTestVpcSg: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SG to test ping VpcId: !Ref MyTestVpc SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: icmp FromPort: -1 ToPort: -1 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 8443 ToPort: 8443 CidrIp: 0.0.0.0/0 # 创建一个EC2实例 MyTestEc2Instance: Type: AWS::EC2::Instance Properties: ImageId: ami-003a3de8892ecbc45 KeyName: MyCN-CloudFormation-Test-Key InstanceType: t3.small NetworkInterfaces: - AssociatePublicIpAddress: true DeviceIndex: 0 GroupSet: - Ref: MyTestVpcSg SubnetId: !Ref MyTestVpcSubnet 进入AWS CloudFormation控制台，点击创建堆栈，选择使用新资源创建。 选择模板已就绪，上传准备的yaml文件，文件最大支持1MB，AWS会自动创建一个S3桶来存储模板文件。你也可以将模板文件上传到上s3，然后指定s3的路径来调用模板。 通过Designer你可以以图形化的方式来创建、查看和修改模板。我觉得这个Designer做的并不是很直观，仅供参考一下吧。 最后设置堆栈的名称，注意堆栈名称不能有下划线，可以有中横线。 通过【事件】可以查看堆栈创建的进度，如果堆栈创建失败，通过事件输出信息，可以非常容易的定位错误原因。 例如这里我故意将子网的AZ信息写成cn-northwest-1，少写了一个a。可以通过【事件】来查看报错信息，状态原因非常明确的说明了错误原因，你可以快速的根据“逻辑ID”来定位是哪个资源有错误，因为逻辑ID就是模板内的资源名称。 另外，当堆栈创建失败的时候，堆栈会自动回滚，将前面所有创建的资源都会删除，全都删除完成后，堆栈状态为ROLLBACK_COMPLETE，此时可以删除堆栈重新在创建一次。 将AZ信息修改正确后重新部署成功。 查看创建的VPC 查看创建的EC2和安全组 目前已经了解了AWS CloudFormation是如何工作的，有了一个快速了解，后续会继续介绍CloudFormation的内部函数。 六、参考文档 [1] aws-gateway-load-balancer-code-samples：https://github.com/aws-samples/aws-gateway-load-balancer-code-samples/tree/main/aws-cloudformation/centralized_architecture [2] AWS 模板格式：https://docs.aws.amazon.com/zh_cn/AWSCloudFormation/latest/UserGuide/template-anatomy.html [3] AWS 资源和属性类型参考：https://docs.aws.amazon.com/zh_cn/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html [4] AWS CloudFormation AWS::EC2::VPC：https://docs.aws.amazon.com/zh_cn/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html [5] AWS CloudFormation AWS::EC2::InternetGateway：https://docs.aws.amazon.com/zh_cn/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html [6] AWS Ref 内部函数：https://docs.aws.amazon.com/zh_cn/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html [7] AWS CloudFormation AWS::EC2::Subnet：https://docs.aws.amazon.com/zh_cn/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"CloudFormation","slug":"CloudFormation","permalink":"https://liuqianglong.com/tags/CloudFormation/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"Cisco StackWise 简介","slug":"Cisco-StackWise-简介","date":"2021-06-17T01:59:29.000Z","updated":"2021-06-17T02:27:18.917Z","comments":true,"path":"Cisco-StackWise-简介.html","link":"","permalink":"https://liuqianglong.com/Cisco-StackWise-%E7%AE%80%E4%BB%8B.html","excerpt":"","text":"1、什么是StackWiseStackWise是思科的堆叠技术，直译过来可以叫智能堆叠，StackWise技术分为硬堆叠和软堆叠两种。 硬堆叠技术使用专用的堆叠线连接成一个环形拓扑结构，最多能堆叠八台交换机，实现最大480G的带宽，硬堆叠一般也可以叫做StackWise-480。目前思科Catalyst 9200/9300 支持硬堆叠，从支持的型号可以看出硬件堆叠的使用场景一般是大型网络的分布层（Distribution）或者是小型网络的核心层。 软堆叠（StackWise Virtual）是思科用于取代VSS（Virtual Switching System）的一个新技术，使用StackWise Virtual技术可以通过10G/40G接口连接两台交换机形成一台虚拟交换机。除了能提供与VSS一样的能力外，还能提供可编程性、应用可见性、MPLS等特性，可以理解为VSS的加强版。目前思科Catalyst 9000系列 9400/9500/9600 均支持StackWise Virtual。从支持的型号可以看出StackWise Virtual一般用在网络的核心层。 StackWise Virtual与StackWise-480除了在网络中的使用场景不太一样之外，StackWise Virtual因为使用10G/40G接口进行连接，所以可以将距离更远的两个交换机连接起来。而StackWise-480需要使用堆叠线进行连接，堆叠线规格有50cm/1m/3m，所以决定了使用StackWise-480技术的交换机往往在同一个机架。 2、StackWise 的优势无论是StackWise-480还是StackWise Virtual都可以简化网络、提供冗余、简化管理。另外StackWise-480还提供了可扩展性。 简化网络：使用StackWise技术之后，网络拓扑结构上只有一台逻辑上的交换机。 提供冗余：交换机之间会通过Stateful Switchover(SSO)进行状态信息同步，交换机可以实现热备。 简化管理：提供统一的管理平面进行管理、配置和排错。便于维护配置统一性，当你你登录不同交换机的控制台所看到的是相同的管理平台。 3、企业园区网高可用架构在进行企业园区网络高可用设计时，可以考虑如下设计，在接入层或者分布层使用StackWise-480技术进行堆叠，在核心层使用StackWise Virtual技术。 上面的物理接线，在逻辑上就是下面的拓扑接口。 从下面的两个图片可以看出，在使用StackWise之后，配置设备数量急剧减少，设计时需要考虑的很多二层问题就被解决了。 4、StackWise-480 介绍思科交换机最多支持8台交换机进行堆叠，堆叠能达到的最大速率为480G，堆叠后就如同一台高端口密度的交换机。堆叠组内选取一台交换机作为Active，主要负责控制层面的信息处理，就好比是C9400中的supervisor板卡；而其他组成员就好比是高端交换机中的I/O modules板卡，主要负责数据层面的流量转发。 4.1、StackPowerStackPower能让堆叠中的电源作为公共资源，在所有交换机之间共享。思科StackPower将交换机中安装的各个电源统一起来，创建一个电源池，哪里有需要就将电源引向哪里。 StackPower线，两头和堆叠线非常相似，StackPower线会更加粗一些，堆叠线是是3根细线合在一起的。 4.2、Extended Fast Software Upgrade（xFSU，扩展的快速软件升级）在交换机上进行软件升级期间，用户流量将被中断，直到新软件完全启动。对于运行关键应用程序的客户来说，流量停机是一个需要考虑的问题。xFSU是一个软件增强过程，旨在减少软件重载或升级操作期间的流量停机时间。xFSU使用优雅重启功能（也称为Cisco Nonstop Forwarding(NSF)），确保交换机配置和路由协议在软件升级或重载期间保持不受影响。目前xFSU升级只适用于Catalyst 9300和Catalyst 9300L交换机。 129300# install add file flash:cat9k_iosxe.BLD_V1610 activate reloadfast commit9300# Reload Fast 想要进一步了解，可以看这里参考文档 4.3、StackWise-480配置StackWise-480其实直接插上堆叠线就可以正常工作了，但是为了后期维护方便，需要提前设计好主用和备用的交换机。 默认配置交换机的优先级（1-15）默认为1，越高越好 打开你要使其成为Active状态的第一个开关的电源 打开你要作为Standby成员的第二个成员的电源，然后打开其余成员的电源 要将成员添加到现有堆栈中，请先插入堆栈电缆，然后打开交换机电源 尽可能避免堆栈合并和堆栈拆分 下面是堆叠线 StackWise-480参考文档 5、StackWise Virtual 介绍5.1、Stackwise Virtual 角色 角色只有两种，Active和Standby。 初始状态基于两个条件进行选举，priority数值小的优先；系统mac数值小的优先 角色不会发生抢占。 5.2、Stackwise Virtual 部署注意事项 交换机需要具有相同的物理型号、相同的IOS版本、相同类型的授权。 引擎必须位于两个交换机的同一插槽中（例如，使用9407时，两个机箱的插槽3）。 StackWise Virtual Link（SVL）需要在Supervisor上建立10/40G连接。 每个机箱仅支持一个引擎来做StackWise Virtual。如果你安装了两个引擎，则第二个引擎powered off状态。 VLAN 4094由StackWise Virtual使用，因此不能用于任何其他目的。 手动完成StackWise Virtual的配置，双活检测DAD（dual-active detection）和SVL（StackWise Virtual Link），并且在每个步骤之后都需要重新启动交换机。 每个机箱SVL最多可具有80GE（8x10GE或2x40GE）或50GE（2x25GE）的组合带宽。 思科参考文档 5.3、StackWise Virtual 配置1、首先在交换机上创建相同StackWise domain ID。配置优先级，优先级数值低的成为Active。 1234567891011121314151617SW01#switch 1 priority 5 SW01(config)#stackwise-virtualSW01(config-stackwise-virtual)#domain 10SW01#wr memSW01#reload---SW02#switch 1 priority 10SW02#switch 1 renumber 2SW02(config)#stackwise-virtualSW02(config-stackwise-virtual)#domain 10SW02#wr memSW02#reload 2、配置SVL接口 12345678910111213SW01(config)#interface rage TenGigabitEthernet1&#x2F;3&#x2F;0&#x2F;1 - 2SW01(config-if)stackwise-virtual link 1SW01(config-if)#endSW01#wr memSW01#reload---SW02(config)#interface rage TenGigabitEthernet1&#x2F;3&#x2F;0&#x2F;1 - 2SW02(config-if)stackwise-virtual link 1SW02(config-if)#endSW02#wr memSW02#reload 3、配置DAD（dual-active detection）接口，DAD可以加快故障检测时间，这是可选步骤。 1234567891011SW01(config)#interface GigabitEthernet1&#x2F;1&#x2F;0&#x2F;1SW01(config-if)stackwise-virtual dual-active-detectionSW01#wr memSW01#reload---SW02(config)#interface GigabitEthernet1&#x2F;1&#x2F;0&#x2F;1SW02(config-if)stackwise-virtual dual-active-detectionSW02#wr memSW02#reload 4、最后可以通过下面命令来验证结果 12345SW01#show stackwise-virtual switch 1SW01#show stackwise-virtual linkSW01#show stackwise-virtual bandwidthSW01#show stackwise-virtual neighborsSW01#show stackwise-virtual dual-active-detection 配置参考文档 5.4、In-Service Software Upgrade (ISSU 服务中软件升级 )5.4.1、什么是ISSU？ISSU提供了一种机制，在交换机继续转发流量的情况下进行软件升级和降级，ISSU利用NSF和SSO功能在升级或降级期间继续转发流量，切换的速度小于200ms。Catalyst 3850和Catalyst 9000系列做Stackwise-Virtual之后可以支持ISSU，具有双引擎的Catalyst 9400/9600独立支持ISSU，另外思科最新的无线控制C9800系列也可以支持ISSU进行升级。这里可以查看版本兼容列表。 5.4.2、ISSU 工作流程下面图片简要描述了C9K在ISSU升级过程中的步骤： 镜像已经存在于Active和Standby。 Standby镜像开始升级。 Standby升级成功之后会自动切换为Active，此时原先的Active已经成为Standby并且开始升级。 Standby升级完成，升级完成后其实引擎的主备切换了。 5.4.3、C9500 StackWise-Virtual ISSU 配置步骤关于详细的升级步骤以及注意事项参考这个文档 升级步骤关键有三步 123C9500#install add file flash:cat9k-universalk9.SPA.16.09.03.BETA.E1.SSA.bin.bin C9500#install activate issuC9500#install commit 三个步骤也可以简化可以一条命令执行 1C9500#install add file flash:cat9k-universalk9.SPA.16.09.03.BETA.E1.SSA.bin.bin activate ISSU commit 6、参考链接 思科C9K系列StackWise Virtual白皮书：https://www.cisco.com/c/en/us/products/collateral/switches/catalyst-9000/nb-06-cat-9k-stack-wp-cte-en.html StackWise-480 白皮书：https://www.cisco.com/c/en/us/products/collateral/switches/catalyst-9300-series-switches/white-paper-c11-741468.html Cisco StackWise Virtual Q&amp;A：https://www.cisco.com/c/dam/en/us/products/collateral/switches/catalyst-3850-series-switches/q-and-a-c67-738577.pdf What is the Cisco Stackwise Virtual Technology? 6 FAQ You Need to Know!：https://blog.router-switch.com/2019/12/what-is-the-cisco-stackwise-virtual-technology/ Extended Fast Software Upgrade on Catalyst 9300 Platform：https://www.cisco.com/c/en/us/support/docs/switches/catalyst-9300-series-switches/216837-extended-fast-software-upgrade-on-cataly.html Stackwise实物接线：https://www.youtube.com/watch?v=5bimzoJJkK8 思科堆栈配置-如何从堆栈中移除交换机：https://www.youtube.com/watch?v=-J9wtau25sY","categories":[{"name":"Network","slug":"Network","permalink":"https://liuqianglong.com/categories/Network/"}],"tags":[{"name":"Cisco","slug":"Cisco","permalink":"https://liuqianglong.com/tags/Cisco/"},{"name":"StackWise","slug":"StackWise","permalink":"https://liuqianglong.com/tags/StackWise/"}],"keywords":[{"name":"Network","slug":"Network","permalink":"https://liuqianglong.com/categories/Network/"}]},{"title":"ISP Failover PAT配置","slug":"ISP-Failover-PAT配置","date":"2021-06-16T12:08:19.000Z","updated":"2021-06-17T02:14:57.769Z","comments":true,"path":"ISP-Failover-PAT配置.html","link":"","permalink":"https://liuqianglong.com/ISP-Failover-PAT%E9%85%8D%E7%BD%AE.html","excerpt":"","text":"1、介绍为了实现出口ISP链路的冗余，可以在出口路由器上连接两条不同的ISP线路，获得链路冗余的同时也带来新的问题，即如何决定流量送往哪个ISP。一般来说有两种流量选择方式：负载均衡和主备切换。 负载均衡：出口网关配置两条默认路由分别到ISP1和ISP2，去往ISP的流量会通过这两条等价的默认路由进行负载均衡，可以通过ip cef load-sharing algorithm命令修改负载均衡的算法，参见文档。负载均衡方式的优势在于更加充分的利用两条线路带宽，当其中一个ISP不可用时，故障切换速度更快。 主备切换：利用浮动静态路由和SLA结合来实现主用到ISP1，当ISP1出现故障时能自动切换到ISP2。主备切换的优势在于出口公网IP固定，线路更加稳定。但是备用链路的带宽长期是闲置的。当主用ISP1可用时，流量不会走备用ISP2，但是你可以通过添加明细路由到ISP2改变流量选路，也可以通过PRB抓取特定的源IP地址通过备用ISP2出去。 另外需要注意的是这种NAT的切换需要结合route-map来配置。 2、拓扑图这里使用EVE-NG的CSR1Kv搭建的实验环境，使用GNS3和其他型号路由器对实验结果没有影响。 3、设备初始化这里初始化所有设置的IP地址，以及内部路由配置，出口网关的路由和NAT在下一个部分配置。 CSR1（Inside-Router） 12345678910111213host Inside-Router！interface Loopback0 ip address 172.20.10.1 255.255.255.0！interface GigabitEthernet1 ip address 172.20.1.1 255.255.255.0！router ospf 10 network 172.20.1.0 0.0.0.255 area 0 network 172.20.10.0 0.0.0.255 area 0！ip route 0.0.0.0 0.0.0.0 172.20.1.254 CSR2（GW） 12345678910111213host GW！interface GigabitEthernet1 ip address 172.20.1.254 255.255.255.0!interface GigabitEthernet2 ip address 52.83.1.1 255.255.255.0!interface GigabitEthernet3 ip address 52.83.2.1 255.255.255.0!router ospf 10 network 172.20.1.0 0.0.0.255 area 0 CSR3（ISP-Router） 12345678910host ISP-Router！interface GigabitEthernet1 ip address 52.84.1.1 255.255.255.0!interface GigabitEthernet2 ip address 52.83.1.2 255.255.255.0!interface GigabitEthernet3 ip address 52.83.2.2 255.255.255.0 CSR4（ISP-Service） 123456host ISP-Service！interface GigabitEthernet1 ip address 52.84.1.2 255.255.255.0!ip route 0.0.0.0 0.0.0.0 52.84.1.1 4、负载均衡配置这里配置去往ISP1和ISP2的默认路由为等价路由，需要利用route-map来结合NAT进行配置。 CSR1（Inside-Router） 12345678910111213141516171819202122232425262728293031interface GigabitEthernet1 ip address 172.20.1.254 255.255.255.0 ip nat inside!interface GigabitEthernet2 ip address 52.83.1.1 255.255.255.0 ip nat outside!interface GigabitEthernet3 ip address 52.83.2.1 255.255.255.0 ip nat outsideip access-list extended NAT_ACL permit ip 172.20.0.0 0.0.255.255 any log!route-map NAT_ISP1 permit 10 match ip address NAT_ACL match interface GigabitEthernet2!route-map NAT_ISP2 permit 10 match ip address NAT_ACL match interface GigabitEthernet3ip nat pool ISP1_Pool 52.83.1.100 52.83.1.110 netmask 255.255.255.0ip nat pool ISP2_Pool 52.83.2.100 52.83.2.110 netmask 255.255.255.0ip nat inside source route-map NAT_ISP1 pool ISP1_Pool overloadip nat inside source route-map NAT_ISP2 pool ISP2_Pool overloadip route 0.0.0.0 0.0.0.0 52.83.1.2ip route 0.0.0.0 0.0.0.0 52.83.2.2 查看网关的出口路由，去往ISP1和ISP2的等价路由。 1234GW#show ip routeS* 0.0.0.0&#x2F;0 [1&#x2F;0] via 52.83.2.2 [1&#x2F;0] via 52.83.1.2O 172.20.10.1&#x2F;32 [110&#x2F;2] via 172.20.1.1, 1d02h, GigabitEthernet1 内部路由器测试 12345678910Inside-Router#ping 52.84.1.2Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 52.84.1.2, timeout is 2 seconds:.!!!!Inside-Router#ping 52.84.1.2 source lo0Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 52.84.1.2, timeout is 2 seconds:Packet sent with a source address of 172.20.10.1.!!!! 查看转换表项，可以看到不同的源IP从不同的ISP链路出去。 12345GW#show ip nat translationsPro Inside global Inside local Outside local Outside globalicmp 52.83.2.100:1 172.20.10.1:48 52.84.1.2:48 52.84.1.2:1icmp 52.83.1.100:1 172.20.1.1:47 52.84.1.2:47 52.84.1.2:1Total number of translations: 2 通过show ip cef exact-route 命令可以用来预测源到目的IP使用的下一跳接口和IP地址。 12345GW#show ip cef exact-route 172.20.1.1 52.84.1.2172.20.1.1 -&gt; 52.84.1.2 &#x3D;&gt;IP adj out of GigabitEthernet2, addr 52.83.1.2GW#show ip cef exact-route 172.20.10.1 52.84.1.2172.20.10.1 -&gt; 52.84.1.2 &#x3D;&gt;IP adj out of GigabitEthernet3, addr 52.83.2.2 5、主备配置5.1、主备切换这里配置ISP1为主用，利用SLA监控ISP1直连地址，当ISP1不可用时路由切换到ISP2上。 CSR2（GW），注意这里为了试验需要将sla的参数调的更小了，生产环境下需要自己设计这个参数。frequency表示这里每3秒发送一次探针，timeout表示发送探针后1秒后还未接受到那么认为这个探针超时了，threshold表示连续两次超时后达到阈值。所以结合上面的参数，当52.83.1.2不可达后，最多需要6秒sla会达到阈值。（注意，这里需要先删除上面指向ISP2的路由之后再添加管理距离更大的路由） 12345678910111213ip sla 10 icmp-echo 52.83.1.2 source-ip 52.83.1.1 threshold 2 timeout 1000 frequency 3ip sla schedule 10 life forever start-time nowtrack 10 ip sla 10 reachabilityno ip route 0.0.0.0 0.0.0.0 52.83.1.2ip route 0.0.0.0 0.0.0.0 52.83.1.2 track 10ip route 0.0.0.0 0.0.0.0 52.83.2.2 10 GW查看路由表和SLA状态 12GW#show ip routeS* 0.0.0.0&#x2F;0 [1&#x2F;0] via 52.83.1.2 123456789GW#show ip sla summaryIPSLAs Latest Operation SummaryCodes: * active, ^ inactive, ~ pendingID Type Destination Stats Return Last (ms) Code Run-----------------------------------------------------------------------*10 icmp-echo 52.83.1.2 RTT&#x3D;12 Over thresh 0 seconds ago old 内部路由器ping测试 12345678910Inside-Router#ping 52.84.1.2Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 52.84.1.2, timeout is 2 seconds:.!!!!Inside-Router#ping 52.84.1.2 source lo0Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 52.84.1.2, timeout is 2 seconds:Packet sent with a source address of 172.20.10.1.!!!! GW查看转换表项，可以看到流量都是从ISP1出去。 12345GW#show ip nat translationsPro Inside global Inside local Outside local Outside globalicmp 52.83.1.100:1 172.20.1.1:49 52.84.1.2:49 52.84.1.2:1icmp 52.83.1.100:2 172.20.10.1:50 52.84.1.2:50 52.84.1.2:2Total number of translations: 2 CSR3（ISP-Router)，关闭G2端口，模拟ISP1故障。 12ISP-Router(config)#interface g2ISP-Router(config-if)#shutdown GW上查看sla状态变为Down，默认路由切换到了ISP2上。 1*Jun 16 07:53:00.039: %TRACK-6-STATE: 10 ip sla 10 reachability Up -&gt; Down 12GW#show ip routeS* 0.0.0.0&#x2F;0 [1&#x2F;0] via 52.83.2.2 Inside-Router重新发起流量测试 1234567891011Inside-Router#ping 52.84.1.2Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 52.84.1.2, timeout is 2 seconds:!!!!!Success rate is 100 percent (5&#x2F;5), round-trip min&#x2F;avg&#x2F;max &#x3D; 13&#x2F;18&#x2F;34 msInside-Router#ping 52.84.1.2 source lo0Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 52.84.1.2, timeout is 2 seconds:Packet sent with a source address of 172.20.10.1!!!!! GW查看NAT转换表项，流量都从ISP2出去。 12345GW#show ip nat translationsPro Inside global Inside local Outside local Outside globalicmp 52.83.2.100:2 172.20.10.1:55 52.84.1.2:55 52.84.1.2:2icmp 52.83.2.100:1 172.20.1.1:54 52.84.1.2:54 52.84.1.2:1Total number of translations: 2 5.2、使用明细路由控制出口ISP在上面的主备切换模式下，所有流量都通过ISP1出去，如果你需要指定去往某些特定IP的地址从ISP2出去，可以通过配置明细路由来实现。 恢复ISP-Router G2号接口 12ISP-Router(config)#int g2ISP-Router(config-if)#no shutdown 去往52.84.1.2/32的地址通过ISP2访问。 1GW(config)#ip route 52.84.1.2 255.255.255.255 52.83.2.2 在Inside路由器上ping测试到52.84.1.1和52.84.1.2 1234567891011Inside-Router#ping 52.84.1.1Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 52.84.1.1, timeout is 2 seconds:!!!!!Success rate is 100 percent (5&#x2F;5), round-trip min&#x2F;avg&#x2F;max &#x3D; 10&#x2F;12&#x2F;18 msInside-Router#ping 52.84.1.2Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 52.84.1.2, timeout is 2 seconds:!!!!!Success rate is 100 percent (5&#x2F;5), round-trip min&#x2F;avg&#x2F;max &#x3D; 13&#x2F;20&#x2F;46 ms 查看转换表项，看到去往52.84.1.2通过ISP2出去 12345GW#show ip nat translationsPro Inside global Inside local Outside local Outside globalicmp 52.83.1.100:1 172.20.1.1:58 52.84.1.1:58 52.84.1.1:1icmp 52.83.2.100:1 172.20.1.1:59 52.84.1.2:59 52.84.1.2:1Total number of translations: 2 5.3、使用PBR控制出口ISP如果是希望控制特定的源IP地址从ISP2出去，那么通过添加明细路由就无法解决这个问题了，这种场景下可以通过PBR（策略路由）来实现这个需求，通过抓取指定的源IP地址送到ISP2的下一跳出去。 删除添加的明细路由，重新回到主备状态。 1GW(config)#no ip route 52.84.1.2 255.255.255.255 52.83.2.2 CSR2（GW），配置PRB，抓取Inside-Router的环回口从ISP2出去。 12345678910ip access-list extended TO_ISP2_ACL permit ip host 172.20.10.1 anyroute-map Route_ISP2 permit 10 match ip address TO_ISP2_ACL set ip next-hop 52.83.2.2interface GigabitEthernet1 ip address 172.20.1.254 255.255.255.0 ip policy route-map Route_ISP2 在Insid-Router上使用不用的源IP进行测试 123456789101112Inside-Router#ping 52.84.1.2Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 52.84.1.2, timeout is 2 seconds:!!!!!Success rate is 100 percent (5&#x2F;5), round-trip min&#x2F;avg&#x2F;max &#x3D; 13&#x2F;19&#x2F;26 msInside-Router#ping 52.84.1.2 source lo 0Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 52.84.1.2, timeout is 2 seconds:Packet sent with a source address of 172.20.10.1!!!!!Success rate is 100 percent (5&#x2F;5), round-trip min&#x2F;avg&#x2F;max &#x3D; 12&#x2F;23&#x2F;53 ms 查看转换表项，确认Inside-Router环回口地址从ISP2出去。 12345GW#show ip nat translationsPro Inside global Inside local Outside local Outside globalicmp 52.83.1.100:1 172.20.1.1:63 52.84.1.2:63 52.84.1.2:1icmp 52.83.2.100:1 172.20.10.1:62 52.84.1.2:62 52.84.1.2:1Total number of translations: 2 上述的PRB配置有一个隐患，因为PRB下一跳强制指向了ISP2的接口，如果ISP2不可达了，那么抓取的源IP无法进行切换。可以在PRB也结合SLA配置来实现自动切换。 配置SLA监控ISP2接口地址，PBR调用SLA。 12345678910111213ip sla 20 icmp-echo 52.83.2.2 source-ip 52.83.2.1 threshold 2 timeout 1000 frequency 3ip sla schedule 20 life forever start-time nowtrack 20 ip sla 20 reachabilityGW(config)#route-map Route_ISP2 permit 10GW(config-route-map)#no set ip next-hop 223.70.229.53 52.83.2.2GW(config-route-map)#set ip next-hop verify-availability 52.83.2.2 1 track 20 在Inside-Router上进行长ping测试 1Inside-Router#ping 52.84.1.2 source lo 0 re 1000000 关闭ISP-Router的G3接口，模拟ISP2故障 12ISP-Router(config)#int g3ISP-Router(config-if)#shutdown 如果为Inside-Router持续ping时，GW会认为是一个连续的会话，会继续匹配以前的NAT转换表项，从而刷新NAT转换表项（默认超时时间60s）造成不通。 12345678GW#show ip nat translations verbosePro Inside global Inside local Outside local Outside globalicmp 52.83.1.100:1 172.20.10.1:67 52.84.1.2:67 52.84.1.2:1 create: 06&#x2F;16&#x2F;21 10:18:21, use: 06&#x2F;16&#x2F;21 10:18:21, timeout: 00:00:56 Map-Id(In): 12 Appl type: none Mac-Address: 0000.0000.0000 Input-IDB: GigabitEthernet1 entry-id: 0xe94efa80, use_count:1 此时需要强制清空NAT转换表项即可。或者Inside-Router重新发起一次ping也可以正常通信，因为新的ping进行会在GW上创建新的NAT转换表项。 1GW#cle ip nat translation * 5.4、PAT地址池在实际环境中ISP提供公网地址时，互联地址和公网IP地址池可能不在一个网段。例如互联地址段是52.83.1.0/24，提供的公网地址池是52.83.100.100~52.83.100.110，在这个实验环境下模拟这个场景时需要在ISP-Router上添加去往52.83.100.0/24的路由即可。 GW 修改地址池 12345no ip nat pool ISP1_Pool 52.83.1.100 52.83.1.110 netmask 255.255.255.0no ip nat pool ISP2_Pool 52.83.2.100 52.83.2.110 netmask 255.255.255.0ip nat pool ISP1_Pool 52.83.100.100 52.83.100.110 netmask 255.255.255.0ip nat pool ISP2_Pool 52.83.200.100 52.83.200.110 netmask 255.255.255.0 ISP-Router添加去往NAT地址池的路由即可 12ip route 52.83.100.0 255.255.255.0 52.83.1.1ip route 52.83.200.0 255.255.255.0 52.83.2.1 参考文档 ISP Failover with Default Routes using IP SLA Tracking：https://www.cisco.com/c/en/us/support/docs/ip/ip-routing/200785-ISP-Failover-with-default-routes-using-I.html CONFIGURING POLICY-BASED ROUTING (PBR) WITH IP SLA TRACKING - AUTO REDIRECTING TRAFFIC：http://www.firewall.cx/cisco-technical-knowledgebase/cisco-routers/861-cisco-router-pbr-ipsla-auto-redirect.html Cisco IP SLA — Using a Cisco Router to generate traffic：https://www.practicalnetworking.net/stand-alone/cisco-ip-sla-using-a-cisco-router-to-generate-traffic/","categories":[{"name":"Network","slug":"Network","permalink":"https://liuqianglong.com/categories/Network/"}],"tags":[{"name":"Network","slug":"Network","permalink":"https://liuqianglong.com/tags/Network/"},{"name":"NAT","slug":"NAT","permalink":"https://liuqianglong.com/tags/NAT/"},{"name":"SLA","slug":"SLA","permalink":"https://liuqianglong.com/tags/SLA/"},{"name":"PBR","slug":"PBR","permalink":"https://liuqianglong.com/tags/PBR/"}],"keywords":[{"name":"Network","slug":"Network","permalink":"https://liuqianglong.com/categories/Network/"}]},{"title":"AWS Session Manager","slug":"AWS-Session-Manager","date":"2021-05-11T08:42:53.000Z","updated":"2021-05-11T09:14:01.152Z","comments":true,"path":"AWS-Session-Manager.html","link":"","permalink":"https://liuqianglong.com/AWS-Session-Manager.html","excerpt":"","text":"Session Manager介绍简单来说，Session Manager有点类似于VMware的控制台功能，你可以通过AWS控制台或者AWS CLI连接到EC2上。下面是一段官方文档介绍： AWS Systems Manager 会话管理器是一个新的交互式 Shell 和 CLI，有助于提供安全、访问权限受到控制且经过审计的 Windows 和 Linux EC2 实例管理。使用会话管理器，您无需打开入站端口、管理 SSH 密钥或使用堡垒主机。并且登录的主机可以处于公有子网或者私有子网。 借助会话管理器，您可以提高安全性，集中进行访问管理并接收详细的审计。除了无需打开入站端口之外，您还可以结合使用会话管理器与 AWS NAT Gateway，以便登录处于私有子网的EC2主机。通过使用 AWS Identity and Access Management (IAM) 策略，您可以在一个中心位置授予和撤销对实例的访问权限。提供访问权限后，您可以使用 AWS CloudTrail 审计哪个用户访问了实例，并将每个命令记录到 Amazon S3 或 Amazon CloudWatch Logs。会话管理器用户只需单击并启动一个会话，然后选择一个实例，即可快速开始使用该工具。 下载安装ssm-agent查看ssm-agent的版本 12amazon-ssm-agent -versionSSM Agent version: 3.0.529.0 下载安装，或者升级到最新版的ssm-agent 1yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm 配置Session Manager创建一个日志组，用于存放用户的操作日志 编辑会话管理器的参数，设置了20分钟的超时时间，指定日志组。 默认情况下，AWS Systems Manager 没有权限操作你的实例，需要为EC2关联一个IAM角色。至少要为EC2分配AmazonSSMManagedInstanceCore这个内置策略。这里将Systems Manager操作的日志发送到CloudWatch上，所以还要关联一个CloudWatch的权限。 EC2关联IAM角色 可以点击EC2进行连接 也可以进入会话管理器界面启动会话 选中EC2进行连接 通过Session Manager进行登录，默认用户是ssm-user，可以通过 su 命令进行用户切换。 在CloudWatch上查看用户刚才输入的命令以及回显。 授权其他用户通过SSM登录创建用户，暂时不分配权限 创建策略，这里添加了一个条件，EC2需要添加资源标签SSM:Bastion-EC2，这样可以更精细化的控制用户权限。 策略json文件 123456789101112131415161718192021222324252627&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Sid&quot;: &quot;VisualEditor0&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;ssm:GetConnectionStatus&quot;, &quot;ec2:DescribeInstances&quot;, &quot;ssm:DescribeSessions&quot;, &quot;ssm:DescribeInstanceProperties&quot; ], &quot;Resource&quot;: &quot;*&quot; &#125;, &#123; &quot;Sid&quot;: &quot;VisualEditor1&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: &quot;ssm:StartSession&quot;, &quot;Resource&quot;: &quot;*&quot;, &quot;Condition&quot;: &#123; &quot;StringLike&quot;: &#123; &quot;ssm:resourceTag/SSM&quot;: &quot;Bastion-EC2&quot; &#125; &#125; &#125; ]&#125; 用户关联权限策略，需要注意的是，修改策略之后，用户需要重新登录才会生效（或者很长时间生效，没有继续测试）。 EC2添加标签键为SSM，值为Bastion-EC2。 使用新用户登录测试 可以在管理员账号下查看日志 这里演示一下实验过程中遇到IAM授权问题如何解决，例如SSM-User直接点击EC2进行连接会有下面报错，发现是没有ssm:DescribeInstanceInformation授权，那么就可以在策略里面添加对应的权限。 在策略里面添加对应的权限。 重新连接成功。 参考资料 AWS Systems Manager：https://docs.aws.amazon.com/zh_cn/systems-manager/latest/userguide/setup-instance-profile.html Still using SSH on AWS? Check out Session Manager instead!：https://www.youtube.com/watch?v=TiaxgThfTRc 忘记堡垒机，使用 Session Manager 登录和管理 EC2 主机：https://aws.amazon.com/cn/blogs/china/session-manager-register-ec2/?nc1=b_rp","categories":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"SSM","slug":"SSM","permalink":"https://liuqianglong.com/tags/SSM/"}],"keywords":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/categories/AWS/"}]},{"title":"Python对文本中的特定单词进行逆序替换","slug":"Python对文本中的特定单词进行逆序替换","date":"2021-04-25T09:57:40.000Z","updated":"2021-04-25T10:50:30.391Z","comments":true,"path":"Python对文本中的特定单词进行逆序替换.html","link":"","permalink":"https://liuqianglong.com/Python%E5%AF%B9%E6%96%87%E6%9C%AC%E4%B8%AD%E7%9A%84%E7%89%B9%E5%AE%9A%E5%8D%95%E8%AF%8D%E8%BF%9B%E8%A1%8C%E9%80%86%E5%BA%8F%E6%9B%BF%E6%8D%A2.html","excerpt":"","text":"需求描述前端时间做了一个Python的小练习题，这个问题初看简单，做下来发现有不少以前没有了解的知识点，这里记录一下解决的过程。 需求：在文本里面任意给定一个单词，将这个单词逆序之后替换原来位置的单词，返回替换后的文本。 这里随意写了一段文本，需要进行逆序替换的关键字是long 12str1 = &#x27;&#x27;&#x27;long The time that my journey takes is long and the way of it long.I came out on loanglongthe chariot of the first gleam long, of light, long many a star and planet long&#x27;&#x27;&#x27; 替换后的效果如下： 12gnol The time that my journey takes is gnol and the way of it gnol.I came out on loanglongthe chariot of the first gleam gnol, of light, gnol many a star and planet gnol 推荐大家先自己做一下这个题，直接看答案就失去了很多乐趣，实在做不出来再慢慢看这个答案。 . . . 做 题 中 . . . 需求分析这个需求大致看来就2个步骤：1、将单词进行逆序；2、用逆序后的单词替换原来的单词。 将单词进行逆序方法还是比较多的，逆序之后进行替换这个需求应该很快能想到正则表达式来做替换。总体思路没有问题，下面开干。 解决步骤逆序单词首先想到的是reverse方法，将单词转换为一个列表，然后用reverse方法逆序列表，最后用join方法将列表里面的单词组合起来。 1234567891011import restr1 = &#x27;&#x27;&#x27;long The time that my journey takes is long and the way of it long.I came out on loanglongthe chariot of the first gleam long, of light, long many a star and planet long&#x27;&#x27;&#x27;keyword = &#x27;long&#x27;reverse_key = list(keyword)reverse_key.reverse()new_k1 = &#x27;&#x27;.join(reverse_key)print(new_k1) 输入结果如下： 1gnol 上面的结果确实满足了要求，但是解决的不够优雅，这里推荐用更加简洁的一种方法，这是python的slice notation的特殊用法，格式为a[i:j:s]，这里i和j都缺省了相当于复制了一份keyword，s 表示步进，默认为1，当为负数时表示从右往左取，所以keyword[::-1]即为逆序复制。 123456789import restr1 = &#x27;&#x27;&#x27;long The time that my journey takes is long and the way of it long.I came out on loanglongthe chariot of the first gleam long, of light, long many a star and planet long&#x27;&#x27;&#x27;keyword = &#x27;long&#x27;new_k1 = keyword[::-1]print(new_k1) 参考链接：https://www.cnblogs.com/mxh1099/p/5804064.html a = [0,1,2,3,4,5,6,7,8,9]b = a[i:j] 表示复制a[i]到a[j-1]，以生成新的list对象b = a[1:3] 那么，b的内容是 [1,2]当i缺省时，默认为0，即 a[:3]相当于 a[0:3]当j缺省时，默认为len(alist), 即a[1:]相当于a[1:10]当i,j都缺省时，a[:]就相当于完整复制一份a了 b = a[i:j:s]这种格式呢，i,j与上面的一样，但s表示步进，缺省为1.所以a[i:j:1]相当于a[i:j]当s&lt;0时，i缺省时，默认为-1. j缺省时，默认为-len(a)-1所以a[::-1]相当于 a[-1:-len(a)-1:-1]，也就是从最后一个元素到第一个元素复制一遍。 替换单词replace方法要做正则替换刚开始我想到了replace方法，但是使用这个方法会误伤到包含关键字的单词，例如下面我乱构造的「单词」loanglong内部的long也被做了替换，这显然不是想要的结果。我只想要对特定的单词进行替换，不是只要包含这几个字母都做替换。这里f&#39;&#123;new_k1&#125;&#39;可以使用f-string导入新的字符串。 inputs = “hello 11 word 11” 想11变成22 replacestr = inputs.replace(“11”,”22”) 123456789import restr1 = &#x27;&#x27;&#x27;long The time that my journey takes is long and the way of it long.I came out on loanglongthe chariot of the first gleam long, of light, long many a star and planet long&#x27;&#x27;&#x27;keyword = &#x27;long&#x27;new_k1 = keyword[::-1]new_str1 = str1.replace(&#x27;long&#x27;, f&#x27;&#123;new_k1&#125;&#x27;)print(new_str1) 12gnol The time that my journey takes is gnol and the way of it gnol.I came out on loanggnolthe chariot of the first gleam gnol, of light, gnol many a star and planet gnol re.sub方法replace无法解决这个问题，需要re.sub这个方法来解决问题了，这个函数就是主要用来替换字符串中的匹配项。函数有5个参数，前面3个参数是必选项。 1re.sub(pattern, repl, string, count&#x3D;0, flags&#x3D;0) pattern：表示正则中要匹配的字符串； repl：表示想要替换的字符串，既匹配出来的pattern替换为repl，这里repl可以是个函数； string：表示要被查找的原始字符串； count：表示要替换的最大次数，默认为0，表示所有匹配的都会被替换，是可选参数； flags：表示编译时用的匹配模式，例如互联大小写、多行模式等，默认为0； 下面用re.sub()方法先试一下，可以看到还是出现一样的问题，我乱构造的「单词」loanglong内部的long也被做了替换。问题出现在匹配不精确，这里我只想要匹配单词long，但是里面包含这个关键词的不想被匹配到。 12345678910import restr1 = &#x27;&#x27;&#x27;long The time that my journey takes is long and the way of it long.I came out on loanglongthe chariot of the first gleam long, of light, long many a star and planet long&#x27;&#x27;&#x27;keyword = &#x27;long&#x27;new_k1 = keyword[::-1]new_str1 = re.sub(fr&#x27;&#123;keyword&#125;&#x27;, fr&#x27;&#123;new_k1&#125;&#x27;, str1)print(new_str1) 12gnol The time that my journey takes is gnol and the way of it gnol.I came out on loanggnolthe chariot of the first gleam gnol, of light, gnol many a star and planet gnol 零宽断言这个卡了我特别长时间，因为我不知道”零宽断言“这个「高级货」技术… 这个技术涉及到比较多绕口的名词，先来看下不用这个技术会遇到什么问题。即pattern参数匹配的关键字都会被替换，这里希望描述一下单词的前后是什么内容，但是并不希望这种描述本身也被匹配进去。 所以零宽断言的作用是并不真正匹配字符串，而仅仅是匹配对应的位置，断言本身不会被匹配，因为匹配的宽度为零，所以叫零宽。断言可以理解为判断的意思，正则表达式里面有很多断言，例如^匹配字符串的开头，$匹配字符串的末尾，\\b匹配单词的边界等。 1(?&lt;&#x3D;exp1)(?&lt;!exp2)string(?&#x3D;exp3)(?!exp4) ?&lt;= 代表正回顾后发断言，它断言自身出现的位置的前面可以匹配exp1表达式。例如：(?&lt;=\\d)a，返回匹配字符串中以数字为开头的a字符。 ?= 代表正预测先行断言，表示自身出现的位置的后面可以匹配exp3表达式。例如：a(?=\\d)，返回匹配字符串中以数字为结尾的a字符。 ?&lt;! 代表负回顾后发断言，它断言自身出现的位置的前面不可以匹配exp2的表达式。例如：a(?!\\d)，返回不匹配字符串中以数字开头的a字符。 ?! 代表负预测先行断言，它断言自身出现的位置的后面不可以匹配exp4表达式。例如：a(?!\\d)，返回不匹配字符串中以数字结尾的a字符。 上面的概念第一次接触会有点绕，总的来说就是你想描述string这个单词前面一定具备某个特征、后面一定具体某个特征、前面一定没有这个特征、后面一定没有这个特征，一共就是这4种情况。 回到上面的需求，我想要匹配出单独的一个单词long，这个关键词前后有字母的不会被匹配。所以需要匹配出一个单词的边界，就是\\b。 \\b与\\B这里简单描述\\b的作用，它用来匹配一个「单词」的边界，边界近似于\\w即([0-9a-zA-Z_])。 例如下面的字符串abc!123_，这里认为abc和123_都是一个「单词」，那么它们的前后就是边界。\\B取\\b的相反即可， 12345678910import restr1 = &#x27;abc!123_&#x27;result1 = re.findall(r&#x27;\\b&#x27;, str1)result2 = re.findall(r&#x27;\\B&#x27;, str1)print(result1)print(result2) 12[&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;][&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;] 最终的代码如下： 12345678910import restr1 = &#x27;&#x27;&#x27;long The time that my journey takes is long and the way of it long.I came out on loanglongthe chariot of the first gleam long, of light, long many a star and planet long&#x27;&#x27;&#x27;keyword = &#x27;long&#x27;new_k1 = keyword[::-1]new_str1 = re.sub(fr&#x27;(?&lt;=\\b)&#123;keyword&#125;(?=\\b)&#x27;, fr&#x27;&#123;new_k1&#125;&#x27;, str1)print(new_str1) 12gnol The time that my journey takes is gnol and the way of it gnol.I came out on loanglongthe chariot of the first gleam gnol, of light, gnol many a star and planet gnol 参考资料 Python3 re模块：https://docs.python.org/3/library/re.html 正则表达式sub：https://www.jb51.net/article/170226.htm 正则表达式的\\b与\\B：https://www.jb51.net/article/138235.htm 零宽断言：https://www.shuzhiduo.com/A/QW5Y2nZBdm/","categories":[{"name":"Python","slug":"Python","permalink":"https://liuqianglong.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://liuqianglong.com/tags/Python/"},{"name":"正则表达式","slug":"正则表达式","permalink":"https://liuqianglong.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}],"keywords":[{"name":"Python","slug":"Python","permalink":"https://liuqianglong.com/categories/Python/"}]},{"title":"Cisco ISE Posture 结合 SSLVPN","slug":"Cisco-ISE-Posture-结合-SSLVPN","date":"2021-02-03T10:44:42.000Z","updated":"2021-04-25T10:47:59.279Z","comments":true,"path":"Cisco-ISE-Posture-结合-SSLVPN.html","link":"","permalink":"https://liuqianglong.com/Cisco-ISE-Posture-%E7%BB%93%E5%90%88-SSLVPN.html","excerpt":"","text":"描述了思科ISE Posture结合ASA SSLVPN的使用场景。员工使用AnyConnect拨号到公司内网时，需要通过思科ISE Posture检测，检测通过才能访问内网，否则网络访问受到限制。 一、Cisco ISE Posure介绍1.1、Posture简介思科的ISE Posture提供了网络准入的功能，也就是当员工的电脑只有满足合规条件时才能接入到公司网络。这里合规条件可以针对Windows和MacOS自定义各种类型的条件，以Windows为例，条件可以是：系统必须开启防火墙；系统必须开启BitLocker；系统必须拥有最新的补丁等。满足这些条件才能接入到公司网络。这里网络可以是有线、无线、VPN。这次实验场景就是当员工使用AnyConnect SSLVPN接入到公司网络时，Posture模块只会允许满足条件的电脑接入网络。 另外思科针对SSLVPN准入，也可以利用HostScan进行扫描，HostScan可以集成在AnyConnect模块中，不需要客户端安装单独的软件模块，但是检测的能力不如安装了Posture模块的客户端。针对HostSan的准入检测，后续会在其他实验演示。 1.2、Posture部署模式介绍Posture的关键是需要收集到客户端的系统信息，那么客户端上必须要有某种采集信息的代理，ISE2.4提供了3种类型的部署方式： 1.2.1 AnyConnect这种是最常用的安装方式，会在客户端上安装Posure软件模块，安装之后AnyConnect UI会多出一个模块。这种部署方式支持Posture所有的检测功能，本次实验也是这种部署方式。需要注意的是，这种部署方式需要ISE拥有Apex授权，AnyConnect拥有Apex授权。 1.2.2 Stealth AnyConnect（隐形模式）Stealth AnyConnect和AnyConnect模式几乎一样，也会在客户端上安装软件模块。如果你单独安装Stealth AnyConnect，那么它是没有UI界面的，所以叫隐形模式。但是如果你安装了AMP或者VPN模块，那么客户度会显示UI界面。所以如果你要用在SSLVPN准入上，这种模式不太适合，因为必然会出现UI界面。这种模式更加适合企业内网无线或者有线的准入，但是不想让用户看见UI界面的场景。 1.2.3 Temporal Agent（临时客户端）Temporal Agent是一个比较新的特性，它不会在客户端电脑上永久安装软件，但是显然检测能力是不如上面两种模式的。比较适合给访客和供应商作为临时的监测方式。 1.2.4 Windows Posture 支持检测特性 Temporal Agent Stealth AnyConnect AnyConnect Posture Conditions Supported Conditions: • AM Installation• Firewall Installation• Application Inventory• Hardware Inventory• USB Check• AV Installation• AV version / date• AS Installation• AS version / date• Application / File Check• Service packs / Hotfixes• Process / Registry Check Supported Conditions:• AM Installation• Firewall Installation• Application Inventory• Hardware Inventory• USB Check• AV Installation• AV version / date• AS Installation• AS version / date• Application / File Check• Service packs / Hotfixes• Process / Registry Check• Patch Management• Disk Encryption• Service Condition• Registry Condition• Dictionary Condition Supported Conditions: • AM Installation• Firewall Installation• Application Inventory• Hardware Inventory• USB Check• AV Installation• AV version / date• AS Installation• AS version / date• Application / File Check• Service packs / Hotfixes• Process / Registry Check• Patch Management• Disk Encryption• Service Condition• Registry Condition• Dictionary Condition Remediation Actions Manual Remediations Partial Automatic Remediation:File, Link, WSUS Show UI, PM activate UI, Message Text. Manual remediation not supported. Both Automatic and Manual Remediation supported Passive Reassessment None Supported Supported 1.2.5 macOS Posture 支持检测特性 Temporal Agent Stealth AnyConnect AnyConnect Posture Conditions Unsupported Conditions:• Service Condition-macOS—System Daemon check• Service Condition-macOS—Daemon or User Agent check• PM—Up to Date check• PM—Enabled check• DE—Encryption Location based check Supported Conditions:• AM Installation• Firewall Enabled• Application Inventory• Hardware Inventory• AV Installation• AV version / date• AS Installation• AS version / date• Application Check• Plist Check• File Check• Patch Management• Service packs / Hotfixes• Disk Encryption• Service Condition• Dictionary Condition Supported Conditions:• AM Installation• Firewall Enabled• Application Inventory• Hardware Inventory• AV Installation• AV version / date• AS Installation• AS version / date• Application Check• Plist Check• File Check• Patch Management• Service packs / Hotfixes• Disk Encryption• Service Condition• Dictionary Condition Remediation Actions Not Supported Unsupported: Manual, Launch program, File condition, Patch management, USB Unsupported: Manual, Launch program, File condition, Patch management, USB Passive Reassessment Not Supported Not Supported Not Supported 二、实验介绍2.1、实验注意事项 ISE Posture功能需要Apex授权，这里实验环境使用ISE的默认90天测试授权。 ASA AnyConnect也需要有Apex授权，这里实验环境依然用的自带测试授权。 客户端需要信任ISE Posture的证书，如果ISE是自签名证书，客户端需要导入ISE证书。 建议管理员离线为用户安装好ISE Posure模块，可以避免很多问题。如果重定向到安装页面，让用户自行下载会遇到各种用户无法处理的问题。 2.2、实验需求用户使用AnyConnect拨号时，需要满足下面条件才能接入，如果不满足合规条件，用户只能访问到隔离网络内的补丁服务器。如果用户电脑未安装Posture模块，当用户首次拨号成功后，页面会重定向到Posture安装页面，用户可以自行下载模块进行安装。 Windows必须开启防火墙功能。 Windows必须开启了BitLocker功能。 Windows在C盘根目录下必须要有test.txt文件。 Windows必须安装最新的补丁文件。 2.3、实验环境介绍本次实验在vSphere环境下进行，ASAv和ISE均是默认的测试授权，ASAv测试授权有限速100k的问题，所以客户端打开Posture重定向网页比较困难，这里我为客户度手动安装Posture客户端。当客户端为通过合规检查时，只能访问ISE、AD、Update Server，不能访问其他服务器。通过合规检测之后允许访问所有网络。 2.4、实验步骤配置整体分为2个部分，ISE Posture的配置和ASA SSLVPN的配置，这里聚焦的核心是ISE Posture配置。 2.4.1 ISE 配置步骤 配置Posture推送策略：当用户未安装Posture客户端拨入VPN时，需要为不同的系统推送不同的Posure Agent。 定义合规检测策略：也就是定义客户端具体需要满足的策略，只有满足这些对应的策略才能接入网络。如果用户账号具有管理员权限也可以定义修复策略，例如Posture自动为客户端打开防火墙。 配置授权策略：ISE为3种状态的客户端给与不同的授权。Unknown状态，重定向到客户端下载页面。Compliant状态，正常授权。Noncompliant状态，授权ACL限制网络访问。 2.4.2 ASA配置步骤ASA上需要注意必须启用CoA（Change of Authorization）功能。CoA提供了在身份验证通过之后更改授权信息的机制，这个场景中，当客户端从不合规状态变为合规状态后，ISE会下发新的授权信息到ASA上。思科使用UDP 1700端口，RFC5176使用UDP 3799端口。 ASA基础配置，本次实验并不讲解ASA的基础配置操作。 ASA SSLVPN配置，这里会主要介绍关于与Posture结合的特殊配置。 三、ISE Posture 配置3.1、配置ISE Posture推送策略 为客户端推送Posture模块默认是禁用的，ISE会依据授权来判断是否推送，这里保持默认即可。 从Cisco网站下载最新的文件。 下载最新的Windows合规检测模块。 AnyConnect现在是单独产品线，不能通过在线直接下载。AnyConnect官网下载地址，文件名称为anyconnect-win-4.9.05042-webdeploy-k9.pkg现在下载AnyConnect需要有CCO权限才能下载，最新版的AnyConnect不太容易找到，但是旧版本还是比较容易找到的，这里只需要4.x版本即可，并不需要最新版本。 通过本地上传AnyConnect客户端到ISE。 创建AnyConnect Posture Profile，里面定义了Posture的一些参数，可以影响客户端Posture的UI和行为。 这里开启Enable Rescan Button，客户端UI上会出现允许客户端重新扫描。 允许客户端访问所有网站。 创建AnyConnect Configure。 选择AnyConnect客户端文件、合规性检测文件、ISE Posture配置文件。 创建Client Provisioning Policy 3.2、定义合规检测策略 定义Window Patch检测策略，Posture模块可以通过Windows Update Agent或者System Center Configuration Manager Client（SCCM Client）方式检测客户端Patch是否合规。如果选择Windows Update Agent方式检测，那么需要确保客户端VPN拨号之后能访问Window更新服务器，如果企业内部署了WSUS等服务器，需要让客户端能访问到WSUS服务器。如果选择SCCM Client方式检测，同样需要确保客户端能和SCCM的DP分发点通信。 这里可以有3种类型的监测方式，Installation表示客户端是否安装了对应的程序，Enabled表示客户端是否激活了程序，Up to Date表示客户端是否拥有最新的文件。这3种监测方式时间递增，监测是否安装速度非常快，监测是否拥有最新的补丁文件速度会慢很多。如果你选择Up to Date，那么你还可以选择监测具体哪类安全级别的补丁需要安装。一般选择Important &amp; critical即可。 配置C盘必须开启BitLocker。这里检测Windows系统，使用4.x以后的合规性检测模块，加密厂商选择微软。BitLocker检测可以检测指定的盘符，也可以指定全盘开启。 配置文件检测策略，这里检测指定目录下文件是否存在。还可以检测文件的创建时间、SHA-256值等信息。 可以利用ISE自带的防火墙检测条件。 这里定义防火墙的Remediation策略，即当用户电脑不合规之后Posture采取的动作，例如可以给用户发送文本消息告诉用户具体哪个地方未合规。也可以配置响应的动作，自动帮助客户端修复。这里Posture可以自动帮助客户端打开防火墙策略，但是需要用户使用管理员账号登录，也就是用户账号要有权限能开启防火墙。 这里定义Window Patch不合规时自动修复。 配置合规条件，调用上面定义的各种条件。当BitLocker和文件检测未通过时，给客户端文本提示信息；当防火墙和Patch检测未通过时，Posture模块进行自动修复。 创建Posture Policy，调用合规条件。 ![image-20210224172153707](../image/Cisco ISE Posture with SSLVPN/image-20210224172153707.png) 3.3、配置授权策略需要为3种不同状态的客户端下发不同的授权： 未安装Posture模块的客户端下发重定向授权，让客户端根据向导安装Posture模块； 合规性检测未通过的客户端下发DACL限制网络访问，未通过检测的客户端一般只允许访问DNS、补丁服务器等。 合规性检测通过的客户端下发正常访问授权。 为没有安装Posture的客户端创建授权策略。 选择网页重定向模板为Client Provisioning(Posture)，这里使用默认的模板，你也可以去修改模板或者创建新的模板。下发重定向ACLPosture_Redirect_ACL，这里只是推送了重定向ACL的名字，所以需要在ASA上创建同名的重定向ACL内容。 创建DACL，限制未合规的客户端访问网络。 一般只允许访问DNS服务、补丁服务器，不允许访问其他内网服务器。这个ACL内容会直接推送到ASA上，并不需要在ASA上创建同名的ACL列表。DACL名字Posture_NonCompliant_ACL。 ACL内容 1234permit udp any any eq domainpermit ip any host 172.20.29.150permit ip any host 172.20.29.190deny ip any any log 创建授权策略，调用DACL。 ISE可以下发group-policy授权到ASA上，需要注意的是推送的只是group-policy名字，所以在ASA上创建的group-policy需要与ISE下发的名字完全一致。 创建网络设备，配置ASA的Radius共享密钥。 ISE创建本地用户用于AnyConnect拨号认证。 ISE创建Policy Set，这里的Conditions可以自己定义。 创建授权策略，这里条件内一定要包含PostureStatus信息，依据3种不同的PostureStatus状态给客户端对应的授权。这里我还加了一个检测条件Cisco-VPN3000·CVPN3000/ASA/PIX7x-Client-Type类型为AnyConnect-Client-SSL-VPN这个表示客户端必须使用AnyConnect客户端拨号。 四、ASA 配置4.1、ASA 基础配置 这里ASA是空配状态进行的，进行了地址初始化，配置了SSH登录，配置了ASDM登录。 12345678910111213141516171819interface GigabitEthernet0&#x2F;0 nameif inside security-level 100 ip address 172.20.29.145 255.255.255.0!interface GigabitEthernet0&#x2F;1 nameif outside security-level 0 ip address 52.94.8.18 255.255.255.0aaa authentication ssh console LOCALssh 0.0.0.0 0.0.0.0 insidehttp server enable 8443http 0 0 insideaaa authentication http console LOCALusername admin password cisco privilege 15route inside 0.0.0.0 0.0.0.0 172.20.29.1 1 通过ASDM上传AnyConnect文件到磁盘下。 1234asa# dirDirectory of disk0:&#x2F;83 -rwx 76380273 13:33:46 Feb 02 2021 anyconnect-win-4.9.05042-webdeploy-k9.pkg 4.1、SSLVPN 配置 配置webvpn，激活AnyConnect拨号。 1234webvpn enable outside anyconnect image disk0:&#x2F;anyconnect-win-4.9.05042-webdeploy-k9.pkg anyconnect enable 当客户端访问内网时，地址转换为ASA的inside接口地址。（这并不是必须的操作，这里只是为了省略解决内网路由的问题，否则内网服务器需要有路由能到客户端地址段） 123object network anyconnect_pool_object subnet 192.168.100.0 255.255.255.0nat (outside,inside) source dynamic anyconnect_pool_object interface ASA CoA和重定向列表，这应该是最不同于传统SSLVPN的配置。 COA：当ISE感知到客户端从非合规状态变为合规状态时会下发新的授权，ASA只有启用的CoA功能才能使用新的授权信息。 重定向列表：初看上去很难理解具体的含义，这里你需要重新理解ACL的permit和deny的含义。这里的deny表示抓取到的流量不会被重定向，permit表示抓取的流量会被重定向。这里的含义是去往DNS、ISE、DC的流量不会被重定向，客户端可以正常去往这些地址。但是其他所有流量都会被重定向。这里重定向列表一定要明白具体含义，否则很容易出现无限循环重定向到ISE页面。 1234567891011121314aaa-server ISE protocol radius authorize-only interim-accounting-update periodic 1 merge-dacl before-avpair dynamic-authorization aaa-server ISE (inside) host 172.20.29.140 key cisco authentication-port 1812 access-list Posture_Redirect_ACL extended deny udp any any eq domainaccess-list Posture_Redirect_ACL extended deny ip any host 172.20.29.140access-list Posture_Redirect_ACL extended deny ip any host 172.20.29.150access-list Posture_Redirect_ACL extended permit ip any any 下面就是SSLVPN的常规配置了，这里使用了SSLVPN的默认tunnel-group。 12345678910111213ip local pool sslvpn_client_pool 192.168.100.100-192.168.100.200 mask 255.255.255.255group-policy employee-group-policy internalgroup-policy employee-group-policy attributes dns-server value 172.20.29.150 vpn-tunnel-protocol ssl-client default-domain value liuqianglong.com address-pools value sslvpn_client_pooltunnel-group DefaultWEBVPNGroup general-attributes authentication-server-group ISE authorization-server-group ISE 五、AnyConnect 拨号测试5.1、客户端安装Posture模块 这里ASA没有配置隧道分隔，所以客户端所有流量都会经过AnyConnect，AnyConnect会主动触发一个HTTP流量去访问http://www.msftconnecttest.com/redirect，触发页面重定向到ISE Posture下载页面。如果配置了隧道分隔，需要用户主动访问一个内网服务器触发重定向，才会显示下面的页面。这里跟随向导前进即可。 检测是否安装AnyConnect Posture模块。 下载这个临时代理软件，这个并不是最终的ISE Posture模块，下载之后记得备份这个代理软件，因为如果安装不成功这个临时代理会自动删除，你又需要重新下载一次。 这里客户端和ISE在进行证书认证，所以如果你的ISE是自签名证书，那么需要导出ISE的自签名证书，导入到客户端才能顺利通过认证。我这里的ISE实验环境显然是自签名证书，所以需要进行导入证书操作。 检查BitLocker和File时不会检查证书，当检查Firewall和Windows Patch时需要检查证书。 客户端一定要信任ISE证书之后再进行后面的操作，否则你可能会看到各种报错界面。这是其中一种报错界面。如果客户端已经信任ISE Posture证书了，那么可以忽略后面导入证书的操作。 如果出现这个报错也是客户端不信任ISE Posture证书导致的。The requirement cannot be evaluated since you are connected to an untrusted server. Please contact your system adminitrator. 5.2、客户端导入ISE证书 在ISE上导出自签名证书，导出的是.pem文件，你可以用各种方式将文件传输到客户端上，客户端上修改文件后缀为.cer即可安装证书。 客户端需要将证书同时导入到当前用户和本地计算机。 导入到「受信任的根证书颁发机构」。 导入之后客户端会信任ISE Posure证书，即可正常通信。 代理软件继续下载ISE Posture模块。 因为ASAv测试license限速100k，所以这里我离线手动安装ISE Posture模块，在线下载Posture模块速度太慢。这个下载链接依然需要CCO账号，与上面AnyConnect下载是同一个链接。 安装成功后AnyConnect UI多出一个System Scan模块。 拨号成功后，Posure会下载ISE提供的Windows合规扫描模块。 5.3、客户端合规性检测5.3.1 合规性监测失败页面展示 客户端未开启防火墙提示页面。 客户端C盘根目录下没有test.txt这个文件提示页面。 客户端C盘未开启BitLocker提示页面。 当Window Update未通过时，因为配置了Remediation，所以系统会尝试下载最新的Patch文件。这里一定要确认客户端能访问Window Update服务器，在前面配置检测策略时已经详细说过了。 5.3.2 客户端进行合规检查时授权信息 此时客户端正在检查BitLocker是否开启，一共有5分钟的监测时间，在此期间内客户端状态为Unknow，此时客户端流量受到重定向列表管控。 查看用户获取的具体授权信息，最后一行可以看到用户获取的重定向列表。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778asa# show vpn-sessiondb detail anyconnect filter Filter criteria sort Sort Criteria | Output modifiers &lt;cr&gt;asa# show vpn-sessiondb detail anyconnectSession Type: AnyConnect DetailedUsername : ssluser Index : 36Assigned IP : 192.168.100.101 Public IP : 52.94.8.10Protocol : AnyConnect-Parent SSL-Tunnel DTLS-TunnelLicense : AnyConnect PremiumEncryption : AnyConnect-Parent: (1)none SSL-Tunnel: (1)AES-GCM-256 DTLS-Tunnel: (1)AES256Hashing : AnyConnect-Parent: (1)none SSL-Tunnel: (1)SHA384 DTLS-Tunnel: (1)SHA1Bytes Tx : 63439 Bytes Rx : 21404Pkts Tx : 128 Pkts Rx : 174Pkts Tx Drop : 0 Pkts Rx Drop : 0Group Policy : employee-group-policy Tunnel Group : DefaultWEBVPNGroupLogin Time : 10:13:17 UTC Wed Feb 3 2021Duration : 0h:00m:46sInactivity : 0h:00m:00sVLAN Mapping : N&#x2F;A VLAN : noneAudt Sess ID : ac141d9100024000601a773dSecurity Grp : noneAnyConnect-Parent Tunnels: 1SSL-Tunnel Tunnels: 1DTLS-Tunnel Tunnels: 1AnyConnect-Parent: Tunnel ID : 36.1 Public IP : 52.94.8.10 Encryption : none Hashing : none TCP Src Port : 49367 TCP Dst Port : 443 Auth Mode : userPassword Idle Time Out: 30 Minutes Idle TO Left : 29 Minutes Client OS : win Client OS Ver: 10.0.19041 Client Type : AnyConnect Client Ver : Cisco AnyConnect VPN Agent for Windows 4.9.05042 Bytes Tx : 7699 Bytes Rx : 0 Pkts Tx : 5 Pkts Rx : 0 Pkts Tx Drop : 0 Pkts Rx Drop : 0SSL-Tunnel: Tunnel ID : 36.2 Assigned IP : 192.168.100.101 Public IP : 52.94.8.10 Encryption : AES-GCM-256 Hashing : SHA384 Ciphersuite : ECDHE-ECDSA-AES256-GCM-SHA384 Encapsulation: TLSv1.2 TCP Src Port : 49379 TCP Dst Port : 443 Auth Mode : userPassword Idle Time Out: 30 Minutes Idle TO Left : 29 Minutes Client OS : Windows Client Type : SSL VPN Client Client Ver : Cisco AnyConnect VPN Agent for Windows 4.9.05042 Bytes Tx : 16382 Bytes Rx : 7801 Pkts Tx : 39 Pkts Rx : 67 Pkts Tx Drop : 0 Pkts Rx Drop : 0DTLS-Tunnel: Tunnel ID : 36.3 Assigned IP : 192.168.100.101 Public IP : 52.94.8.10 Encryption : AES256 Hashing : SHA1 Ciphersuite : AES256-SHA Encapsulation: DTLSv1.0 UDP Src Port : 58772 UDP Dst Port : 443 Auth Mode : userPassword Idle Time Out: 30 Minutes Idle TO Left : 29 Minutes Client OS : Windows Client Type : DTLS VPN Client Client Ver : Cisco AnyConnect VPN Agent for Windows 4.9.05042 Bytes Tx : 39358 Bytes Rx : 13603 Pkts Tx : 84 Pkts Rx : 107 Pkts Tx Drop : 0 Pkts Rx Drop : 0ISE Posture: Redirect URL : https:&#x2F;&#x2F;ise26.liuqianglong.com:8443&#x2F;portal&#x2F;gateway?sessionId&#x3D;ac141d9100024000601a773d&amp;portal&#x3D;27b1bc30-... Redirect ACL : Posture_Redirect_ACL 可以查看重定向列表的流量匹配情况。 12345678asa# show access-listaccess-list cached ACL log flows: total 0, denied 0 (deny-flow-max 4096) alert-interval 300access-list Posture_Redirect_ACL; 4 elements; name hash: 0xcadb04eaaccess-list Posture_Redirect_ACL line 1 extended deny udp any any eq domain (hitcnt&#x3D;4294) 0x99c9a32caccess-list Posture_Redirect_ACL line 2 extended deny ip any host 172.20.29.140 (hitcnt&#x3D;2184) 0x2bb72c86access-list Posture_Redirect_ACL line 3 extended deny ip any host 172.20.29.150 (hitcnt&#x3D;0) 0xaf71d144access-list Posture_Redirect_ACL line 4 extended permit ip any any (hitcnt&#x3D;5) 0xd1910f22 在客户端上测试网络连通性，此时客户端只能访问DNS、172.20.29.140、172.20.29.150的流量，除此之外的HTTP流量都会被重定向到ISE上。也就是只能访问重定向列表deny的流量。 5.3.3 客户端未通过合规性检测时的授权信息 此时合规性检测失败。 ASA上查看用户授权信息，最后一行可以看到DACL信息，此时客户端访问网络受到DACL的限制。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970asa# show vpn-sessiondb detail anyconnectSession Type: AnyConnect DetailedUsername : ssluser Index : 36Assigned IP : 192.168.100.101 Public IP : 52.94.8.10Protocol : AnyConnect-Parent SSL-Tunnel DTLS-TunnelLicense : AnyConnect PremiumEncryption : AnyConnect-Parent: (1)none SSL-Tunnel: (1)AES-GCM-256 DTLS-Tunnel: (1)AES256Hashing : AnyConnect-Parent: (1)none SSL-Tunnel: (1)SHA384 DTLS-Tunnel: (1)SHA1Bytes Tx : 69643 Bytes Rx : 34502Pkts Tx : 172 Pkts Rx : 240Pkts Tx Drop : 0 Pkts Rx Drop : 0Group Policy : employee-group-policy Tunnel Group : DefaultWEBVPNGroupLogin Time : 10:13:17 UTC Wed Feb 3 2021Duration : 0h:02m:44sInactivity : 0h:00m:00sVLAN Mapping : N&#x2F;A VLAN : noneAudt Sess ID : ac141d9100024000601a773dSecurity Grp : noneAnyConnect-Parent Tunnels: 1SSL-Tunnel Tunnels: 1DTLS-Tunnel Tunnels: 1AnyConnect-Parent: Tunnel ID : 36.1 Public IP : 52.94.8.10 Encryption : none Hashing : none TCP Src Port : 49367 TCP Dst Port : 443 Auth Mode : userPassword Idle Time Out: 30 Minutes Idle TO Left : 27 Minutes Client OS : win Client OS Ver: 10.0.19041 Client Type : AnyConnect Client Ver : Cisco AnyConnect VPN Agent for Windows 4.9.05042 Bytes Tx : 7699 Bytes Rx : 0 Pkts Tx : 5 Pkts Rx : 0 Pkts Tx Drop : 0 Pkts Rx Drop : 0SSL-Tunnel: Tunnel ID : 36.2 Assigned IP : 192.168.100.101 Public IP : 52.94.8.10 Encryption : AES-GCM-256 Hashing : SHA384 Ciphersuite : ECDHE-ECDSA-AES256-GCM-SHA384 Encapsulation: TLSv1.2 TCP Src Port : 49379 TCP Dst Port : 443 Auth Mode : userPassword Idle Time Out: 30 Minutes Idle TO Left : 27 Minutes Client OS : Windows Client Type : SSL VPN Client Client Ver : Cisco AnyConnect VPN Agent for Windows 4.9.05042 Bytes Tx : 16382 Bytes Rx : 7801 Pkts Tx : 39 Pkts Rx : 67 Pkts Tx Drop : 0 Pkts Rx Drop : 0 Filter Name : #ACSACL#-IP-Posture_NonCompliant_ACL-601a74ebDTLS-Tunnel: Tunnel ID : 36.3 Assigned IP : 192.168.100.101 Public IP : 52.94.8.10 Encryption : AES256 Hashing : SHA1 Ciphersuite : AES256-SHA Encapsulation: DTLSv1.0 UDP Src Port : 58772 UDP Dst Port : 443 Auth Mode : userPassword Idle Time Out: 30 Minutes Idle TO Left : 29 Minutes Client OS : Windows Client Type : DTLS VPN Client Client Ver : Cisco AnyConnect VPN Agent for Windows 4.9.05042 Bytes Tx : 45562 Bytes Rx : 26701 Pkts Tx : 128 Pkts Rx : 173 Pkts Tx Drop : 0 Pkts Rx Drop : 0 Filter Name : #ACSACL#-IP-Posture_NonCompliant_ACL-601a74eb 在ISE上可以看到通过CoA机制下发的DACL信息。 此时DACL未放行的流量，客户端无法通信。 5.3.4 客户端通过合规性检测后的授权 这里我在测试时，关闭了检测Patch，因为客户端通过ASA100k的速度下载Windows更新的速度太慢，很难出效果（我在生产环境测试可以正常工作）。同时也关闭了BitLocker检测，Window开启BitLocker是一个漫长的过程（同样在生产环境测试过可以正常工作）。这2项我都在生产环境中成功部署了，检测和修复是没有问题的。因为我们生产环境中部署了SCCM，我测试了SCCM Client检测方式也可以正常工作。 这里ISE只授权了group-policy，所以客户端会受到group-policy的权限控制。 5.3.5 ISE查看客户端合规日志 这里可以看到客户端Posture检测是否通过。 Posture检测通过。 未通过Posture检测。 六、参考资料 ISE Posture部署指南：https://community.cisco.com/t5/security-documents/ise-posture-prescriptive-deployment-guide/ta-p/3680273 ISE Posture结合AnyConnect配置：https://community.cisco.com/t5/security-documents/how-to-configure-posture-with-anyconnect-compliance-module-and/ta-p/3647768 ISE Posture配置实例：https://www.youtube.com/watch?v=xrAdpdfBZgg","categories":[{"name":"Network","slug":"Network","permalink":"https://liuqianglong.com/categories/Network/"}],"tags":[{"name":"SSLVPN","slug":"SSLVPN","permalink":"https://liuqianglong.com/tags/SSLVPN/"},{"name":"ISE","slug":"ISE","permalink":"https://liuqianglong.com/tags/ISE/"},{"name":"Posture","slug":"Posture","permalink":"https://liuqianglong.com/tags/Posture/"}],"keywords":[{"name":"Network","slug":"Network","permalink":"https://liuqianglong.com/categories/Network/"}]},{"title":"Markdown语法测试","slug":"Markdown语法测试","date":"2021-01-29T16:15:21.000Z","updated":"2021-02-04T02:44:42.258Z","comments":true,"path":"Markdown语法测试.html","link":"","permalink":"https://liuqianglong.com/Markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95.html","excerpt":"","text":"这是一篇Markdown语法渲染效果的测试文章，用来测试博客是否能正常显示Markdown语法。 一级标题二级标题三级标题四级标题五级标题六级标题印象笔记 近日，印象笔记宣布完成重组。作为Evernote已在中国独立运营近6年的品牌，印象笔记将成为由中方控股的中美合资独立运营实体，并获得红杉宽带跨境数字产业基金首轮数亿元人民币投资。 最外层 第一层嵌套 第二层嵌套 第一项 菜鸟教程学的不仅是技术更是梦想 第二项 印象笔记官网 使用 iOS 版本印象笔记如何快速保存内容？ 启用印象笔记 Widget ——印象笔记·剪贴板 复制粘贴任意内容 * 微信 滑动到 Widget 插件区域即可完成保存印象笔记·剪贴板有什么特点？ 快：开启自动模式，可以自动保存剪贴板的任意内容 一切：只要可以复制粘贴就可以保存 有序：全部保存在「我的剪贴板」笔记本并以时间来命名 三只青蛙 第一只青蛙 第二只青蛙 第三只青蛙 帐户类型 免费帐户 标准帐户 高级帐户 帐户流量 60M 1GB 10GB 设备数目 2台 无限制 无限制 当前价格 免费 ￥8.17/月 ￥12.33/月 &#123;.line-numbers,highlight12345678910111213141516171819202122#!/usr/bin/pythonimport reline = &quot;Cats are smarter than dogs&quot;matchObj = re.match( r&#x27;(.*) are (.*?) .*&#x27;, line, re.M|re.I)if matchObj: print &quot;matchObj.group() : &quot;, matchObj.group() print &quot;matchObj.group(1) : &quot;, matchObj.group(1) print &quot;matchObj.group(2) : &quot;, matchObj.group(2)else: print &quot;No match!!&quot;list1 = [&#x27;aaa&#x27;,111,(4,5),2.01]list2 = [&#x27;bbb&#x27;,333,111,3.14,(4,5)]for x in list1: if x in list2: print(x,&#x27;in list1 and list2&#x27;) else: print(x,&#x27;only in list1&#x27;) 使用 Ctrl+Alt+Del 重启电脑 文本加粗** 正常显示星号 ** 这会是 斜体 的文字这会是 斜体 的文字 这会是 粗体 的文字这会是 粗体 的文字 你也 组合 这些符号 这个文字将会被横线删除 Item 1 Item 2 Item 2a Item 2b Item 1 Item 2 Item 3 Item 3a Item 3b 如下，三个或者更多的 连字符 星号 下划线 &#123;highlight123``````javascript &#123;highlight=10-20&#125; &#123;highlight1 ==高亮== 这个链接用 1 作为网址变量 [RUNOOB][1].然后在文档的结尾位变量赋值（网址）[1]: http://static.runoob.com/images/runoob-logo.png 我是黑体字我是微软雅黑我是华文彩云我是红色我是绿色我是蓝色我是尺寸我是黑体，绿色，尺寸为5 文字背景颜色背景色yellow","categories":[{"name":"Tools","slug":"Tools","permalink":"https://liuqianglong.com/categories/Tools/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://liuqianglong.com/tags/Markdown/"}],"keywords":[{"name":"Tools","slug":"Tools","permalink":"https://liuqianglong.com/categories/Tools/"}]},{"title":"AWS上配置Cisco ASAv AnyConnect","slug":"AWS上配置Cisco-ASAv-AnyConnect","date":"2021-01-29T02:09:31.000Z","updated":"2021-04-25T10:43:37.552Z","comments":true,"path":"AWS上配置Cisco-ASAv-AnyConnect.html","link":"","permalink":"https://liuqianglong.com/AWS%E4%B8%8A%E9%85%8D%E7%BD%AECisco-ASAv-AnyConnect.html","excerpt":"","text":"这里演示了如何在AWS上搭建思科的SSLVPN，用来解决员工远程办公的需求。文章需要你有一定的AWS和SSLVPN基础。 1、实验简介最近一直在研究思科防火墙的SSLVPN，用来解决员工远程办公的问题。传统上一般使用ASA55XX系列的硬件防火墙做SSLVPN，使用ASAv与使用硬件防火墙功能特性几乎没有区别。ASAv在vSphere和AWS环境都可以部署。这里主要介绍一下在AWS上使用ASAv配置SSLVPN的步骤。后续会继续深入去聊SSLVPN上的高级特性。 如果你有配置ASA SSLVPN的经验，需要注意的是AWS上的特殊场景，下面是整个实验的注意事项： 在中国区如果AWS账号未经过ICP备案则无法使用TCP 80/443端口，所以需要SSLVPN修改默认的443端口号。 AWS上ASAv为客户端分配的IP地址需要进过NAT转换后才能访问，因为服务器没有回包路由。 AWS上的Windows2016无法安装ASDM，建议使用Windows2019安装ASDM软件。 如果ASAv未购买License会限速100k并且最大会话100个，用于做实验足够了但是无法用于生产环境。 2、环境介绍 本次实验在VPC内需要使用2个子网，一个公共子网用于连接跳板机，用户可以先连接Windows2016之后，在Windows2016通过SSH和ASDM连接ASAv。这里不会详细介绍AWS相关基础知识，例如如何创建VPC、如何创建公有子网、私有子网。 这是实验将会用到的公有子网，默认路由指向了IGW。 3、配置跳板机环境 在公有子网启用一台window2016，用于之后通过SSH和ASDM访问ASAv，注意实例要选择windows 2016，经过测试windows 2019 无法安装ASDM。通过AWS的快速启动一台windows 2016，可以通过输入“windows 2016”过滤查找。注意，window 2019环境无法安装Cisco ASDM。 Window2016放置在公有子网，并且开启分配公有IP功能。 4、创建ASAv实例 在AWS Marketplace搜索asav，选择ami启用即可。需要注意的是，ASAv默认eth0是ciscoasa的管理接口，管理接口只能走网管流量，不能传输数据流量，所以至少需要再添加一个eth1作为outside接口。如果需要添加更多接口，例如inside和dmz接口，可以添加「网络接口」然后附加到实例。其实在AWS环境中一个outside接口就可以运行AnyConnect环境了。 实例创建成功之后，在AWS环境下需要对实例参数进行一下配置。在AWS接口上默认会丢弃目的IP不是本接口IP的流量，所以想要ASA转发流量，必须关闭outside接口的源/目标检查。 如果客户端想要访问私有云内的服务器，那么不能直接使用ASAv分配的地址池去访问，否则服务器没有回包路由。解决方法是在ASAv做源NAT，将客户端的源IP地址转换成outside上的一个辅助IP地址（无法转换成outside接口地址）。如果是vSphere环境可以转换为outside接口地址。 防火墙outside需要公网能直接访问，所以需要一个公网地址。 公网地址关联上防火墙的outside接口。 启动之后，eth0是管理接口，首次连接时只能连接管理接口，如果想要连接其他接口可以连接之后配置。 5、ASAv基础配置 首先通过SSH连接到ASAv的管理口进行一些基础配置，这里我使用MobaXterm作为SSH客户端，下载地址会放在最后。在AWS上启动的ASAv默认用户名是admin，使用对应的密钥登录即可。 首先需要设置enable密码 123456ciscoasa&gt; enableThe enable password is not set. Please set it now.Enter Password: ****Repeat Password: ****Note: Save your configuration so that the password persists across reboots(&quot;write memory&quot; or &quot;copy running-config startup-config&quot;). 添加的eth1接口默认是down状态 12345ciscoasa# show interface ip briefInterface IP-Address OK? Method Status ProtocolInternal-Data0&#x2F;0 169.254.1.1 YES unset up upManagement0&#x2F;0 172.30.2.176 YES DHCP up upTenGigabitEthernet0&#x2F;0 172.30.1.7 YES CONFIG administratively down up 开启eth1，配置名称为outside 123interface TenGigabitEthernet0&#x2F;0 no shutdown nameif outside 想要通过ASDM连接ASAv，需要开启http服务器，并且允许http流量从管理口进入，0 0 表示不限制IP地址段，如果想要只允许192.168.1.0/24网段的http连接可以这么配置http 192.168.1.0 255.255.255.0。配置http的认证方式是本地认证，配置一个本地15级权限的用户名密码。 1234http server enablehttp 0 0 managementaaa authentication http console LOCALusername cisco password ciscoasa privilege 15 通过网页访问ASAv的管理接口地址 先下载并且安装Java环境，然后下载安装ASDM软件。 下载安装ASDM环境。 使用本地15级账号密码登录。 ASAv未导入License的情况下，限速100Kbps，最大会话100个连接。 这里通过ASDM的文件管理功能导入AnyConnect文件。 导入本地的AnyConnect客户端文件。 查看磁盘确认有客户端文件。 123ciscoasa# dirDirectory of disk0:&#x2F;86 -rwx 41077110 08:00:10 Jan 12 2021 anyconnect-win-4.6.00362-webdeploy-k9.pkg 6、ASAv配置SSLVPN 下面几乎是在AWS上ASAv的最小化配置了，这里对AnyConnect高级功能不做讨论。下面命令的含义：当客户端访问其他任何地址时，源地址转换为172.30.1.5。 12345object network asa_outside_address host 172.30.1.5object network anyconnect_pool_object subnet 192.168.1.0 255.255.255.0nat (outside,outside) source dynamic anyconnect_pool_object pat-pool asa_outside_address 默认情况下ASAv相同安全级别不能访问，流量不能从相同接口进出，这里需要开启这2个特性。 12same-security-traffic permit inter-interfacesame-security-traffic permit intra-interface 创建客户端的地址池 1ip local pool anyconnect_client_pool 192.168.1.1-192.168.1.254 mask 255.255.255.255 定义隧道分隔地址段，只有当用户访问172.30.1.0/24时，流量才会通过SSL隧道到达ASAv，去往其他网段的流量客户端依然从本地网络出去。 1access-list anyconnect_split standard permit 172.30.1.0 255.255.255.0 开启webvpn功能，修改端口为8443（AWS中国区未经过ICP备案无法使用TCP80/443），激活anyconnect拨号功能。 12345webvpn port 8443 enable outside anyconnect enable anyconnect image disk0:&#x2F;anyconnect-win-4.6.00362-webdeploy-k9.pkg 配置group-policy，允许通过网页和客户端拨入，定义流量为隧道分隔模式。 123456group-policy anyconnect internalgroup-policy anyconnect attributes vpn-tunnel-protocol ssl-client ssl-clientless split-tunnel-policy tunnelspecified split-tunnel-network-list value anyconnect_split address-pools value anyconnect_client_pool 创建一个本地账号，用于拨号测试。 123username anyuser password ciscoasausername anyuser attributes vpn-group-policy anyconnect 目前防火墙的默认路由是通过管理接口DHCP获取到的，需要将默认路由修改为outside出去。修改步骤如下： 开启outside ssh管理 将管理接口配置为静态IP，获取的默认路由会自动消失 重新通过outside接口连接ciscoasa 指定默认路由出口为outside 查看现有默认路由通过mgmt接口出去 123456ciscoasa# show routeS* 0.0.0.0 0.0.0.0 [1&#x2F;0] via 172.30.2.1, managementC 172.30.1.0 255.255.255.0 is directly connected, outsideL 172.30.1.7 255.255.255.255 is directly connected, outsideC 172.30.2.0 255.255.255.0 is directly connected, managementL 172.30.2.176 255.255.255.255 is directly connected, management 允许ssh连接outside接口 1ssh 0 0 outside 将管理接口配置为静态地址，获取的默认路由会自动消失。 12interface management 0&#x2F;0 ip address 172.30.2.176 255.255.255.0 重新通过SSH连接上outside接口之后，添加默认路由从outside接口出去。 1route outside 0 0 172.30.1.1 默认情况下AnyConnect不允许通过远程桌面拨号，需要创建一个AnyConnect Client Profile文件，编辑里面的参数。 允许通过远程桌面拨号。 如果未修改这个参数，通过远程桌面拨号后会有如下报错。 7、测试AnyConnect拨号 拨号成功后，通过SSL通道能访问到Windows2016的内网地址即可证明访问成功。Windows2016需要关闭防火墙才能ping通。 安全组也需要放行ICMP协议。 在公网上拨号成功。 去往172.30.1.0/24网段的流量会通过加密隧道访问。 测试访问内网Windows2016 1234567C:\\Users\\Administrator&gt;ping 172.30.1.131正在 Ping 172.30.1.131 具有 32 字节的数据:来自 172.30.1.131 的回复: 字节&#x3D;32 时间&#x3D;1ms TTL&#x3D;128来自 172.30.1.131 的回复: 字节&#x3D;32 时间&#x3D;1ms TTL&#x3D;128来自 172.30.1.131 的回复: 字节&#x3D;32 时间&#x3D;1ms TTL&#x3D;128来自 172.30.1.131 的回复: 字节&#x3D;32 时间&#x3D;1ms TTL&#x3D;128 这里协议默认是TLS，也就是TCP建立的连接，如果网络环境不太稳定，需要走语音和视频流量，建议使用DTLS通道，也就是UDP连接。 修改DTLS端口为8443 12webvpn dtls port 8443 在group-policy下开启DTLS 123group-policy anyconnect attributes webvpn anyconnect ssl dtls enable 重新拨号查看协议。 ASAv上查看客户端信息 123456789101112131415161718ciscoasa(config)# show vpn-sessiondb anyconnectSession Type: AnyConnectUsername : anyuser Index : 3Assigned IP : 192.168.1.1 Public IP : 52.83.196.213Protocol : AnyConnect-Parent SSL-TunnelLicense : AnyConnect PremiumEncryption : AnyConnect-Parent: (1)none SSL-Tunnel: (1)AES-GCM-256Hashing : AnyConnect-Parent: (1)none SSL-Tunnel: (1)SHA384Bytes Tx : 18613 Bytes Rx : 7928Group Policy : anyconnect Tunnel Group : DefaultWEBVPNGroupLogin Time : 09:46:43 UTC Tue Jan 12 2021Duration : 0h:01m:51sInactivity : 0h:00m:00sVLAN Mapping : N&#x2F;A VLAN : noneAudt Sess ID : ac1e02b0000030005ffd7003Security Grp : none 附一（NAT相关）tunnelall带来的问题文章的NAT配置如下，配置是隧道分隔模式倒是没有问题，但是如果想要使用tunnelall模式，让所有流量都通过ASAv抵达互联网，那么使用下面的NAT配置客户端无法访问互联网，但是可以访问内网。 1nat (outside,outside) source dynamic anyconnect_pool_object pat-pool asa_outside_address 因为EIP在关联私有IP时，相当于做的是静态一对一映射，这里EIP关联上了ASAv的outside接口，所以客户端的地址转换为辅助IP地址之后是不能转换为EIP去访问公网的，但是访问所在子网有明细路由的网络时，是不需要转换为EIP的，所以无法访问公网，可以访问内网。 ![AnyConnect](../image/AWS上配置Cisco ASAv SSLVPN/AWS-ASAv-AnyConnect-28.png) tunnelall的解决方式有两种解决方式，我更推荐第一种解决方式： 修改NAT配置，将客户端源地址转换为ASAv outside出接口地址。使用object nat的配置方式，在object下配置NAT。 123object network sslvpn_client_pool_object subnet 172.30.0.0 255.255.254.0 nat (outside,outside) dynamic interface 再添加一个EIP，将这个EIP关联到辅助IP上去。 两块网卡带来的问题上面实验都是防火墙只有一块网卡outside的情况，如果防火墙有两块网卡，一个outside接口，一个inside接口，还需要加一个twice nat的配置。 如果只有上面object nat配置，那么客户端流量访问防火墙inside所在子网时，因为所在子网时防火墙直连接口，所以流量会从inside接口出去。但是无法在object nat上配置源自outside却去往不同方向的流量。此时只能借助twice nat的配置。 利用twice nat配置时，可以将客户端地址转换为防火墙inside接口地址，也可以转换为地址池，因为此时流量并不去访问互联网。 12345object network sslvpn_client_pool_object subnet 172.30.0.0 255.255.254.0 nat (outside,outside) dynamic interface nat (outside,inside) source dynamic sslvpn_client_pool_object anyconnect_pat_pool_inside 1、mobaxterm下载地址2、Java环境下载地址","categories":[{"name":"Network","slug":"Network","permalink":"https://liuqianglong.com/categories/Network/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://liuqianglong.com/tags/AWS/"},{"name":"Cisco","slug":"Cisco","permalink":"https://liuqianglong.com/tags/Cisco/"},{"name":"AnyConnect","slug":"AnyConnect","permalink":"https://liuqianglong.com/tags/AnyConnect/"},{"name":"SSLVPN","slug":"SSLVPN","permalink":"https://liuqianglong.com/tags/SSLVPN/"}],"keywords":[{"name":"Network","slug":"Network","permalink":"https://liuqianglong.com/categories/Network/"}]}]}